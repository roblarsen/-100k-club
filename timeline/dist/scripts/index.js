/*! For license information please see index.js.LICENSE.txt */
(()=>{var e={119:function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(5093))},158:function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(5093))},217:function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(5093))},304:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(5093))},306:function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(5093))},527:function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var s="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":s=i?"sekunnin":"sekuntia";break;case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},609:function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},708:function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(5093))},748:function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(5093))},838:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},1011:function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(5093))},1025:function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(5093))},1052:function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},1135:function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(5093))},1221:function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(5093))},1290:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(5093))},1470:function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function n(e){return e>9?n(e%10):e}var r=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],a=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,i=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:i,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:i,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(n(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(5093))},1488:function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(r,a,i,s){var o=t(r),u=n[e][t(r)];return 2===o&&(u=u[a?0:1]),u.replace(/%d/i,r)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(5093))},1509:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,s){var o=r(t),u=a[e][r(t)];return 2===o&&(u=u[n?0:1]),u.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(5093))},1541:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(5093))},1545:function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(5093))},1632:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1200?"上午":1200===r?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(5093))},1713:function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(5093))},1734:function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(5093))},1765:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(5093))},1794:function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(5093))},1827:function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){return 0===this.day()?"[la scorsa] dddd [alle] LT":"[lo scorso] dddd [alle] LT"},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},1848:function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},1885:function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(5093))},2124:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){return"D"===t?e+"वेर":e},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(5093))},2218:function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(5093))},2264:function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(5093))},2271:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(5093))},2274:function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"én time",hh:"%d timer",d:"én dag",dd:"%d dager",w:"én uke",ww:"%d uker",M:"én måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},2297:function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(5093))},2353:function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,s){var o=n(t),u=r[e][n(t)];return 2===o&&(u=u[a?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(5093))},2475:function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(5093))},2477:function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},2572:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^(maart|mrt\.?)$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(5093))},2648:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(5093))},2682:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(5093))},2934:function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(5093))},3004:function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},3035:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},3164:function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(5093))},3322:function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једног минута"],mm:["минут","минута","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],d:["један дан","једног дана"],dd:["дан","дана","дана"],M:["један месец","једног месеца"],MM:["месец","месеца","месеци"],y:["једну годину","једне године"],yy:["годину","године","година"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,s=t.words[r];return 1===r.length?"y"===r&&n?"једна година":a||n?s[0]:s[1]:(i=t.correctGrammaticalCase(e,s),"yy"===r&&n&&"годину"===i?e+" година":e+" "+i)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},3383:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){return"D"===t?e+"er":e},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(5093))},3386:function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(5093))},3478:function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},3508:function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},3601:function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},3635:function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(5093))},3739:function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(5093))},3784:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^(maart|mrt\.?)$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(5093))},3827:function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(5093))},3861:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(5093))},3872:function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(5093))},4051:function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},4063:function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(5093))},4226:function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(5093))},4418:function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),r=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function i(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"ww":return r+(a(e)?"tygodnie":"tygodni");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:i,M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},4429:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return"jedan sat";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:function(e,t,n,r){if("m"===n)return t?"jedna minuta":r?"jednu minutu":"jedne minute"},mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},4451:function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(5093))},4457:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(5093))},4496:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(5093))},4566:function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},4691:function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){return 6===this.day()?"[το προηγούμενο] dddd [{}] LT":"[την προηγούμενη] dddd [{}] LT"},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return n=r,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(5093))},4697:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},4903:function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(5093))},5050:function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(5093))},5093:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function u(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(o(e,t))return!1;return!0}function d(e){return void 0===e}function l(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function _(e,t){var n,r=[],a=e.length;for(n=0;n<a;++n)r.push(t(e[n],n));return r}function f(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return Ot(e,t,n,r,!0).utc()}function m(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function y(e){var t=null,n=!1,a=e._d&&!isNaN(e._d.getTime());return a&&(t=m(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n),e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)),null!=Object.isFrozen&&Object.isFrozen(e)?a:(e._isValid=a,e._isValid)}function p(e){var t=h(NaN);return null!=e?f(m(t),e):m(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var M=a.momentProperties=[],g=!1;function L(e,t){var n,r,a,i=M.length;if(d(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),d(t._i)||(e._i=t._i),d(t._f)||(e._f=t._f),d(t._l)||(e._l=t._l),d(t._strict)||(e._strict=t._strict),d(t._tzm)||(e._tzm=t._tzm),d(t._isUTC)||(e._isUTC=t._isUTC),d(t._offset)||(e._offset=t._offset),d(t._pf)||(e._pf=m(t)),d(t._locale)||(e._locale=t._locale),i>0)for(n=0;n<i;n++)d(a=t[r=M[n]])||(e[r]=a);return e}function Y(e){L(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===g&&(g=!0,a.updateOffset(this),g=!1)}function v(e){return e instanceof Y||null!=e&&null!=e._isAMomentObject}function b(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function w(e,t){var n=!0;return f((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){var r,i,s,u=[],d=arguments.length;for(i=0;i<d;i++){if(r="","object"==typeof arguments[i]){for(s in r+="\n["+i+"] ",arguments[0])o(arguments[0],s)&&(r+=s+": "+arguments[0][s]+", ");r=r.slice(0,-2)}else r=arguments[i];u.push(r)}b(e+"\nArguments: "+Array.prototype.slice.call(u).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var k,D={};function T(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),D[e]||(b(t),D[e]=!0)}function x(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function S(e,t){var n,r=f({},e);for(n in t)o(t,n)&&(s(e[n])&&s(t[n])?(r[n]={},f(r[n],e[n]),f(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)o(e,n)&&!o(t,n)&&s(e[n])&&(r[n]=f({},r[n]));return r}function A(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,k=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};function H(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var j=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,F=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,O={},P={};function E(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(P[e]=a),t&&(P[t[0]]=function(){return H(a.apply(this,arguments),t[1],t[2])}),n&&(P[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function N(e,t){return e.isValid()?(t=J(t,e.localeData()),O[t]=O[t]||function(e){var t,n,r,a=e.match(j);for(t=0,n=a.length;t<n;t++)P[a[t]]?a[t]=P[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=x(a[r])?a[r].call(t,e):a[r];return i}}(t),O[t](e)):e.localeData().invalidDate()}function J(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(F.lastIndex=0;n>=0&&F.test(e);)e=e.replace(F,r),F.lastIndex=0,n-=1;return e}var W={D:"date",dates:"date",date:"date",d:"day",days:"day",day:"day",e:"weekday",weekdays:"weekday",weekday:"weekday",E:"isoWeekday",isoweekdays:"isoWeekday",isoweekday:"isoWeekday",DDD:"dayOfYear",dayofyears:"dayOfYear",dayofyear:"dayOfYear",h:"hour",hours:"hour",hour:"hour",ms:"millisecond",milliseconds:"millisecond",millisecond:"millisecond",m:"minute",minutes:"minute",minute:"minute",M:"month",months:"month",month:"month",Q:"quarter",quarters:"quarter",quarter:"quarter",s:"second",seconds:"second",second:"second",gg:"weekYear",weekyears:"weekYear",weekyear:"weekYear",GG:"isoWeekYear",isoweekyears:"isoWeekYear",isoweekyear:"isoWeekYear",w:"week",weeks:"week",week:"week",W:"isoWeek",isoweeks:"isoWeek",isoweek:"isoWeek",y:"year",years:"year",year:"year"};function z(e){return"string"==typeof e?W[e]||W[e.toLowerCase()]:void 0}function C(e){var t,n,r={};for(n in e)o(e,n)&&(t=z(n))&&(r[t]=e[n]);return r}var R={date:9,day:11,weekday:11,isoWeekday:11,dayOfYear:4,hour:13,millisecond:16,minute:14,month:8,quarter:7,second:15,weekYear:1,isoWeekYear:1,week:5,isoWeek:5,year:1};var I,U=/\d/,$=/\d\d/,q=/\d{3}/,B=/\d{4}/,G=/[+-]?\d{6}/,V=/\d\d?/,Z=/\d\d\d\d?/,K=/\d\d\d\d\d\d?/,X=/\d{1,3}/,Q=/\d{1,4}/,ee=/[+-]?\d{1,6}/,te=/\d+/,ne=/[+-]?\d+/,re=/Z|[+-]\d\d:?\d\d/gi,ae=/Z|[+-]\d\d(?::?\d\d)?/gi,ie=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,se=/^[1-9]\d?/,oe=/^([1-9]\d|\d)/;function ue(e,t,n){I[e]=x(t)?t:function(e,r){return e&&n?n:t}}function de(e,t){return o(I,e)?I[e](t._strict,t._locale):new RegExp(le(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function le(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ce(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function _e(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=ce(t)),n}I={};var fe={};function he(e,t){var n,r,a=t;for("string"==typeof e&&(e=[e]),l(t)&&(a=function(e,n){n[t]=_e(e)}),r=e.length,n=0;n<r;n++)fe[e[n]]=a}function me(e,t){he(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function ye(e,t,n){null!=t&&o(fe,e)&&fe[e](t,n._a,n,e)}function pe(e){return e%4==0&&e%100!=0||e%400==0}var Me=0,ge=1,Le=2,Ye=3,ve=4,be=5,we=6,ke=7,De=8;function Te(e){return pe(e)?366:365}E("Y",0,0,(function(){var e=this.year();return e<=9999?H(e,4):"+"+e})),E(0,["YY",2],0,(function(){return this.year()%100})),E(0,["YYYY",4],0,"year"),E(0,["YYYYY",5],0,"year"),E(0,["YYYYYY",6,!0],0,"year"),ue("Y",ne),ue("YY",V,$),ue("YYYY",Q,B),ue("YYYYY",ee,G),ue("YYYYYY",ee,G),he(["YYYYY","YYYYYY"],Me),he("YYYY",(function(e,t){t[Me]=2===e.length?a.parseTwoDigitYear(e):_e(e)})),he("YY",(function(e,t){t[Me]=a.parseTwoDigitYear(e)})),he("Y",(function(e,t){t[Me]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return _e(e)+(_e(e)>68?1900:2e3)};var xe,Se=Ae("FullYear",!0);function Ae(e,t){return function(n){return null!=n?(je(this,e,n),a.updateOffset(this,t),this):He(this,e)}}function He(e,t){if(!e.isValid())return NaN;var n=e._d,r=e._isUTC;switch(t){case"Milliseconds":return r?n.getUTCMilliseconds():n.getMilliseconds();case"Seconds":return r?n.getUTCSeconds():n.getSeconds();case"Minutes":return r?n.getUTCMinutes():n.getMinutes();case"Hours":return r?n.getUTCHours():n.getHours();case"Date":return r?n.getUTCDate():n.getDate();case"Day":return r?n.getUTCDay():n.getDay();case"Month":return r?n.getUTCMonth():n.getMonth();case"FullYear":return r?n.getUTCFullYear():n.getFullYear();default:return NaN}}function je(e,t,n){var r,a,i,s,o;if(e.isValid()&&!isNaN(n)){switch(r=e._d,a=e._isUTC,t){case"Milliseconds":return void(a?r.setUTCMilliseconds(n):r.setMilliseconds(n));case"Seconds":return void(a?r.setUTCSeconds(n):r.setSeconds(n));case"Minutes":return void(a?r.setUTCMinutes(n):r.setMinutes(n));case"Hours":return void(a?r.setUTCHours(n):r.setHours(n));case"Date":return void(a?r.setUTCDate(n):r.setDate(n));case"FullYear":break;default:return}i=n,s=e.month(),o=29!==(o=e.date())||1!==s||pe(i)?o:28,a?r.setUTCFullYear(i,s,o):r.setFullYear(i,s,o)}}function Fe(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?pe(e)?29:28:31-r%7%2}xe=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},E("M",["MM",2],"Mo",(function(){return this.month()+1})),E("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),E("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),ue("M",V,se),ue("MM",V,$),ue("MMM",(function(e,t){return t.monthsShortRegex(e)})),ue("MMMM",(function(e,t){return t.monthsRegex(e)})),he(["M","MM"],(function(e,t){t[ge]=_e(e)-1})),he(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[ge]=a:m(n).invalidMonth=e}));var Oe="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Pe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Ee=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ne=ie,Je=ie;function We(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=xe.call(this._shortMonthsParse,s))?a:null:-1!==(a=xe.call(this._longMonthsParse,s))?a:null:"MMM"===t?-1!==(a=xe.call(this._shortMonthsParse,s))||-1!==(a=xe.call(this._longMonthsParse,s))?a:null:-1!==(a=xe.call(this._longMonthsParse,s))||-1!==(a=xe.call(this._shortMonthsParse,s))?a:null}function ze(e,t){if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=_e(t);else if(!l(t=e.localeData().monthsParse(t)))return e;var n=t,r=e.date();return r=r<29?r:Math.min(r,Fe(e.year(),n)),e._isUTC?e._d.setUTCMonth(n,r):e._d.setMonth(n,r),e}function Ce(e){return null!=e?(ze(this,e),a.updateOffset(this,!0),this):He(this,"Month")}function Re(){function e(e,t){return t.length-e.length}var t,n,r,a,i=[],s=[],o=[];for(t=0;t<12;t++)n=h([2e3,t]),r=le(this.monthsShort(n,"")),a=le(this.months(n,"")),i.push(r),s.push(a),o.push(a),o.push(r);i.sort(e),s.sort(e),o.sort(e),this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function Ie(e,t,n,r,a,i,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,r,a,i,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,r,a,i,s),o}function Ue(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function $e(e,t,n){var r=7+t-n;return-(7+Ue(e,0,r).getUTCDay()-t)%7+r-1}function qe(e,t,n,r,a){var i,s,o=1+7*(t-1)+(7+n-r)%7+$e(e,r,a);return o<=0?s=Te(i=e-1)+o:o>Te(e)?(i=e+1,s=o-Te(e)):(i=e,s=o),{year:i,dayOfYear:s}}function Be(e,t,n){var r,a,i=$e(e.year(),t,n),s=Math.floor((e.dayOfYear()-i-1)/7)+1;return s<1?r=s+Ge(a=e.year()-1,t,n):s>Ge(e.year(),t,n)?(r=s-Ge(e.year(),t,n),a=e.year()+1):(a=e.year(),r=s),{week:r,year:a}}function Ge(e,t,n){var r=$e(e,t,n),a=$e(e+1,t,n);return(Te(e)-r+a)/7}E("w",["ww",2],"wo","week"),E("W",["WW",2],"Wo","isoWeek"),ue("w",V,se),ue("ww",V,$),ue("W",V,se),ue("WW",V,$),me(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=_e(e)}));function Ve(e,t){return e.slice(t,7).concat(e.slice(0,t))}E("d",0,"do","day"),E("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),E("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),E("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),E("e",0,0,"weekday"),E("E",0,0,"isoWeekday"),ue("d",V),ue("e",V),ue("E",V),ue("dd",(function(e,t){return t.weekdaysMinRegex(e)})),ue("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),ue("dddd",(function(e,t){return t.weekdaysRegex(e)})),me(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:m(n).invalidWeekday=e})),me(["d","e","E"],(function(e,t,n,r){t[r]=_e(e)}));var Ze="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ke="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Xe="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Qe=ie,et=ie,tt=ie;function nt(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=xe.call(this._weekdaysParse,s))?a:null:"ddd"===t?-1!==(a=xe.call(this._shortWeekdaysParse,s))?a:null:-1!==(a=xe.call(this._minWeekdaysParse,s))?a:null:"dddd"===t?-1!==(a=xe.call(this._weekdaysParse,s))||-1!==(a=xe.call(this._shortWeekdaysParse,s))||-1!==(a=xe.call(this._minWeekdaysParse,s))?a:null:"ddd"===t?-1!==(a=xe.call(this._shortWeekdaysParse,s))||-1!==(a=xe.call(this._weekdaysParse,s))||-1!==(a=xe.call(this._minWeekdaysParse,s))?a:null:-1!==(a=xe.call(this._minWeekdaysParse,s))||-1!==(a=xe.call(this._weekdaysParse,s))||-1!==(a=xe.call(this._shortWeekdaysParse,s))?a:null}function rt(){function e(e,t){return t.length-e.length}var t,n,r,a,i,s=[],o=[],u=[],d=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=le(this.weekdaysMin(n,"")),a=le(this.weekdaysShort(n,"")),i=le(this.weekdays(n,"")),s.push(r),o.push(a),u.push(i),d.push(r),d.push(a),d.push(i);s.sort(e),o.sort(e),u.sort(e),d.sort(e),this._weekdaysRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function at(){return this.hours()%12||12}function it(e,t){E(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function st(e,t){return t._meridiemParse}E("H",["HH",2],0,"hour"),E("h",["hh",2],0,at),E("k",["kk",2],0,(function(){return this.hours()||24})),E("hmm",0,0,(function(){return""+at.apply(this)+H(this.minutes(),2)})),E("hmmss",0,0,(function(){return""+at.apply(this)+H(this.minutes(),2)+H(this.seconds(),2)})),E("Hmm",0,0,(function(){return""+this.hours()+H(this.minutes(),2)})),E("Hmmss",0,0,(function(){return""+this.hours()+H(this.minutes(),2)+H(this.seconds(),2)})),it("a",!0),it("A",!1),ue("a",st),ue("A",st),ue("H",V,oe),ue("h",V,se),ue("k",V,se),ue("HH",V,$),ue("hh",V,$),ue("kk",V,$),ue("hmm",Z),ue("hmmss",K),ue("Hmm",Z),ue("Hmmss",K),he(["H","HH"],Ye),he(["k","kk"],(function(e,t,n){var r=_e(e);t[Ye]=24===r?0:r})),he(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),he(["h","hh"],(function(e,t,n){t[Ye]=_e(e),m(n).bigHour=!0})),he("hmm",(function(e,t,n){var r=e.length-2;t[Ye]=_e(e.substr(0,r)),t[ve]=_e(e.substr(r)),m(n).bigHour=!0})),he("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[Ye]=_e(e.substr(0,r)),t[ve]=_e(e.substr(r,2)),t[be]=_e(e.substr(a)),m(n).bigHour=!0})),he("Hmm",(function(e,t,n){var r=e.length-2;t[Ye]=_e(e.substr(0,r)),t[ve]=_e(e.substr(r))})),he("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[Ye]=_e(e.substr(0,r)),t[ve]=_e(e.substr(r,2)),t[be]=_e(e.substr(a))}));var ot=Ae("Hours",!0);var ut,dt={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Oe,monthsShort:Pe,week:{dow:0,doy:6},weekdays:Ze,weekdaysMin:Xe,weekdaysShort:Ke,meridiemParse:/[ap]\.?m?\.?/i},lt={},ct={};function _t(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function ft(e){return e?e.toLowerCase().replace("_","-"):e}function ht(t){var r=null;if(void 0===lt[t]&&e&&e.exports&&function(e){return!(!e||!e.match("^[^/\\\\]*$"))}(t))try{r=ut._abbr,n(5358)("./"+t),mt(r)}catch(e){lt[t]=null}return lt[t]}function mt(e,t){var n;return e&&((n=d(t)?pt(e):yt(e,t))?ut=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),ut._abbr}function yt(e,t){if(null!==t){var n,r=dt;if(t.abbr=e,null!=lt[e])T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=lt[e]._config;else if(null!=t.parentLocale)if(null!=lt[t.parentLocale])r=lt[t.parentLocale]._config;else{if(null==(n=ht(t.parentLocale)))return ct[t.parentLocale]||(ct[t.parentLocale]=[]),ct[t.parentLocale].push({name:e,config:t}),null;r=n._config}return lt[e]=new A(S(r,t)),ct[e]&&ct[e].forEach((function(e){yt(e.name,e.config)})),mt(e),lt[e]}return delete lt[e],null}function pt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return ut;if(!i(e)){if(t=ht(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=ft(e[i]).split("-")).length,n=(n=ft(e[i+1]))?n.split("-"):null;t>0;){if(r=ht(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&_t(a,n)>=t-1)break;t--}i++}return ut}(e)}function Mt(e){var t,n=e._a;return n&&-2===m(e).overflow&&(t=n[ge]<0||n[ge]>11?ge:n[Le]<1||n[Le]>Fe(n[Me],n[ge])?Le:n[Ye]<0||n[Ye]>24||24===n[Ye]&&(0!==n[ve]||0!==n[be]||0!==n[we])?Ye:n[ve]<0||n[ve]>59?ve:n[be]<0||n[be]>59?be:n[we]<0||n[we]>999?we:-1,m(e)._overflowDayOfYear&&(t<Me||t>Le)&&(t=Le),m(e)._overflowWeeks&&-1===t&&(t=ke),m(e)._overflowWeekday&&-1===t&&(t=De),m(e).overflow=t),e}var gt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Lt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Yt=/Z|[+-]\d\d(?::?\d\d)?/,vt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],bt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],wt=/^\/?Date\((-?\d+)/i,kt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,Dt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Tt(e){var t,n,r,a,i,s,o=e._i,u=gt.exec(o)||Lt.exec(o),d=vt.length,l=bt.length;if(u){for(m(e).iso=!0,t=0,n=d;t<n;t++)if(vt[t][1].exec(u[1])){a=vt[t][0],r=!1!==vt[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=l;t<n;t++)if(bt[t][1].exec(u[3])){i=(u[2]||" ")+bt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(u[4]){if(!Yt.exec(u[4]))return void(e._isValid=!1);s="Z"}e._f=a+(i||"")+(s||""),jt(e)}else e._isValid=!1}function xt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function St(e){var t,n,r,a,i,s,o,u,d=kt.exec(e._i.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(d){if(n=d[4],r=d[3],a=d[2],i=d[5],s=d[6],o=d[7],u=[xt(n),Pe.indexOf(r),parseInt(a,10),parseInt(i,10),parseInt(s,10)],o&&u.push(parseInt(o,10)),t=u,!function(e,t,n){return!e||Ke.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(m(n).weekdayMismatch=!0,n._isValid=!1,!1)}(d[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return Dt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(d[8],d[9],d[10]),e._d=Ue.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),m(e).rfc2822=!0}else e._isValid=!1}function At(e,t,n){return null!=e?e:null!=t?t:n}function Ht(e){var t,n,r,i,s,o=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[Le]&&null==e._a[ge]&&function(e){var t,n,r,a,i,s,o,u,d;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,s=4,n=At(t.GG,e._a[Me],Be(Pt(),1,4).year),r=At(t.W,1),((a=At(t.E,1))<1||a>7)&&(u=!0)):(i=e._locale._week.dow,s=e._locale._week.doy,d=Be(Pt(),i,s),n=At(t.gg,e._a[Me],d.year),r=At(t.w,d.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(u=!0)):a=i),r<1||r>Ge(n,i,s)?m(e)._overflowWeeks=!0:null!=u?m(e)._overflowWeekday=!0:(o=qe(n,r,a,i,s),e._a[Me]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=At(e._a[Me],r[Me]),(e._dayOfYear>Te(s)||0===e._dayOfYear)&&(m(e)._overflowDayOfYear=!0),n=Ue(s,0,e._dayOfYear),e._a[ge]=n.getUTCMonth(),e._a[Le]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=r[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Ye]&&0===e._a[ve]&&0===e._a[be]&&0===e._a[we]&&(e._nextDay=!0,e._a[Ye]=0),e._d=(e._useUTC?Ue:Ie).apply(null,o),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Ye]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(m(e).weekdayMismatch=!0)}}function jt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],m(e).empty=!0;var t,n,r,i,s,o,u,d=""+e._i,l=d.length,c=0;for(u=(r=J(e._f,e._locale).match(j)||[]).length,t=0;t<u;t++)i=r[t],(n=(d.match(de(i,e))||[])[0])&&((s=d.substr(0,d.indexOf(n))).length>0&&m(e).unusedInput.push(s),d=d.slice(d.indexOf(n)+n.length),c+=n.length),P[i]?(n?m(e).empty=!1:m(e).unusedTokens.push(i),ye(i,n,e)):e._strict&&!n&&m(e).unusedTokens.push(i);m(e).charsLeftOver=l-c,d.length>0&&m(e).unusedInput.push(d),e._a[Ye]<=12&&!0===m(e).bigHour&&e._a[Ye]>0&&(m(e).bigHour=void 0),m(e).parsedDateParts=e._a.slice(0),m(e).meridiem=e._meridiem,e._a[Ye]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[Ye],e._meridiem),null!==(o=m(e).era)&&(e._a[Me]=e._locale.erasConvertYear(o,e._a[Me])),Ht(e),Mt(e)}else St(e);else Tt(e)}function Ft(e){var t=e._i,n=e._f;return e._locale=e._locale||pt(e._l),null===t||void 0===n&&""===t?p({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),v(t)?new Y(Mt(t)):(c(t)?e._d=t:i(n)?function(e){var t,n,r,a,i,s,o=!1,u=e._f.length;if(0===u)return m(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<u;a++)i=0,s=!1,t=L({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],jt(t),y(t)&&(s=!0),i+=m(t).charsLeftOver,i+=10*m(t).unusedTokens.length,m(t).score=i,o?i<r&&(r=i,n=t):(null==r||i<r||s)&&(r=i,n=t,s&&(o=!0));f(e,n||t)}(e):n?jt(e):function(e){var t=e._i;d(t)?e._d=new Date(a.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=wt.exec(e._i);null===t?(Tt(e),!1===e._isValid&&(delete e._isValid,St(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=_(t.slice(0),(function(e){return parseInt(e,10)})),Ht(e)):s(t)?function(e){if(!e._d){var t=C(e._i),n=void 0===t.day?t.date:t.day;e._a=_([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),Ht(e)}}(e):l(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),y(e)||(e._d=null),e))}function Ot(e,t,n,r,a){var o,d={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(s(e)&&u(e)||i(e)&&0===e.length)&&(e=void 0),d._isAMomentObject=!0,d._useUTC=d._isUTC=a,d._l=n,d._i=e,d._f=t,d._strict=r,(o=new Y(Mt(Ft(d))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function Pt(e,t,n,r){return Ot(e,t,n,r,!1)}a.createFromInputFallback=w("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Et=w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Pt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()})),Nt=w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Pt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:p()}));function Jt(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Pt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Wt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function zt(e){var t=C(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,s=t.day||0,u=t.hour||0,d=t.minute||0,l=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,r=!1,a=Wt.length;for(t in e)if(o(e,t)&&(-1===xe.call(Wt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<a;++n)if(e[Wt[n]]){if(r)return!1;parseFloat(e[Wt[n]])!==_e(e[Wt[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*l+6e4*d+1e3*u*60*60,this._days=+s+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=pt(),this._bubble()}function Ct(e){return e instanceof zt}function Rt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function It(e,t){E(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+H(~~(e/60),2)+t+H(~~e%60,2)}))}It("Z",":"),It("ZZ",""),ue("Z",ae),ue("ZZ",ae),he(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=$t(ae,e)}));var Ut=/([\+\-]|\d\d)/gi;function $t(e,t){var n,r,a=(t||"").match(e);return null===a?null:0===(r=60*(n=((a[a.length-1]||[])+"").match(Ut)||["-",0,0])[1]+_e(n[2]))?0:"+"===n[0]?r:-r}function qt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(v(e)||c(e)?e.valueOf():Pt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Pt(e).local()}function Bt(e){return-Math.round(e._d.getTimezoneOffset())}function Gt(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Vt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Zt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Kt(e,t){var n,r,a,i,s,u,d=e,c=null;return Ct(e)?d={ms:e._milliseconds,d:e._days,M:e._months}:l(e)||!isNaN(+e)?(d={},t?d[t]=+e:d.milliseconds=+e):(c=Vt.exec(e))?(n="-"===c[1]?-1:1,d={y:0,d:_e(c[Le])*n,h:_e(c[Ye])*n,m:_e(c[ve])*n,s:_e(c[be])*n,ms:_e(Rt(1e3*c[we]))*n}):(c=Zt.exec(e))?(n="-"===c[1]?-1:1,d={y:Xt(c[2],n),M:Xt(c[3],n),w:Xt(c[4],n),d:Xt(c[5],n),h:Xt(c[6],n),m:Xt(c[7],n),s:Xt(c[8],n)}):null==d?d={}:"object"==typeof d&&("from"in d||"to"in d)&&(i=Pt(d.from),s=Pt(d.to),a=i.isValid()&&s.isValid()?(s=qt(s,i),i.isBefore(s)?u=Qt(i,s):((u=Qt(s,i)).milliseconds=-u.milliseconds,u.months=-u.months),u):{milliseconds:0,months:0},(d={}).ms=a.milliseconds,d.M=a.months),r=new zt(d),Ct(e)&&o(e,"_locale")&&(r._locale=e._locale),Ct(e)&&o(e,"_isValid")&&(r._isValid=e._isValid),r}function Xt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Qt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function en(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(T(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),tn(this,Kt(n,r),e),this}}function tn(e,t,n,r){var i=t._milliseconds,s=Rt(t._days),o=Rt(t._months);e.isValid()&&(r=null==r||r,o&&ze(e,He(e,"Month")+o*n),s&&je(e,"Date",He(e,"Date")+s*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,s||o))}Kt.fn=zt.prototype,Kt.invalid=function(){return Kt(NaN)};var nn=en(1,"add"),rn=en(-1,"subtract");function an(e){return"string"==typeof e||e instanceof String}function sn(e){return v(e)||c(e)||an(e)||l(e)||function(e){var t=i(e),n=!1;return t&&(n=0===e.filter((function(t){return!l(t)&&an(e)})).length),t&&n}(e)||function(e){var t,n,r=s(e)&&!u(e),a=!1,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],d=i.length;for(t=0;t<d;t+=1)n=i[t],a=a||o(e,n);return r&&a}(e)||null==e}function on(e,t){if(e.date()<t.date())return-on(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function un(e){var t;return void 0===e?this._locale._abbr:(null!=(t=pt(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var dn=w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function ln(){return this._locale}var cn=1e3,_n=6e4,fn=36e5,hn=126227808e5;function mn(e,t){return(e%t+t)%t}function yn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-hn:new Date(e,t,n).valueOf()}function pn(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-hn:Date.UTC(e,t,n)}function Mn(e,t){return t.erasAbbrRegex(e)}function gn(){var e,t,n,r,a,i=[],s=[],o=[],u=[],d=this.eras();for(e=0,t=d.length;e<t;++e)n=le(d[e].name),r=le(d[e].abbr),a=le(d[e].narrow),s.push(n),i.push(r),o.push(a),u.push(n),u.push(r),u.push(a);this._erasRegex=new RegExp("^("+u.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+s.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+o.join("|")+")","i")}function Ln(e,t){E(0,[e,e.length],0,t)}function Yn(e,t,n,r,a){var i;return null==e?Be(this,r,a).year:(t>(i=Ge(e,r,a))&&(t=i),vn.call(this,e,t,n,r,a))}function vn(e,t,n,r,a){var i=qe(e,t,n,r,a),s=Ue(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}E("N",0,0,"eraAbbr"),E("NN",0,0,"eraAbbr"),E("NNN",0,0,"eraAbbr"),E("NNNN",0,0,"eraName"),E("NNNNN",0,0,"eraNarrow"),E("y",["y",1],"yo","eraYear"),E("y",["yy",2],0,"eraYear"),E("y",["yyy",3],0,"eraYear"),E("y",["yyyy",4],0,"eraYear"),ue("N",Mn),ue("NN",Mn),ue("NNN",Mn),ue("NNNN",(function(e,t){return t.erasNameRegex(e)})),ue("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),he(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var a=n._locale.erasParse(e,r,n._strict);a?m(n).era=a:m(n).invalidEra=e})),ue("y",te),ue("yy",te),ue("yyy",te),ue("yyyy",te),ue("yo",(function(e,t){return t._eraYearOrdinalRegex||te})),he(["y","yy","yyy","yyyy"],Me),he(["yo"],(function(e,t,n,r){var a;n._locale._eraYearOrdinalRegex&&(a=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[Me]=n._locale.eraYearOrdinalParse(e,a):t[Me]=parseInt(e,10)})),E(0,["gg",2],0,(function(){return this.weekYear()%100})),E(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),Ln("gggg","weekYear"),Ln("ggggg","weekYear"),Ln("GGGG","isoWeekYear"),Ln("GGGGG","isoWeekYear"),ue("G",ne),ue("g",ne),ue("GG",V,$),ue("gg",V,$),ue("GGGG",Q,B),ue("gggg",Q,B),ue("GGGGG",ee,G),ue("ggggg",ee,G),me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=_e(e)})),me(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),E("Q",0,"Qo","quarter"),ue("Q",U),he("Q",(function(e,t){t[ge]=3*(_e(e)-1)})),E("D",["DD",2],"Do","date"),ue("D",V,se),ue("DD",V,$),ue("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),he(["D","DD"],Le),he("Do",(function(e,t){t[Le]=_e(e.match(V)[0])}));var bn=Ae("Date",!0);E("DDD",["DDDD",3],"DDDo","dayOfYear"),ue("DDD",X),ue("DDDD",q),he(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=_e(e)})),E("m",["mm",2],0,"minute"),ue("m",V,oe),ue("mm",V,$),he(["m","mm"],ve);var wn=Ae("Minutes",!1);E("s",["ss",2],0,"second"),ue("s",V,oe),ue("ss",V,$),he(["s","ss"],be);var kn,Dn,Tn=Ae("Seconds",!1);for(E("S",0,0,(function(){return~~(this.millisecond()/100)})),E(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),E(0,["SSS",3],0,"millisecond"),E(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),E(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),E(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),E(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),E(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),E(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),ue("S",X,U),ue("SS",X,$),ue("SSS",X,q),kn="SSSS";kn.length<=9;kn+="S")ue(kn,te);function xn(e,t){t[we]=_e(1e3*("0."+e))}for(kn="S";kn.length<=9;kn+="S")he(kn,xn);Dn=Ae("Milliseconds",!1),E("z",0,0,"zoneAbbr"),E("zz",0,0,"zoneName");var Sn=Y.prototype;function An(e){return e}Sn.add=nn,Sn.calendar=function(e,t){1===arguments.length&&(arguments[0]?sn(arguments[0])?(e=arguments[0],t=void 0):function(e){var t,n=s(e)&&!u(e),r=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<a.length;t+=1)r=r||o(e,a[t]);return n&&r}(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Pt(),r=qt(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",d=t&&(x(t[i])?t[i].call(this,n):t[i]);return this.format(d||this.localeData().calendar(i,this,Pt(n)))},Sn.clone=function(){return new Y(this)},Sn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=qt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=z(t)){case"year":i=on(this,r)/12;break;case"month":i=on(this,r);break;case"quarter":i=on(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:ce(i)},Sn.endOf=function(e){var t,n;if(void 0===(e=z(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?pn:yn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=fn-mn(t+(this._isUTC?0:this.utcOffset()*_n),fn)-1;break;case"minute":t=this._d.valueOf(),t+=_n-mn(t,_n)-1;break;case"second":t=this._d.valueOf(),t+=cn-mn(t,cn)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},Sn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=N(this,e);return this.localeData().postformat(t)},Sn.from=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||Pt(e).isValid())?Kt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Sn.fromNow=function(e){return this.from(Pt(),e)},Sn.to=function(e,t){return this.isValid()&&(v(e)&&e.isValid()||Pt(e).isValid())?Kt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Sn.toNow=function(e){return this.to(Pt(),e)},Sn.get=function(e){return x(this[e=z(e)])?this[e]():this},Sn.invalidAt=function(){return m(this).overflow},Sn.isAfter=function(e,t){var n=v(e)?e:Pt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=z(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Sn.isBefore=function(e,t){var n=v(e)?e:Pt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=z(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Sn.isBetween=function(e,t,n,r){var a=v(e)?e:Pt(e),i=v(t)?t:Pt(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},Sn.isSame=function(e,t){var n,r=v(e)?e:Pt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=z(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Sn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Sn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Sn.isValid=function(){return y(this)},Sn.lang=dn,Sn.locale=un,Sn.localeData=ln,Sn.max=Nt,Sn.min=Et,Sn.parsingFlags=function(){return f({},m(this))},Sn.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)o(e,t)&&n.push({unit:t,priority:R[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=C(e)),a=r.length;for(n=0;n<a;n++)this[r[n].unit](e[r[n].unit])}else if(x(this[e=z(e)]))return this[e](t);return this},Sn.startOf=function(e){var t,n;if(void 0===(e=z(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?pn:yn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=mn(t+(this._isUTC?0:this.utcOffset()*_n),fn);break;case"minute":t=this._d.valueOf(),t-=mn(t,_n);break;case"second":t=this._d.valueOf(),t-=mn(t,cn)}return this._d.setTime(t),a.updateOffset(this,!0),this},Sn.subtract=rn,Sn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},Sn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},Sn.toDate=function(){return new Date(this.valueOf())},Sn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?N(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):x(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",N(n,"Z")):N(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Sn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",a="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=a+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(Sn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),Sn.toJSON=function(){return this.isValid()?this.toISOString():null},Sn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Sn.unix=function(){return Math.floor(this.valueOf()/1e3)},Sn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Sn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Sn.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},Sn.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},Sn.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},Sn.eraYear=function(){var e,t,n,r,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,r=this.clone().startOf("day").valueOf(),i[e].since<=r&&r<=i[e].until||i[e].until<=r&&r<=i[e].since)return(this.year()-a(i[e].since).year())*n+i[e].offset;return this.year()},Sn.year=Se,Sn.isLeapYear=function(){return pe(this.year())},Sn.weekYear=function(e){return Yn.call(this,e,this.week(),this.weekday()+this.localeData()._week.dow,this.localeData()._week.dow,this.localeData()._week.doy)},Sn.isoWeekYear=function(e){return Yn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Sn.quarter=Sn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Sn.month=Ce,Sn.daysInMonth=function(){return Fe(this.year(),this.month())},Sn.week=Sn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Sn.isoWeek=Sn.isoWeeks=function(e){var t=Be(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Sn.weeksInYear=function(){var e=this.localeData()._week;return Ge(this.year(),e.dow,e.doy)},Sn.weeksInWeekYear=function(){var e=this.localeData()._week;return Ge(this.weekYear(),e.dow,e.doy)},Sn.isoWeeksInYear=function(){return Ge(this.year(),1,4)},Sn.isoWeeksInISOWeekYear=function(){return Ge(this.isoWeekYear(),1,4)},Sn.date=bn,Sn.day=Sn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=He(this,"Day");return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Sn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Sn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Sn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Sn.hour=Sn.hours=ot,Sn.minute=Sn.minutes=wn,Sn.second=Sn.seconds=Tn,Sn.millisecond=Sn.milliseconds=Dn,Sn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=$t(ae,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Bt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?tn(this,Kt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Bt(this)},Sn.utc=function(e){return this.utcOffset(0,e)},Sn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Bt(this),"m")),this},Sn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=$t(re,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Sn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Pt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Sn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Sn.isLocal=function(){return!!this.isValid()&&!this._isUTC},Sn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Sn.isUtc=Gt,Sn.isUTC=Gt,Sn.zoneAbbr=function(){return this._isUTC?"UTC":""},Sn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Sn.dates=w("dates accessor is deprecated. Use date instead.",bn),Sn.months=w("months accessor is deprecated. Use month instead",Ce),Sn.years=w("years accessor is deprecated. Use year instead",Se),Sn.zone=w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),Sn.isDSTShifted=w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!d(this._isDSTShifted))return this._isDSTShifted;var e,t={};return L(t,this),(t=Ft(t))._a?(e=t._isUTC?h(t._a):Pt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),s=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&_e(e[r])!==_e(t[r]))&&s++;return s+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var Hn=A.prototype;function jn(e,t,n,r){var a=pt(),i=h().set(r,t);return a[n](i,e)}function Fn(e,t,n){if(l(e)&&(t=e,e=void 0),e=e||"",null!=t)return jn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=jn(e,r,n,"month");return a}function On(e,t,n,r){"boolean"==typeof e?(l(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,l(t)&&(n=t,t=void 0),t=t||"");var a,i=pt(),s=e?i._week.dow:0,o=[];if(null!=n)return jn(t,(n+s)%7,r,"day");for(a=0;a<7;a++)o[a]=jn(t,(a+s)%7,r,"day");return o}Hn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return x(r)?r.call(t,n):r},Hn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(j).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},Hn.invalidDate=function(){return this._invalidDate},Hn.ordinal=function(e){return this._ordinal.replace("%d",e)},Hn.preparse=An,Hn.postformat=An,Hn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return x(a)?a(e,t,n,r):a.replace(/%d/i,e)},Hn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return x(n)?n(t):n.replace(/%s/i,t)},Hn.set=function(e){var t,n;for(n in e)o(e,n)&&(x(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Hn.eras=function(e,t){var n,r,i,s=this._eras||pt("en")._eras;for(n=0,r=s.length;n<r;++n)switch("string"==typeof s[n].since&&(i=a(s[n].since).startOf("day"),s[n].since=i.valueOf()),typeof s[n].until){case"undefined":s[n].until=1/0;break;case"string":i=a(s[n].until).startOf("day").valueOf(),s[n].until=i.valueOf()}return s},Hn.erasParse=function(e,t,n){var r,a,i,s,o,u=this.eras();for(e=e.toUpperCase(),r=0,a=u.length;r<a;++r)if(i=u[r].name.toUpperCase(),s=u[r].abbr.toUpperCase(),o=u[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(s===e)return u[r];break;case"NNNN":if(i===e)return u[r];break;case"NNNNN":if(o===e)return u[r]}else if([i,s,o].indexOf(e)>=0)return u[r]},Hn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?a(e.since).year():a(e.since).year()+(t-e.offset)*n},Hn.erasAbbrRegex=function(e){return o(this,"_erasAbbrRegex")||gn.call(this),e?this._erasAbbrRegex:this._erasRegex},Hn.erasNameRegex=function(e){return o(this,"_erasNameRegex")||gn.call(this),e?this._erasNameRegex:this._erasRegex},Hn.erasNarrowRegex=function(e){return o(this,"_erasNarrowRegex")||gn.call(this),e?this._erasNarrowRegex:this._erasRegex},Hn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ee).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},Hn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ee.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Hn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return We.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},Hn.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||Re.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=Je),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Hn.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||Re.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=Ne),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Hn.week=function(e){return Be(e,this._week.dow,this._week.doy).week},Hn.firstDayOfYear=function(){return this._week.doy},Hn.firstDayOfWeek=function(){return this._week.dow},Hn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ve(n,this._week.dow):e?n[e.day()]:n},Hn.weekdaysMin=function(e){return!0===e?Ve(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Hn.weekdaysShort=function(e){return!0===e?Ve(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Hn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return nt.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},Hn.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=Qe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Hn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=et),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Hn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=tt),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Hn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Hn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},mt("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===_e(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=w("moment.lang is deprecated. Use moment.locale instead.",mt),a.langData=w("moment.langData is deprecated. Use moment.localeData instead.",pt);var Pn=Math.abs;function En(e,t,n,r){var a=Kt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Nn(e){return e<0?Math.floor(e):Math.ceil(e)}function Jn(e){return 4800*e/146097}function Wn(e){return 146097*e/4800}function zn(e){return function(){return this.as(e)}}var Cn=zn("ms"),Rn=zn("s"),In=zn("m"),Un=zn("h"),$n=zn("d"),qn=zn("w"),Bn=zn("M"),Gn=zn("Q"),Vn=zn("y"),Zn=Cn;function Kn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Xn=Kn("milliseconds"),Qn=Kn("seconds"),er=Kn("minutes"),tr=Kn("hours"),nr=Kn("days"),rr=Kn("months"),ar=Kn("years");var ir=Math.round,sr={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function or(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var ur=Math.abs;function dr(e){return(e>0)-(e<0)||+e}function lr(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,a,i,s,o,u=ur(this._milliseconds)/1e3,d=ur(this._days),l=ur(this._months),c=this.asSeconds();return c?(e=ce(u/60),t=ce(e/60),u%=60,e%=60,n=ce(l/12),l%=12,r=u?u.toFixed(3).replace(/\.?0+$/,""):"",a=c<0?"-":"",i=dr(this._months)!==dr(c)?"-":"",s=dr(this._days)!==dr(c)?"-":"",o=dr(this._milliseconds)!==dr(c)?"-":"",a+"P"+(n?i+n+"Y":"")+(l?i+l+"M":"")+(d?s+d+"D":"")+(t||e||u?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(u?o+r+"S":"")):"P0D"}var cr=zt.prototype;return cr.isValid=function(){return this._isValid},cr.abs=function(){var e=this._data;return this._milliseconds=Pn(this._milliseconds),this._days=Pn(this._days),this._months=Pn(this._months),e.milliseconds=Pn(e.milliseconds),e.seconds=Pn(e.seconds),e.minutes=Pn(e.minutes),e.hours=Pn(e.hours),e.months=Pn(e.months),e.years=Pn(e.years),this},cr.add=function(e,t){return En(this,e,t,1)},cr.subtract=function(e,t){return En(this,e,t,-1)},cr.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=z(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Jn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Wn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},cr.asMilliseconds=Cn,cr.asSeconds=Rn,cr.asMinutes=In,cr.asHours=Un,cr.asDays=$n,cr.asWeeks=qn,cr.asMonths=Bn,cr.asQuarters=Gn,cr.asYears=Vn,cr.valueOf=Zn,cr._bubble=function(){var e,t,n,r,a,i=this._milliseconds,s=this._days,o=this._months,u=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*Nn(Wn(o)+s),s=0,o=0),u.milliseconds=i%1e3,e=ce(i/1e3),u.seconds=e%60,t=ce(e/60),u.minutes=t%60,n=ce(t/60),u.hours=n%24,s+=ce(n/24),o+=a=ce(Jn(s)),s-=Nn(Wn(a)),r=ce(o/12),o%=12,u.days=s,u.months=o,u.years=r,this},cr.clone=function(){return Kt(this)},cr.get=function(e){return e=z(e),this.isValid()?this[e+"s"]():NaN},cr.milliseconds=Xn,cr.seconds=Qn,cr.minutes=er,cr.hours=tr,cr.days=nr,cr.weeks=function(){return ce(this.days()/7)},cr.months=rr,cr.years=ar,cr.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,a=!1,i=sr;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(a=e),"object"==typeof t&&(i=Object.assign({},sr,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),r=function(e,t,n,r){var a=Kt(e).abs(),i=ir(a.as("s")),s=ir(a.as("m")),o=ir(a.as("h")),u=ir(a.as("d")),d=ir(a.as("M")),l=ir(a.as("w")),c=ir(a.as("y")),_=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||s<=1&&["m"]||s<n.m&&["mm",s]||o<=1&&["h"]||o<n.h&&["hh",o]||u<=1&&["d"]||u<n.d&&["dd",u];return null!=n.w&&(_=_||l<=1&&["w"]||l<n.w&&["ww",l]),(_=_||d<=1&&["M"]||d<n.M&&["MM",d]||c<=1&&["y"]||["yy",c])[2]=t,_[3]=+e>0,_[4]=r,or.apply(null,_)}(this,!a,i,n=this.localeData()),a&&(r=n.pastFuture(+this,r)),n.postformat(r)},cr.toISOString=lr,cr.toString=lr,cr.toJSON=lr,cr.locale=un,cr.localeData=ln,cr.toIsoString=w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",lr),cr.lang=dn,E("X",0,0,"unix"),E("x",0,0,"valueOf"),ue("x",ne),ue("X",/[+-]?\d+(\.\d{1,3})?/),he("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),he("x",(function(e,t,n){n._d=new Date(_e(e))})),a.version="2.30.1",t=Pt,a.fn=Sn,a.min=function(){return Jt("isBefore",[].slice.call(arguments,0))},a.max=function(){return Jt("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=h,a.unix=function(e){return Pt(1e3*e)},a.months=function(e,t){return Fn(e,t,"months")},a.isDate=c,a.locale=mt,a.invalid=p,a.duration=Kt,a.isMoment=v,a.weekdays=function(e,t,n){return On(e,t,n,"weekdays")},a.parseZone=function(){return Pt.apply(null,arguments).parseZone()},a.localeData=pt,a.isDuration=Ct,a.monthsShort=function(e,t){return Fn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return On(e,t,n,"weekdaysMin")},a.defineLocale=yt,a.updateLocale=function(e,t){if(null!=t){var n,r,a=dt;null!=lt[e]&&null!=lt[e].parentLocale?lt[e].set(S(lt[e]._config,t)):(null!=(r=ht(e))&&(a=r._config),t=S(a,t),null==r&&(t.abbr=e),(n=new A(t)).parentLocale=lt[e],lt[e]=n),mt(e)}else null!=lt[e]&&(null!=lt[e].parentLocale?(lt[e]=lt[e].parentLocale,e===mt()&&mt(e)):null!=lt[e]&&delete lt[e]);return lt[e]},a.locales=function(){return k(lt)},a.weekdaysShort=function(e,t,n){return On(e,t,n,"weekdaysShort")},a.normalizeUnits=z,a.relativeTimeRounding=function(e){return void 0===e?ir:"function"==typeof e&&(ir=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==sr[e]&&(void 0===t?sr[e]:(sr[e]=t,"s"===e&&(sr.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=Sn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()},5096:function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pzt_Sal_Çar_Per_Cum_Cmt".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(5093))},5177:function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(5093))},5358:(e,t,n)=>{var r={"./af":5177,"./af.js":5177,"./ar":1509,"./ar-dz":1488,"./ar-dz.js":1488,"./ar-kw":8676,"./ar-kw.js":8676,"./ar-ly":2353,"./ar-ly.js":2353,"./ar-ma":4496,"./ar-ma.js":4496,"./ar-ps":6947,"./ar-ps.js":6947,"./ar-sa":2682,"./ar-sa.js":2682,"./ar-tn":9756,"./ar-tn.js":9756,"./ar.js":1509,"./az":5533,"./az.js":5533,"./be":8959,"./be.js":8959,"./bg":7777,"./bg.js":7777,"./bm":4903,"./bm.js":4903,"./bn":1290,"./bn-bd":7357,"./bn-bd.js":7357,"./bn.js":1290,"./bo":1545,"./bo.js":1545,"./br":1470,"./br.js":1470,"./bs":4429,"./bs.js":4429,"./ca":7306,"./ca.js":7306,"./cs":6464,"./cs.js":6464,"./cv":3635,"./cv.js":3635,"./cy":4226,"./cy.js":4226,"./da":3601,"./da.js":3601,"./de":7853,"./de-at":6111,"./de-at.js":6111,"./de-ch":4697,"./de-ch.js":4697,"./de.js":7853,"./dv":708,"./dv.js":708,"./el":4691,"./el.js":4691,"./en-au":3872,"./en-au.js":3872,"./en-ca":8298,"./en-ca.js":8298,"./en-gb":6195,"./en-gb.js":6195,"./en-ie":6584,"./en-ie.js":6584,"./en-il":5543,"./en-il.js":5543,"./en-in":9033,"./en-in.js":9033,"./en-nz":9402,"./en-nz.js":9402,"./en-sg":3004,"./en-sg.js":3004,"./eo":2934,"./eo.js":2934,"./es":7650,"./es-do":838,"./es-do.js":838,"./es-mx":7730,"./es-mx.js":7730,"./es-us":6575,"./es-us.js":6575,"./es.js":7650,"./et":3035,"./et.js":3035,"./eu":3508,"./eu.js":3508,"./fa":119,"./fa.js":119,"./fi":527,"./fi.js":527,"./fil":5995,"./fil.js":5995,"./fo":2477,"./fo.js":2477,"./fr":5498,"./fr-ca":6435,"./fr-ca.js":6435,"./fr-ch":7892,"./fr-ch.js":7892,"./fr.js":5498,"./fy":7071,"./fy.js":7071,"./ga":1734,"./ga.js":1734,"./gd":217,"./gd.js":217,"./gl":7329,"./gl.js":7329,"./gom-deva":2124,"./gom-deva.js":2124,"./gom-latn":3383,"./gom-latn.js":3383,"./gu":5050,"./gu.js":5050,"./he":1713,"./he.js":1713,"./hi":3861,"./hi.js":3861,"./hr":6308,"./hr.js":6308,"./hu":609,"./hu.js":609,"./hy-am":7160,"./hy-am.js":7160,"./id":4063,"./id.js":4063,"./is":9374,"./is.js":9374,"./it":8383,"./it-ch":1827,"./it-ch.js":1827,"./it.js":8383,"./ja":3827,"./ja.js":3827,"./jv":9722,"./jv.js":9722,"./ka":1794,"./ka.js":1794,"./kk":7088,"./kk.js":7088,"./km":6870,"./km.js":6870,"./kn":4451,"./kn.js":4451,"./ko":3164,"./ko.js":3164,"./ku":8174,"./ku-kmr":6181,"./ku-kmr.js":6181,"./ku.js":8174,"./ky":8474,"./ky.js":8474,"./lb":9680,"./lb.js":9680,"./lo":5867,"./lo.js":5867,"./lt":5766,"./lt.js":5766,"./lv":9532,"./lv.js":9532,"./me":8076,"./me.js":8076,"./mi":1848,"./mi.js":1848,"./mk":306,"./mk.js":306,"./ml":3739,"./ml.js":3739,"./mn":9053,"./mn.js":9053,"./mr":6169,"./mr.js":6169,"./ms":3386,"./ms-my":2297,"./ms-my.js":2297,"./ms.js":3386,"./mt":7075,"./mt.js":7075,"./my":2264,"./my.js":2264,"./nb":2274,"./nb.js":2274,"./ne":8235,"./ne.js":8235,"./nl":2572,"./nl-be":3784,"./nl-be.js":3784,"./nl.js":2572,"./nn":4566,"./nn.js":4566,"./oc-lnc":9330,"./oc-lnc.js":9330,"./pa-in":9849,"./pa-in.js":9849,"./pl":4418,"./pl.js":4418,"./pt":9834,"./pt-br":8303,"./pt-br.js":8303,"./pt.js":9834,"./ro":4457,"./ro.js":4457,"./ru":2271,"./ru.js":2271,"./sd":1221,"./sd.js":1221,"./se":3478,"./se.js":3478,"./si":7538,"./si.js":7538,"./sk":5784,"./sk.js":5784,"./sl":6637,"./sl.js":6637,"./sq":6794,"./sq.js":6794,"./sr":5719,"./sr-cyrl":3322,"./sr-cyrl.js":3322,"./sr.js":5719,"./ss":6e3,"./ss.js":6e3,"./sv":1011,"./sv.js":1011,"./sw":748,"./sw.js":748,"./ta":1025,"./ta.js":1025,"./te":1885,"./te.js":1885,"./tet":8861,"./tet.js":8861,"./tg":6571,"./tg.js":6571,"./th":5802,"./th.js":5802,"./tk":9527,"./tk.js":9527,"./tl-ph":9231,"./tl-ph.js":9231,"./tlh":1052,"./tlh.js":1052,"./tr":5096,"./tr.js":5096,"./tzl":9846,"./tzl.js":9846,"./tzm":1765,"./tzm-latn":7711,"./tzm-latn.js":7711,"./tzm.js":1765,"./ug-cn":8414,"./ug-cn.js":8414,"./uk":6618,"./uk.js":6618,"./ur":158,"./ur.js":158,"./uz":7609,"./uz-latn":2475,"./uz-latn.js":2475,"./uz.js":7609,"./vi":1135,"./vi.js":1135,"./x-pseudo":4051,"./x-pseudo.js":4051,"./yo":2218,"./yo.js":2218,"./zh-cn":2648,"./zh-cn.js":2648,"./zh-hk":1632,"./zh-hk.js":1632,"./zh-mo":1541,"./zh-mo.js":1541,"./zh-tw":304,"./zh-tw.js":304};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=5358},5414:e=>{"use strict";e.exports=JSON.parse('{"sales":[{"title":"Action Comics","issue":"1","grade":"8.5","buyer":"","note":"Kansas City","date":"2024-04-07","seller":"Heritage","price":6000000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Superman","issue":"1","grade":"8.0","date":"2022-04-13","price":5300000,"seller":"Tony Arnold/Roy Delic","buyer":"","note":"Edgar Church","goodDate":true,"inflationAdjustedPrice":""},{"title":"Amazing Fantasy","issue":"15","grade":"9.6","date":"2021-09-09","price":3600000,"seller":"Heritage","buyer":"","note":"","goodDate":true,"inflationAdjustedPrice":""},{"title":"Action Comics","issue":"1","grade":"8.5","buyer":"","note":"","date":"2021-04-26","seller":"ComicConnect","price":3250000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Action Comics","issue":"1","grade":"9.0","buyer":"Metropolis (for Ayman Hariri)","note":"","date":"2014-08-24","seller":"Pristine Comics on eBay","price":3207852,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Action Comics","issue":"1","grade":"9.0","buyer":"Ayman Hariri","note":"Cage Copy","date":"2011-11-30","seller":"ComicConnect","price":2161000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Action Comics","issue":"1","grade":"8.5","buyer":"","note":"","date":"2010-03-29","seller":"ComicConnect","price":1500000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Detective Comics","issue":"27","grade":"8.0","buyer":"","note":"","date":"2010-02-25","seller":"Heritage","price":1075000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Action Comics","issue":"1","grade":"8.0","buyer":"","note":"Kansas City","date":"2010-02-22","seller":"ComicConnect","price":1000000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Flash Comics","issue":"1","grade":"9.6","note":"Edgar Church","buyer":"JP the Mint","date":"2004-01-01","seller":"unknown","price":350000,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Marvel Comics","issue":"1","grade":"9.0","note":"Pay Copy","buyer":"JP the Mint","date":"2003-01-01","seller":"Steve Geppi","price":350000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Detective Comics","issue":"27","grade":"8.0","note":"the missing copy","buyer":"","date":"2001-10-25","seller":"Mastronet","price":278210,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Captain America Comics","issue":"1","grade":"9.6","note":"Allentown","buyer":"John Verzyl","date":"2001-01-01","seller":"unknown","price":260000,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Superman","issue":"1","grade":"VF","note":"Edgar Church","buyer":"Bechara Malouf","date":"1995-07-04","seller":"Red Beard","price":170000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Action Comics","issue":"1","grade":"Now: CGC 8.5","note":"current CGC 8.5 copy","buyer":"Daniel Kramer","date":"1995-01-01","seller":"PCE","price":137500,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Detective Comics","issue":"27","grade":"8.5","note":"Edgar Church","buyer":"","date":"1994-01-01","seller":"Dave Anderson?","price":125000,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Detective Comics","issue":"27","grade":"\'Other\' high grade","note":"\'other high grade\' copy","buyer":"Steve Geppi","date":"1993-01-01","seller":"Dave Anderson (OK)","price":101000,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Action Comics","issue":"1","grade":"78","note":"","buyer":"Metropolis (for actor Nic Cage)","seller":"Sotheby\'s","price":82500,"date":"1992-09-30","goodDate":true,"inflationAdjustedPrice":""},{"title":"Detective Comics","issue":"27","grade":"NM-MT","note":"Allentown","buyer":"Dave Anderson","price":80000,"seller":"Metropolis","date":"1990-01-01","goodDate":false,"inflationAdjustedPrice":""},{"title":"Marvel Comics","issue":"1","grade":"NM","buyer":"Steve Geppi","note":"Edgar Church","seller":"John Snyder","price":35000,"date":"1984-01-01","goodDate":false,"inflationAdjustedPrice":""},{"title":"Marvel Comics","issue":"1","grade":"","note":"Edgar Church","buyer":"John Snyder","date":"1979-01-01","seller":"MHC through Steve Geppi","price":13500,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Marvel Comics","issue":"1","grade":"","note":"","buyer":"","date":"1977-01-01","seller":"Robert Crestohl?","price":7500,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Motion Picture Funnies Weekly","issue":"1","grade":"","buyer":"","note":"","date":"1976-01-01","seller":"unknown","price":6300,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Action","issue":"1","grade":"","note":"","buyer":"","date":"1975-01-01","seller":"Mitch Mehdy","price":2500,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Whiz","issue":"2","grade":"","note":"Reilly Copy","buyer":"Burl Rowe","date":"1974-01-04","seller":"Comics & Comix","price":2000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Action","issue":"1","grade":"","note":"","buyer":"Bruce Hamilton","date":"1973-04-02","seller":"Gene Henderson","price":1000,"goodDate":true,"inflationAdjustedPrice":""},{"title":"Action","issue":"1","grade":"","note":"","buyer":"Theo Hostein","date":"1973-04-22","seller":"Bruce Hamilton","price":"1500.00","goodDate":true,"inflationAdjustedPrice":""},{"title":"Action","issue":"1","grade":"","note":"","buyer":"Mitch Mehdy","date":"1973-05-01","seller":"Theo Hostein","price":"1801.26","goodDate":true,"inflationAdjustedPrice":""},{"title":"Marvel Comics","issue":"1","grade":"","buyer":"","note":"","date":"1968-01-01","seller":"Howard Rogolfsky","price":330,"goodDate":false,"inflationAdjustedPrice":""},{"title":"Action Comics","issue":"1","grade":"","buyer":"","note":"","date":"1965-01-01","seller":"unknown","price":250,"goodDate":false,"inflationAdjustedPrice":""}]}')},5498:function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(5093))},5533:function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(5093))},5543:function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(5093))},5702:function(e,t,n){"use strict";var r,a=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),s=0;s<n.length;s++)"default"!==n[s]&&a(t,e,n[s]);return i(t,e),t}),o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=s(n(9365)),d=n(9788),l=o(n(5093)),c=s(n(5414)).sales.sort(((e,t)=>l.default.utc(e.date).diff(l.default.utc(t.date)))),_=u.select("#viz").append("svg").attr("preserveAspectRatio","xMinYMin meet").attr("viewBox","0 0 1440 768").append("g").attr("transform","translate(100,100)"),f=u.timeParse("%Y-%m-%d"),h=u.select("body").append("div").attr("class","tt").style("opacity",0);h.html('\n  <div class="tt-inner">\n  </div>');const m=u.select("body").append("div").attr("class","tt inflation").style("opacity",0);m.html('\n  <div class="tt-inner">\n  </div>');const y=u.select("#data").append("ul").attr("class","list-group"),p=u.scaleTime().rangeRound([0,1320]),M=u.scaleLinear().rangeRound([638,0]),g=u.line().x((e=>p(e.date))).y((e=>M(e.price))),L=u.line().x((e=>p(e.date))).y((e=>M(e.inflationAdjustedPrice)));c.forEach((e=>{e.date=f(e.date);const t=parseInt((0,l.default)(e.date).format("YYYY"));e.inflationAdjustedPrice=(0,d.inflation)({amount:e.price,year:t})})),p.domain([u.min(c,(e=>(0,l.default)(e.date).startOf("year").toDate())),(0,l.default)().toDate()]);const Y=u.max(c,(e=>5e5*Math.ceil(e.price/5e5)));M.domain([0,Y+.1*Y]);const v=parseInt((0,l.default)().format("YYYY"))-parseInt((0,l.default)(p.domain()[0]).format("YYYY")),b=_.append("g").attr("class","axis");b.append("g").attr("class","y axis").call(u.axisLeft(M).tickSize(-1320).tickFormat(u.format("($~s"))),b.append("g").attr("class","x axis").attr("transform","translate(0, 638)").call(u.axisBottom(p).ticks(v).tickSize(-638).tickPadding(10));const w=_.append("g").attr("class","paths");w.append("path").data([c]).attr("class","line nominal").attr("d",g),w.append("path").data([c]).attr("class","inflation line").attr("d",L);const k=_.append("g").attr("class","dots"),D=e=>`<h1>${e.title}</h1>\n        <h2>#${e.issue} ${e.note} ${e.grade}</h2>\n        Sold for ${e.price.toLocaleString("us-EN",{style:"currency",currency:"USD"})} (${e.inflationAdjustedPrice.toLocaleString("us-EN",{style:"currency",currency:"USD"})})\n        `;k.selectAll(".dot").data(c).enter().append("circle").attr("class","dot nominal").attr("cx",(e=>p(e.date))).attr("cy",(e=>M(e.price))).attr("r",5).on("mouseout",(()=>{h.style("opacity",0)})).on("mouseover",(e=>{h.style("opacity",1),h.select(".tt-inner").html((()=>D(u.select(e.target).datum())))})),k.selectAll(".inflation dot").data(c).enter().append("circle").attr("class","inflation dot").attr("cx",(e=>p(e.date))).attr("cy",(e=>M(e.inflationAdjustedPrice))).attr("r",5).on("mouseout",(()=>{m.style("opacity",0)})).on("mouseover",(e=>{m.style("opacity",1),m.select(".tt-inner").html((()=>`${D(u.select(e.target).datum())} (iniflation adjusted)`))})),y.selectAll("li").data(c).enter().append("li").attr("class","list-group-item").text((e=>{let t,n=" ",r=" ",a=" ";return""!==e.seller&&(n="unknown"===e.seller?" by an unknown seller ":` sold by ${e.seller} `),""!==e.buyer&&(r=` to ${e.buyer} `),""!==e.note&&(a=` (${e.note}) `),t=e.goodDate?`in ${(0,l.default)(e.date).format("MMMM of YYYY")}`:`sometime in ${(0,l.default)(e.date).format("YYYY")}`,`${e.title} #${e.issue}${a}${n} for ${e.price.toLocaleString("us-EN",{style:"currency",currency:"USD"})} (${e.inflationAdjustedPrice.toLocaleString("us-EN",{style:"currency",currency:"USD"})})${r} ${t}`})),document.getElementById("inflationValue").addEventListener("change",(()=>{document.getElementById("viz").classList.toggle("inflation")})),document.getElementById("nominalValue").addEventListener("change",(()=>{document.getElementById("viz").classList.toggle("nominal")}))},5719:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],d:["jedan dan","jednog dana"],dd:["dan","dana","dana"],M:["jedan mesec","jednog meseca"],MM:["mesec","meseca","meseci"],y:["jednu godinu","jedne godine"],yy:["godinu","godine","godina"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,s=t.words[r];return 1===r.length?"y"===r&&n?"jedna godina":a||n?s[0]:s[1]:(i=t.correctGrammaticalCase(e,s),"yy"===r&&n&&"godinu"===i?e+" godina":e+" "+i)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},5766:function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,s){var o=e+" ";return 1===e?o+n(0,t,i[0],s):t?o+(r(e)?a(i)[1]:a(i)[0]):s?o+a(i)[1]:o+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(5093))},5784:function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:case 4:case 5:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},5802:function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(5093))},5867:function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(5093))},5995:function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(5093))},6e3:function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(5093))},6111:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},6169:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(5093))},6181:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["çend sanîye","çend sanîyeyan"],ss:[e+" sanîye",e+" sanîyeyan"],m:["deqîqeyek","deqîqeyekê"],mm:[e+" deqîqe",e+" deqîqeyan"],h:["saetek","saetekê"],hh:[e+" saet",e+" saetan"],d:["rojek","rojekê"],dd:[e+" roj",e+" rojan"],w:["hefteyek","hefteyekê"],ww:[e+" hefte",e+" hefteyan"],M:["mehek","mehekê"],MM:[e+" meh",e+" mehan"],y:["salek","salekê"],yy:[e+" sal",e+" salan"]};return t?a[n][0]:a[n][1]}e.defineLocale("ku-kmr",{months:"Rêbendan_Sibat_Adar_Nîsan_Gulan_Hezîran_Tîrmeh_Tebax_Îlon_Cotmeh_Mijdar_Berfanbar".split("_"),monthsShort:"Rêb_Sib_Ada_Nîs_Gul_Hez_Tîr_Teb_Îlo_Cot_Mij_Ber".split("_"),monthsParseExact:!0,weekdays:"Yekşem_Duşem_Sêşem_Çarşem_Pêncşem_În_Şemî".split("_"),weekdaysShort:"Yek_Du_Sê_Çar_Pên_În_Şem".split("_"),weekdaysMin:"Ye_Du_Sê_Ça_Pê_În_Şe".split("_"),meridiem:function(e,t,n){return e<12?n?"bn":"BN":n?"pn":"PN"},meridiemParse:/bn|BN|pn|PN/,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM[a] YYYY[an]",LLL:"Do MMMM[a] YYYY[an] HH:mm",LLLL:"dddd, Do MMMM[a] YYYY[an] HH:mm",ll:"Do MMM[.] YYYY[an]",lll:"Do MMM[.] YYYY[an] HH:mm",llll:"ddd[.], Do MMM[.] YYYY[an] HH:mm"},calendar:{sameDay:"[Îro di saet] LT [de]",nextDay:"[Sibê di saet] LT [de]",nextWeek:"dddd [di saet] LT [de]",lastDay:"[Duh di saet] LT [de]",lastWeek:"dddd[a borî di saet] LT [de]",sameElse:"L"},relativeTime:{future:"di %s de",past:"berî %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,w:t,ww:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(?:yê|ê|\.)/,ordinal:function(e,t){var n=t.toLowerCase();return n.includes("w")||n.includes("m")?e+".":e+function(e){var t=(e=""+e).substring(e.length-1),n=e.length>1?e.substring(e.length-2):"";return 12==n||13==n||"2"!=t&&"3"!=t&&"50"!=n&&"70"!=t&&"80"!=t?"ê":"yê"}(e)},week:{dow:1,doy:4}})}(n(5093))},6195:function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},6308:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},6435:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(5093))},6464:function(e,t,n){!function(e){"use strict";var t={standalone:"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),format:"ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince".split("_"),isFormat:/DD?[o.]?(\[[^\[\]]*\]|\s)+MMMM/},n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(i(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(i(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(i(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(i(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},6571:function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(5093))},6575:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(5093))},6584:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},6618:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(5093))},6637:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+(1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund");case"m":return t?"ena minuta":"eno minuto";case"mm":return a+(1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami");case"h":return t?"ena ura":"eno uro";case"hh":return a+(1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami");case"d":return t||r?"en dan":"enim dnem";case"dd":return a+(1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi");case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+(1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci");case"y":return t||r?"eno leto":"enim letom";case"yy":return a+(1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti")}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},6794:function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},6870:function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(5093))},6947:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-ps",{months:"كانون الثاني_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_تشري الأوّل_تشرين الثاني_كانون الأوّل".split("_"),monthsShort:"ك٢_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_ت١_ت٢_ك١".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).split("").reverse().join("").replace(/[١٢](?![\u062a\u0643])/g,(function(e){return n[e]})).split("").reverse().join("").replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(5093))},7071:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(5093))},7075:function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},7088:function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(5093))},7160:function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(5093))},7306:function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(5093))},7329:function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},7357:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(5093))},7538:function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(5093))},7609:function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(5093))},7650:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(5093))},7711:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(5093))},7730:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(5093))},7777:function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(5093))},7853:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},7892:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(5093))},8076:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},8174:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(5093))},8235:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(5093))},8298:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(5093))},8303:function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(5093))},8383:function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){return 0===this.day()?"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT":"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},8414:function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(5093))},8474:function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(5093))},8676:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(5093))},8861:function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},8959:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(5093))},9033:function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(5093))},9053:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(5093))},9231:function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(5093))},9330:function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(5093))},9365:(e,t,n)=>{"use strict";function r(e,t){return null==e||null==t?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function a(e,t){return null==e||null==t?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function i(e){let t,n,i;function o(e,r,a=0,i=e.length){if(a<i){if(0!==t(r,r))return i;do{const t=a+i>>>1;n(e[t],r)<0?a=t+1:i=t}while(a<i)}return a}return 2!==e.length?(t=r,n=(t,n)=>r(e(t),n),i=(t,n)=>e(t)-n):(t=e===r||e===a?e:s,n=e,i=e),{left:o,center:function(e,t,n=0,r=e.length){const a=o(e,t,n,r-1);return a>n&&i(e[a-1],t)>-i(e[a],t)?a-1:a},right:function(e,r,a=0,i=e.length){if(a<i){if(0!==t(r,r))return i;do{const t=a+i>>>1;n(e[t],r)<=0?a=t+1:i=t}while(a<i)}return a}}}function s(){return 0}function o(e){return null===e?NaN:+e}n.r(t),n.d(t,{Adder:()=>S,Delaunay:()=>qo,FormatSpecifier:()=>ll,InternMap:()=>j,InternSet:()=>F,Node:()=>Pm,Path:()=>os,Voronoi:()=>zo,ZoomTransform:()=>Uk,active:()=>_i,arc:()=>xb,area:()=>Eb,areaRadial:()=>$b,ascending:()=>r,autoType:()=>ku,axisBottom:()=>gt,axisLeft:()=>Lt,axisRight:()=>Mt,axisTop:()=>pt,bin:()=>fe,bisect:()=>_,bisectCenter:()=>c,bisectLeft:()=>l,bisectRight:()=>d,bisector:()=>i,blob:()=>hd,blur:()=>f,blur2:()=>h,blurImage:()=>m,brush:()=>Ci,brushSelection:()=>Ji,brushX:()=>Wi,brushY:()=>zi,buffer:()=>yd,chord:()=>Xi,chordDirected:()=>es,chordTranspose:()=>Qi,cluster:()=>xm,color:()=>_r,contourDensity:()=>po,contours:()=>uo,count:()=>L,create:()=>nb,creator:()=>Tn,cross:()=>w,csv:()=>Yd,csvFormat:()=>_u,csvFormatBody:()=>fu,csvFormatRow:()=>mu,csvFormatRows:()=>hu,csvFormatValue:()=>yu,csvParse:()=>lu,csvParseRows:()=>cu,cubehelix:()=>Xs,cumsum:()=>k,curveBasis:()=>Pw,curveBasisClosed:()=>Nw,curveBasisOpen:()=>Ww,curveBumpX:()=>Vb,curveBumpY:()=>Zb,curveBundle:()=>Cw,curveCardinal:()=>Uw,curveCardinalClosed:()=>qw,curveCardinalOpen:()=>Gw,curveCatmullRom:()=>Kw,curveCatmullRomClosed:()=>Qw,curveCatmullRomOpen:()=>tk,curveLinear:()=>jb,curveLinearClosed:()=>rk,curveMonotoneX:()=>ck,curveMonotoneY:()=>_k,curveNatural:()=>mk,curveStep:()=>pk,curveStepAfter:()=>gk,curveStepBefore:()=>Mk,descending:()=>a,deviation:()=>T,difference:()=>Ke,disjoint:()=>Xe,dispatch:()=>Dt,drag:()=>Qo,dragDisable:()=>qn,dragEnable:()=>Bn,dsv:()=>Ld,dsvFormat:()=>uu,easeBack:()=>ud,easeBackIn:()=>sd,easeBackInOut:()=>ud,easeBackOut:()=>od,easeBounce:()=>rd,easeBounceIn:()=>nd,easeBounceInOut:()=>ad,easeBounceOut:()=>rd,easeCircle:()=>$u,easeCircleIn:()=>Iu,easeCircleInOut:()=>$u,easeCircleOut:()=>Uu,easeCubic:()=>ui,easeCubicIn:()=>si,easeCubicInOut:()=>ui,easeCubicOut:()=>oi,easeElastic:()=>cd,easeElasticIn:()=>ld,easeElasticInOut:()=>_d,easeElasticOut:()=>cd,easeExp:()=>Ru,easeExpIn:()=>zu,easeExpInOut:()=>Ru,easeExpOut:()=>Cu,easeLinear:()=>Tu,easePoly:()=>Fu,easePolyIn:()=>Hu,easePolyInOut:()=>Fu,easePolyOut:()=>ju,easeQuad:()=>Au,easeQuadIn:()=>xu,easeQuadInOut:()=>Au,easeQuadOut:()=>Su,easeSin:()=>Ju,easeSinIn:()=>Eu,easeSinInOut:()=>Ju,easeSinOut:()=>Nu,every:()=>$e,extent:()=>x,fcumsum:()=>H,filter:()=>Be,flatGroup:()=>R,flatRollup:()=>I,forceCenter:()=>Ad,forceCollide:()=>Id,forceLink:()=>qd,forceManyBody:()=>tl,forceRadial:()=>nl,forceSimulation:()=>el,forceX:()=>rl,forceY:()=>al,format:()=>ml,formatDefaultLocale:()=>Ll,formatLocale:()=>gl,formatPrefix:()=>yl,formatSpecifier:()=>dl,fsum:()=>A,geoAlbers:()=>Ih,geoAlbersUsa:()=>Uh,geoArea:()=>wc,geoAzimuthalEqualArea:()=>Gh,geoAzimuthalEqualAreaRaw:()=>Bh,geoAzimuthalEquidistant:()=>Zh,geoAzimuthalEquidistantRaw:()=>Vh,geoBounds:()=>i_,geoCentroid:()=>p_,geoCircle:()=>x_,geoClipAntimeridian:()=>W_,geoClipCircle:()=>z_,geoClipExtent:()=>G_,geoClipRectangle:()=>B_,geoConicConformal:()=>nm,geoConicConformalRaw:()=>tm,geoConicEqualArea:()=>Rh,geoConicEqualAreaRaw:()=>Ch,geoConicEquidistant:()=>sm,geoConicEquidistantRaw:()=>im,geoContains:()=>_f,geoDistance:()=>nf,geoEqualEarth:()=>fm,geoEqualEarthRaw:()=>_m,geoEquirectangular:()=>am,geoEquirectangularRaw:()=>rm,geoGnomonic:()=>mm,geoGnomonicRaw:()=>hm,geoGraticule:()=>mf,geoGraticule10:()=>yf,geoIdentity:()=>ym,geoInterpolate:()=>pf,geoLength:()=>Q_,geoMercator:()=>Xh,geoMercatorRaw:()=>Kh,geoNaturalEarth1:()=>Mm,geoNaturalEarth1Raw:()=>pm,geoOrthographic:()=>Lm,geoOrthographicRaw:()=>gm,geoPath:()=>wh,geoProjection:()=>Jh,geoProjectionMutator:()=>Wh,geoRotation:()=>k_,geoStereographic:()=>vm,geoStereographicRaw:()=>Ym,geoStream:()=>ec,geoTransform:()=>kh,geoTransverseMercator:()=>wm,geoTransverseMercatorRaw:()=>bm,gray:()=>js,greatest:()=>Le,greatestIndex:()=>Ne,group:()=>W,groupSort:()=>ee,groups:()=>z,hcl:()=>Cs,hierarchy:()=>Am,histogram:()=>fe,hsl:()=>kr,html:()=>xd,image:()=>bd,index:()=>q,indexes:()=>B,interpolate:()=>Kr,interpolateArray:()=>Ir,interpolateBasis:()=>Hr,interpolateBasisClosed:()=>jr,interpolateBlues:()=>Sv,interpolateBrBG:()=>CY,interpolateBuGn:()=>iv,interpolateBuPu:()=>ov,interpolateCividis:()=>zv,interpolateCool:()=>Iv,interpolateCubehelix:()=>Vy,interpolateCubehelixDefault:()=>Cv,interpolateCubehelixLong:()=>Zy,interpolateDate:()=>$r,interpolateDiscrete:()=>Ey,interpolateGnBu:()=>dv,interpolateGreens:()=>Hv,interpolateGreys:()=>Fv,interpolateHcl:()=>qy,interpolateHclLong:()=>By,interpolateHsl:()=>Ry,interpolateHslLong:()=>Iy,interpolateHue:()=>Ny,interpolateInferno:()=>eb,interpolateLab:()=>Uy,interpolateMagma:()=>Qv,interpolateNumber:()=>qr,interpolateNumberArray:()=>Cr,interpolateObject:()=>Br,interpolateOrRd:()=>cv,interpolateOranges:()=>Wv,interpolatePRGn:()=>IY,interpolatePiYG:()=>$Y,interpolatePlasma:()=>tb,interpolatePuBu:()=>mv,interpolatePuBuGn:()=>fv,interpolatePuOr:()=>BY,interpolatePuRd:()=>pv,interpolatePurples:()=>Pv,interpolateRainbow:()=>$v,interpolateRdBu:()=>VY,interpolateRdGy:()=>KY,interpolateRdPu:()=>gv,interpolateRdYlBu:()=>QY,interpolateRdYlGn:()=>tv,interpolateReds:()=>Nv,interpolateRgb:()=>Nr,interpolateRgbBasis:()=>Wr,interpolateRgbBasisClosed:()=>zr,interpolateRound:()=>Jy,interpolateSinebow:()=>Vv,interpolateSpectral:()=>rv,interpolateString:()=>Zr,interpolateTransformCss:()=>Pa,interpolateTransformSvg:()=>Ea,interpolateTurbo:()=>Zv,interpolateViridis:()=>Xv,interpolateWarm:()=>Rv,interpolateYlGn:()=>bv,interpolateYlGnBu:()=>Yv,interpolateYlOrBr:()=>kv,interpolateYlOrRd:()=>Tv,interpolateZoom:()=>zy,interrupt:()=>Sa,intersection:()=>Qe,interval:()=>Ck,isoFormat:()=>Jk,isoParse:()=>zk,json:()=>kd,lab:()=>Fs,lch:()=>zs,least:()=>Pe,leastIndex:()=>Ee,line:()=>Pb,lineRadial:()=>Ub,link:()=>ew,linkHorizontal:()=>tw,linkRadial:()=>rw,linkVertical:()=>nw,local:()=>ab,map:()=>Ge,matcher:()=>jt,max:()=>he,maxIndex:()=>me,mean:()=>De,median:()=>Te,medianIndex:()=>xe,merge:()=>Se,min:()=>ye,minIndex:()=>pe,mode:()=>Ae,namespace:()=>Bt,namespaces:()=>qt,nice:()=>ce,now:()=>la,pack:()=>sy,packEnclose:()=>Um,packSiblings:()=>ay,pairs:()=>He,partition:()=>_y,path:()=>us,pathRound:()=>ds,permute:()=>Z,pie:()=>Wb,piecewise:()=>Ky,pointRadial:()=>qb,pointer:()=>Qr,pointers:()=>sb,polygonArea:()=>Qy,polygonCentroid:()=>ep,polygonContains:()=>ip,polygonHull:()=>ap,polygonLength:()=>sp,precisionFixed:()=>Yl,precisionPrefix:()=>vl,precisionRound:()=>bl,quadtree:()=>Pd,quantile:()=>Ye,quantileIndex:()=>be,quantileSorted:()=>ve,quantize:()=>Xy,quickselect:()=>Me,radialArea:()=>$b,radialLine:()=>Ub,randomBates:()=>fp,randomBernoulli:()=>yp,randomBeta:()=>gp,randomBinomial:()=>Lp,randomCauchy:()=>vp,randomExponential:()=>hp,randomGamma:()=>Mp,randomGeometric:()=>pp,randomInt:()=>dp,randomIrwinHall:()=>_p,randomLcg:()=>xp,randomLogNormal:()=>cp,randomLogistic:()=>bp,randomNormal:()=>lp,randomPareto:()=>mp,randomPoisson:()=>wp,randomUniform:()=>up,randomWeibull:()=>Yp,range:()=>Fe,rank:()=>Oe,reduce:()=>Ve,reverse:()=>Ze,rgb:()=>yr,ribbon:()=>Ls,ribbonArrow:()=>Ys,rollup:()=>U,rollups:()=>$,scaleBand:()=>Fp,scaleDiverging:()=>vY,scaleDivergingLog:()=>bY,scaleDivergingPow:()=>kY,scaleDivergingSqrt:()=>DY,scaleDivergingSymlog:()=>wY,scaleIdentity:()=>Gp,scaleImplicit:()=>Hp,scaleLinear:()=>Bp,scaleLog:()=>rM,scaleOrdinal:()=>jp,scalePoint:()=>Pp,scalePow:()=>_M,scaleQuantile:()=>yM,scaleQuantize:()=>pM,scaleRadial:()=>mM,scaleSequential:()=>mY,scaleSequentialLog:()=>yY,scaleSequentialPow:()=>MY,scaleSequentialQuantile:()=>LY,scaleSequentialSqrt:()=>gY,scaleSequentialSymlog:()=>pY,scaleSqrt:()=>fM,scaleSymlog:()=>oM,scaleThreshold:()=>MM,scaleTime:()=>cY,scaleUtc:()=>_Y,scan:()=>Je,schemeAccent:()=>SY,schemeBlues:()=>xv,schemeBrBG:()=>zY,schemeBuGn:()=>av,schemeBuPu:()=>sv,schemeCategory10:()=>xY,schemeDark2:()=>AY,schemeGnBu:()=>uv,schemeGreens:()=>Av,schemeGreys:()=>jv,schemeObservable10:()=>HY,schemeOrRd:()=>lv,schemeOranges:()=>Jv,schemePRGn:()=>RY,schemePaired:()=>jY,schemePastel1:()=>FY,schemePastel2:()=>OY,schemePiYG:()=>UY,schemePuBu:()=>hv,schemePuBuGn:()=>_v,schemePuOr:()=>qY,schemePuRd:()=>yv,schemePurples:()=>Ov,schemeRdBu:()=>GY,schemeRdGy:()=>ZY,schemeRdPu:()=>Mv,schemeRdYlBu:()=>XY,schemeRdYlGn:()=>ev,schemeReds:()=>Ev,schemeSet1:()=>PY,schemeSet2:()=>EY,schemeSet3:()=>NY,schemeSpectral:()=>nv,schemeTableau10:()=>JY,schemeYlGn:()=>vv,schemeYlGnBu:()=>Lv,schemeYlOrBr:()=>wv,schemeYlOrRd:()=>Dv,select:()=>Cn,selectAll:()=>ob,selection:()=>zn,selector:()=>xt,selectorAll:()=>Ht,shuffle:()=>We,shuffler:()=>ze,some:()=>qe,sort:()=>K,stack:()=>wk,stackOffsetDiverging:()=>Dk,stackOffsetExpand:()=>kk,stackOffsetNone:()=>Lk,stackOffsetSilhouette:()=>Tk,stackOffsetWiggle:()=>xk,stackOrderAppearance:()=>Sk,stackOrderAscending:()=>Hk,stackOrderDescending:()=>Fk,stackOrderInsideOut:()=>Ok,stackOrderNone:()=>Yk,stackOrderReverse:()=>Pk,stratify:()=>My,style:()=>an,subset:()=>rt,sum:()=>Ce,superset:()=>tt,svg:()=>Sd,symbol:()=>Hw,symbolAsterisk:()=>iw,symbolCircle:()=>sw,symbolCross:()=>ow,symbolDiamond:()=>lw,symbolDiamond2:()=>cw,symbolPlus:()=>_w,symbolSquare:()=>fw,symbolSquare2:()=>hw,symbolStar:()=>Mw,symbolTimes:()=>xw,symbolTriangle:()=>Lw,symbolTriangle2:()=>vw,symbolWye:()=>Tw,symbolX:()=>xw,symbols:()=>Sw,symbolsFill:()=>Sw,symbolsStroke:()=>Aw,text:()=>Md,thresholdFreedmanDiaconis:()=>we,thresholdScott:()=>ke,thresholdSturges:()=>_e,tickFormat:()=>$p,tickIncrement:()=>de,tickStep:()=>le,ticks:()=>ue,timeDay:()=>zM,timeDays:()=>CM,timeFormat:()=>zg,timeFormatDefaultLocale:()=>oY,timeFormatLocale:()=>Jg,timeFriday:()=>XM,timeFridays:()=>ig,timeHour:()=>EM,timeHours:()=>NM,timeInterval:()=>TM,timeMillisecond:()=>xM,timeMilliseconds:()=>SM,timeMinute:()=>jM,timeMinutes:()=>FM,timeMonday:()=>GM,timeMondays:()=>tg,timeMonth:()=>vg,timeMonths:()=>bg,timeParse:()=>Cg,timeSaturday:()=>QM,timeSaturdays:()=>sg,timeSecond:()=>AM,timeSeconds:()=>HM,timeSunday:()=>BM,timeSundays:()=>eg,timeThursday:()=>KM,timeThursdays:()=>ag,timeTickInterval:()=>Og,timeTicks:()=>Fg,timeTuesday:()=>VM,timeTuesdays:()=>ng,timeWednesday:()=>ZM,timeWednesdays:()=>rg,timeWeek:()=>BM,timeWeeks:()=>eg,timeYear:()=>Dg,timeYears:()=>Tg,timeout:()=>Ma,timer:()=>fa,timerFlush:()=>ha,transition:()=>ri,transpose:()=>Re,tree:()=>Ty,treemap:()=>jy,treemapBinary:()=>Fy,treemapDice:()=>cy,treemapResquarify:()=>Py,treemapSlice:()=>xy,treemapSliceDice:()=>Oy,treemapSquarify:()=>Hy,tsv:()=>vd,tsvFormat:()=>Lu,tsvFormatBody:()=>Yu,tsvFormatRow:()=>bu,tsvFormatRows:()=>vu,tsvFormatValue:()=>wu,tsvParse:()=>Mu,tsvParseRows:()=>gu,union:()=>at,unixDay:()=>UM,unixDays:()=>$M,utcDay:()=>RM,utcDays:()=>IM,utcFormat:()=>Rg,utcFriday:()=>fg,utcFridays:()=>Lg,utcHour:()=>JM,utcHours:()=>WM,utcMillisecond:()=>xM,utcMilliseconds:()=>SM,utcMinute:()=>OM,utcMinutes:()=>PM,utcMonday:()=>dg,utcMondays:()=>yg,utcMonth:()=>wg,utcMonths:()=>kg,utcParse:()=>Ig,utcSaturday:()=>hg,utcSaturdays:()=>Yg,utcSecond:()=>AM,utcSeconds:()=>HM,utcSunday:()=>ug,utcSundays:()=>mg,utcThursday:()=>_g,utcThursdays:()=>gg,utcTickInterval:()=>jg,utcTicks:()=>Hg,utcTuesday:()=>lg,utcTuesdays:()=>pg,utcWednesday:()=>cg,utcWednesdays:()=>Mg,utcWeek:()=>ug,utcWeeks:()=>mg,utcYear:()=>xg,utcYears:()=>Sg,variance:()=>D,window:()=>en,xml:()=>Td,zip:()=>Ue,zoom:()=>tD,zoomIdentity:()=>$k,zoomTransform:()=>qk});const u=i(r),d=u.right,l=u.left,c=i(o).center,_=d;function f(e,t){if(!((t=+t)>=0))throw new RangeError("invalid r");let n=e.length;if(!((n=Math.floor(n))>=0))throw new RangeError("invalid length");if(!n||!t)return e;const r=g(t),a=e.slice();return r(e,a,0,n,1),r(a,e,0,n,1),r(e,a,0,n,1),e}const h=y(g),m=y((function(e){const t=g(e);return(e,n,r,a,i)=>{t(e,n,0+(r<<=2),0+(a<<=2),i<<=2),t(e,n,r+1,a+1,i),t(e,n,r+2,a+2,i),t(e,n,r+3,a+3,i)}}));function y(e){return function(t,n,r=n){if(!((n=+n)>=0))throw new RangeError("invalid rx");if(!((r=+r)>=0))throw new RangeError("invalid ry");let{data:a,width:i,height:s}=t;if(!((i=Math.floor(i))>=0))throw new RangeError("invalid width");if(!((s=Math.floor(void 0!==s?s:a.length/i))>=0))throw new RangeError("invalid height");if(!i||!s||!n&&!r)return t;const o=n&&e(n),u=r&&e(r),d=a.slice();return o&&u?(p(o,d,a,i,s),p(o,a,d,i,s),p(o,d,a,i,s),M(u,a,d,i,s),M(u,d,a,i,s),M(u,a,d,i,s)):o?(p(o,a,d,i,s),p(o,d,a,i,s),p(o,a,d,i,s)):u&&(M(u,a,d,i,s),M(u,d,a,i,s),M(u,a,d,i,s)),t}}function p(e,t,n,r,a){for(let i=0,s=r*a;i<s;)e(t,n,i,i+=r,1)}function M(e,t,n,r,a){for(let i=0,s=r*a;i<r;++i)e(t,n,i,i+s,r)}function g(e){const t=Math.floor(e);if(t===e)return function(e){const t=2*e+1;return(n,r,a,i,s)=>{if(!((i-=s)>=a))return;let o=e*r[a];const u=s*e;for(let e=a,t=a+u;e<t;e+=s)o+=r[Math.min(i,e)];for(let e=a,d=i;e<=d;e+=s)o+=r[Math.min(i,e+u)],n[e]=o/t,o-=r[Math.max(a,e-u)]}}(e);const n=e-t,r=2*e+1;return(e,a,i,s,o)=>{if(!((s-=o)>=i))return;let u=t*a[i];const d=o*t,l=d+o;for(let e=i,t=i+d;e<t;e+=o)u+=a[Math.min(s,e)];for(let t=i,c=s;t<=c;t+=o)u+=a[Math.min(s,t+d)],e[t]=(u+n*(a[Math.max(i,t-l)]+a[Math.min(s,t+l)]))/r,u-=a[Math.max(i,t-d)]}}function L(e,t){let n=0;if(void 0===t)for(let t of e)null!=t&&(t=+t)>=t&&++n;else{let r=-1;for(let a of e)null!=(a=t(a,++r,e))&&(a=+a)>=a&&++n}return n}function Y(e){return 0|e.length}function v(e){return!(e>0)}function b(e){return"object"!=typeof e||"length"in e?e:Array.from(e)}function w(...e){const t="function"==typeof e[e.length-1]&&function(e){return t=>e(...t)}(e.pop()),n=(e=e.map(b)).map(Y),r=e.length-1,a=new Array(r+1).fill(0),i=[];if(r<0||n.some(v))return i;for(;;){i.push(a.map(((t,n)=>e[n][t])));let s=r;for(;++a[s]===n[s];){if(0===s)return t?i.map(t):i;a[s--]=0}}}function k(e,t){var n=0,r=0;return Float64Array.from(e,void 0===t?e=>n+=+e||0:a=>n+=+t(a,r++,e)||0)}function D(e,t){let n,r=0,a=0,i=0;if(void 0===t)for(let t of e)null!=t&&(t=+t)>=t&&(n=t-a,a+=n/++r,i+=n*(t-a));else{let s=-1;for(let o of e)null!=(o=t(o,++s,e))&&(o=+o)>=o&&(n=o-a,a+=n/++r,i+=n*(o-a))}if(r>1)return i/(r-1)}function T(e,t){const n=D(e,t);return n?Math.sqrt(n):n}function x(e,t){let n,r;if(void 0===t)for(const t of e)null!=t&&(void 0===n?t>=t&&(n=r=t):(n>t&&(n=t),r<t&&(r=t)));else{let a=-1;for(let i of e)null!=(i=t(i,++a,e))&&(void 0===n?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)))}return[n,r]}class S{constructor(){this._partials=new Float64Array(32),this._n=0}add(e){const t=this._partials;let n=0;for(let r=0;r<this._n&&r<32;r++){const a=t[r],i=e+a,s=Math.abs(e)<Math.abs(a)?e-(i-a):a-(i-e);s&&(t[n++]=s),e=i}return t[n]=e,this._n=n+1,this}valueOf(){const e=this._partials;let t,n,r,a=this._n,i=0;if(a>0){for(i=e[--a];a>0&&(t=i,n=e[--a],i=t+n,r=n-(i-t),!r););a>0&&(r<0&&e[a-1]<0||r>0&&e[a-1]>0)&&(n=2*r,t=i+n,n==t-i&&(i=t))}return i}}function A(e,t){const n=new S;if(void 0===t)for(let t of e)(t=+t)&&n.add(t);else{let r=-1;for(let a of e)(a=+t(a,++r,e))&&n.add(a)}return+n}function H(e,t){const n=new S;let r=-1;return Float64Array.from(e,void 0===t?e=>n.add(+e||0):a=>n.add(+t(a,++r,e)||0))}class j extends Map{constructor(e,t=N){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:t}}),null!=e)for(const[t,n]of e)this.set(t,n)}get(e){return super.get(O(this,e))}has(e){return super.has(O(this,e))}set(e,t){return super.set(P(this,e),t)}delete(e){return super.delete(E(this,e))}}class F extends Set{constructor(e,t=N){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:t}}),null!=e)for(const t of e)this.add(t)}has(e){return super.has(O(this,e))}add(e){return super.add(P(this,e))}delete(e){return super.delete(E(this,e))}}function O({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):n}function P({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):(e.set(r,n),n)}function E({_intern:e,_key:t},n){const r=t(n);return e.has(r)&&(n=e.get(r),e.delete(r)),n}function N(e){return null!==e&&"object"==typeof e?e.valueOf():e}function J(e){return e}function W(e,...t){return V(e,J,J,t)}function z(e,...t){return V(e,Array.from,J,t)}function C(e,t){for(let n=1,r=t.length;n<r;++n)e=e.flatMap((e=>e.pop().map((([t,n])=>[...e,t,n]))));return e}function R(e,...t){return C(z(e,...t),t)}function I(e,t,...n){return C($(e,t,...n),n)}function U(e,t,...n){return V(e,J,t,n)}function $(e,t,...n){return V(e,Array.from,t,n)}function q(e,...t){return V(e,J,G,t)}function B(e,...t){return V(e,Array.from,G,t)}function G(e){if(1!==e.length)throw new Error("duplicate key");return e[0]}function V(e,t,n,r){return function e(a,i){if(i>=r.length)return n(a);const s=new j,o=r[i++];let u=-1;for(const e of a){const t=o(e,++u,a),n=s.get(t);n?n.push(e):s.set(t,[e])}for(const[t,n]of s)s.set(t,e(n,i));return t(s)}(e,0)}function Z(e,t){return Array.from(t,(t=>e[t]))}function K(e,...t){if("function"!=typeof e[Symbol.iterator])throw new TypeError("values is not iterable");e=Array.from(e);let[n]=t;if(n&&2!==n.length||t.length>1){const r=Uint32Array.from(e,((e,t)=>t));return t.length>1?(t=t.map((t=>e.map(t))),r.sort(((e,n)=>{for(const r of t){const t=Q(r[e],r[n]);if(t)return t}}))):(n=e.map(n),r.sort(((e,t)=>Q(n[e],n[t])))),Z(e,r)}return e.sort(X(n))}function X(e=r){if(e===r)return Q;if("function"!=typeof e)throw new TypeError("compare is not a function");return(t,n)=>{const r=e(t,n);return r||0===r?r:(0===e(n,n))-(0===e(t,t))}}function Q(e,t){return(null==e||!(e>=e))-(null==t||!(t>=t))||(e<t?-1:e>t?1:0)}function ee(e,t,n){return(2!==t.length?K(U(e,t,n),(([e,t],[n,a])=>r(t,a)||r(e,n))):K(W(e,n),(([e,n],[a,i])=>t(n,i)||r(e,a)))).map((([e])=>e))}var te=Array.prototype,ne=te.slice;function re(e){return()=>e}te.map;const ae=Math.sqrt(50),ie=Math.sqrt(10),se=Math.sqrt(2);function oe(e,t,n){const r=(t-e)/Math.max(0,n),a=Math.floor(Math.log10(r)),i=r/Math.pow(10,a),s=i>=ae?10:i>=ie?5:i>=se?2:1;let o,u,d;return a<0?(d=Math.pow(10,-a)/s,o=Math.round(e*d),u=Math.round(t*d),o/d<e&&++o,u/d>t&&--u,d=-d):(d=Math.pow(10,a)*s,o=Math.round(e/d),u=Math.round(t/d),o*d<e&&++o,u*d>t&&--u),u<o&&.5<=n&&n<2?oe(e,t,2*n):[o,u,d]}function ue(e,t,n){if(!((n=+n)>0))return[];if((e=+e)==(t=+t))return[e];const r=t<e,[a,i,s]=r?oe(t,e,n):oe(e,t,n);if(!(i>=a))return[];const o=i-a+1,u=new Array(o);if(r)if(s<0)for(let e=0;e<o;++e)u[e]=(i-e)/-s;else for(let e=0;e<o;++e)u[e]=(i-e)*s;else if(s<0)for(let e=0;e<o;++e)u[e]=(a+e)/-s;else for(let e=0;e<o;++e)u[e]=(a+e)*s;return u}function de(e,t,n){return oe(e=+e,t=+t,n=+n)[2]}function le(e,t,n){n=+n;const r=(t=+t)<(e=+e),a=r?de(t,e,n):de(e,t,n);return(r?-1:1)*(a<0?1/-a:a)}function ce(e,t,n){let r;for(;;){const a=de(e,t,n);if(a===r||0===a||!isFinite(a))return[e,t];a>0?(e=Math.floor(e/a)*a,t=Math.ceil(t/a)*a):a<0&&(e=Math.ceil(e*a)/a,t=Math.floor(t*a)/a),r=a}}function _e(e){return Math.max(1,Math.ceil(Math.log(L(e))/Math.LN2)+1)}function fe(){var e=J,t=x,n=_e;function r(r){Array.isArray(r)||(r=Array.from(r));var a,i,s,o=r.length,u=new Array(o);for(a=0;a<o;++a)u[a]=e(r[a],a,r);var d=t(u),l=d[0],c=d[1],f=n(u,l,c);if(!Array.isArray(f)){const e=c,n=+f;if(t===x&&([l,c]=ce(l,c,n)),(f=ue(l,c,n))[0]<=l&&(s=de(l,c,n)),f[f.length-1]>=c)if(e>=c&&t===x){const e=de(l,c,n);isFinite(e)&&(e>0?c=(Math.floor(c/e)+1)*e:e<0&&(c=(Math.ceil(c*-e)+1)/-e))}else f.pop()}for(var h=f.length,m=0,y=h;f[m]<=l;)++m;for(;f[y-1]>c;)--y;(m||y<h)&&(f=f.slice(m,y),h=y-m);var p,M=new Array(h+1);for(a=0;a<=h;++a)(p=M[a]=[]).x0=a>0?f[a-1]:l,p.x1=a<h?f[a]:c;if(isFinite(s)){if(s>0)for(a=0;a<o;++a)null!=(i=u[a])&&l<=i&&i<=c&&M[Math.min(h,Math.floor((i-l)/s))].push(r[a]);else if(s<0)for(a=0;a<o;++a)if(null!=(i=u[a])&&l<=i&&i<=c){const e=Math.floor((l-i)*s);M[Math.min(h,e+(f[e]<=i))].push(r[a])}}else for(a=0;a<o;++a)null!=(i=u[a])&&l<=i&&i<=c&&M[_(f,i,0,h)].push(r[a]);return M}return r.value=function(t){return arguments.length?(e="function"==typeof t?t:re(t),r):e},r.domain=function(e){return arguments.length?(t="function"==typeof e?e:re([e[0],e[1]]),r):t},r.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:re(Array.isArray(e)?ne.call(e):e),r):n},r}function he(e,t){let n;if(void 0===t)for(const t of e)null!=t&&(n<t||void 0===n&&t>=t)&&(n=t);else{let r=-1;for(let a of e)null!=(a=t(a,++r,e))&&(n<a||void 0===n&&a>=a)&&(n=a)}return n}function me(e,t){let n,r=-1,a=-1;if(void 0===t)for(const t of e)++a,null!=t&&(n<t||void 0===n&&t>=t)&&(n=t,r=a);else for(let i of e)null!=(i=t(i,++a,e))&&(n<i||void 0===n&&i>=i)&&(n=i,r=a);return r}function ye(e,t){let n;if(void 0===t)for(const t of e)null!=t&&(n>t||void 0===n&&t>=t)&&(n=t);else{let r=-1;for(let a of e)null!=(a=t(a,++r,e))&&(n>a||void 0===n&&a>=a)&&(n=a)}return n}function pe(e,t){let n,r=-1,a=-1;if(void 0===t)for(const t of e)++a,null!=t&&(n>t||void 0===n&&t>=t)&&(n=t,r=a);else for(let i of e)null!=(i=t(i,++a,e))&&(n>i||void 0===n&&i>=i)&&(n=i,r=a);return r}function Me(e,t,n=0,r=1/0,a){if(t=Math.floor(t),n=Math.floor(Math.max(0,n)),r=Math.floor(Math.min(e.length-1,r)),!(n<=t&&t<=r))return e;for(a=void 0===a?Q:X(a);r>n;){if(r-n>600){const i=r-n+1,s=t-n+1,o=Math.log(i),u=.5*Math.exp(2*o/3),d=.5*Math.sqrt(o*u*(i-u)/i)*(s-i/2<0?-1:1);Me(e,t,Math.max(n,Math.floor(t-s*u/i+d)),Math.min(r,Math.floor(t+(i-s)*u/i+d)),a)}const i=e[t];let s=n,o=r;for(ge(e,n,t),a(e[r],i)>0&&ge(e,n,r);s<o;){for(ge(e,s,o),++s,--o;a(e[s],i)<0;)++s;for(;a(e[o],i)>0;)--o}0===a(e[n],i)?ge(e,n,o):(++o,ge(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}return e}function ge(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function Le(e,t=r){let n,a=!1;if(1===t.length){let i;for(const s of e){const e=t(s);(a?r(e,i)>0:0===r(e,e))&&(n=s,i=e,a=!0)}}else for(const r of e)(a?t(r,n)>0:0===t(r,r))&&(n=r,a=!0);return n}function Ye(e,t,n){if(e=Float64Array.from(function*(e,t){if(void 0===t)for(let t of e)null!=t&&(t=+t)>=t&&(yield t);else{let n=-1;for(let r of e)null!=(r=t(r,++n,e))&&(r=+r)>=r&&(yield r)}}(e,n)),(r=e.length)&&!isNaN(t=+t)){if(t<=0||r<2)return ye(e);if(t>=1)return he(e);var r,a=(r-1)*t,i=Math.floor(a),s=he(Me(e,i).subarray(0,i+1));return s+(ye(e.subarray(i+1))-s)*(a-i)}}function ve(e,t,n=o){if((r=e.length)&&!isNaN(t=+t)){if(t<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,a=(r-1)*t,i=Math.floor(a),s=+n(e[i],i,e);return s+(+n(e[i+1],i+1,e)-s)*(a-i)}}function be(e,t,n=o){if(!isNaN(t=+t)){if(r=Float64Array.from(e,((t,r)=>o(n(e[r],r,e)))),t<=0)return pe(r);if(t>=1)return me(r);var r,a=Uint32Array.from(e,((e,t)=>t)),i=r.length-1,s=Math.floor(i*t);return Me(a,s,0,i,((e,t)=>Q(r[e],r[t]))),(s=Le(a.subarray(0,s+1),(e=>r[e])))>=0?s:-1}}function we(e,t,n){const r=L(e),a=Ye(e,.75)-Ye(e,.25);return r&&a?Math.ceil((n-t)/(2*a*Math.pow(r,-1/3))):1}function ke(e,t,n){const r=L(e),a=T(e);return r&&a?Math.ceil((n-t)*Math.cbrt(r)/(3.49*a)):1}function De(e,t){let n=0,r=0;if(void 0===t)for(let t of e)null!=t&&(t=+t)>=t&&(++n,r+=t);else{let a=-1;for(let i of e)null!=(i=t(i,++a,e))&&(i=+i)>=i&&(++n,r+=i)}if(n)return r/n}function Te(e,t){return Ye(e,.5,t)}function xe(e,t){return be(e,.5,t)}function Se(e){return Array.from(function*(e){for(const t of e)yield*t}(e))}function Ae(e,t){const n=new j;if(void 0===t)for(let t of e)null!=t&&t>=t&&n.set(t,(n.get(t)||0)+1);else{let r=-1;for(let a of e)null!=(a=t(a,++r,e))&&a>=a&&n.set(a,(n.get(a)||0)+1)}let r,a=0;for(const[e,t]of n)t>a&&(a=t,r=e);return r}function He(e,t=je){const n=[];let r,a=!1;for(const i of e)a&&n.push(t(r,i)),r=i,a=!0;return n}function je(e,t){return[e,t]}function Fe(e,t,n){e=+e,t=+t,n=(a=arguments.length)<2?(t=e,e=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(a);++r<a;)i[r]=e+r*n;return i}function Oe(e,t=r){if("function"!=typeof e[Symbol.iterator])throw new TypeError("values is not iterable");let n=Array.from(e);const a=new Float64Array(n.length);2!==t.length&&(n=n.map(t),t=r);const i=(e,r)=>t(n[e],n[r]);let s,o;return(e=Uint32Array.from(n,((e,t)=>t))).sort(t===r?(e,t)=>Q(n[e],n[t]):X(i)),e.forEach(((e,t)=>{const n=i(e,void 0===s?e:s);n>=0?((void 0===s||n>0)&&(s=e,o=t),a[e]=o):a[e]=NaN})),a}function Pe(e,t=r){let n,a=!1;if(1===t.length){let i;for(const s of e){const e=t(s);(a?r(e,i)<0:0===r(e,e))&&(n=s,i=e,a=!0)}}else for(const r of e)(a?t(r,n)<0:0===t(r,r))&&(n=r,a=!0);return n}function Ee(e,t=r){if(1===t.length)return pe(e,t);let n,a=-1,i=-1;for(const r of e)++i,(a<0?0===t(r,r):t(r,n)<0)&&(n=r,a=i);return a}function Ne(e,t=r){if(1===t.length)return me(e,t);let n,a=-1,i=-1;for(const r of e)++i,(a<0?0===t(r,r):t(r,n)>0)&&(n=r,a=i);return a}function Je(e,t){const n=Ee(e,t);return n<0?void 0:n}const We=ze(Math.random);function ze(e){return function(t,n=0,r=t.length){let a=r-(n=+n);for(;a;){const r=e()*a--|0,i=t[a+n];t[a+n]=t[r+n],t[r+n]=i}return t}}function Ce(e,t){let n=0;if(void 0===t)for(let t of e)(t=+t)&&(n+=t);else{let r=-1;for(let a of e)(a=+t(a,++r,e))&&(n+=a)}return n}function Re(e){if(!(a=e.length))return[];for(var t=-1,n=ye(e,Ie),r=new Array(n);++t<n;)for(var a,i=-1,s=r[t]=new Array(a);++i<a;)s[i]=e[i][t];return r}function Ie(e){return e.length}function Ue(){return Re(arguments)}function $e(e,t){if("function"!=typeof t)throw new TypeError("test is not a function");let n=-1;for(const r of e)if(!t(r,++n,e))return!1;return!0}function qe(e,t){if("function"!=typeof t)throw new TypeError("test is not a function");let n=-1;for(const r of e)if(t(r,++n,e))return!0;return!1}function Be(e,t){if("function"!=typeof t)throw new TypeError("test is not a function");const n=[];let r=-1;for(const a of e)t(a,++r,e)&&n.push(a);return n}function Ge(e,t){if("function"!=typeof e[Symbol.iterator])throw new TypeError("values is not iterable");if("function"!=typeof t)throw new TypeError("mapper is not a function");return Array.from(e,((n,r)=>t(n,r,e)))}function Ve(e,t,n){if("function"!=typeof t)throw new TypeError("reducer is not a function");const r=e[Symbol.iterator]();let a,i,s=-1;if(arguments.length<3){if(({done:a,value:n}=r.next()),a)return;++s}for(;({done:a,value:i}=r.next()),!a;)n=t(n,i,++s,e);return n}function Ze(e){if("function"!=typeof e[Symbol.iterator])throw new TypeError("values is not iterable");return Array.from(e).reverse()}function Ke(e,...t){e=new F(e);for(const n of t)for(const t of n)e.delete(t);return e}function Xe(e,t){const n=t[Symbol.iterator](),r=new F;for(const t of e){if(r.has(t))return!1;let e,a;for(;({value:e,done:a}=n.next())&&!a;){if(Object.is(t,e))return!1;r.add(e)}}return!0}function Qe(e,...t){e=new F(e),t=t.map(et);e:for(const n of e)for(const r of t)if(!r.has(n)){e.delete(n);continue e}return e}function et(e){return e instanceof F?e:new F(e)}function tt(e,t){const n=e[Symbol.iterator](),r=new Set;for(const e of t){const t=nt(e);if(r.has(t))continue;let a,i;for(;({value:a,done:i}=n.next());){if(i)return!1;const e=nt(a);if(r.add(e),Object.is(t,e))break}}return!0}function nt(e){return null!==e&&"object"==typeof e?e.valueOf():e}function rt(e,t){return tt(t,e)}function at(...e){const t=new F;for(const n of e)for(const e of n)t.add(e);return t}function it(e){return e}var st=1,ot=2,ut=3,dt=4,lt=1e-6;function ct(e){return"translate("+e+",0)"}function _t(e){return"translate(0,"+e+")"}function ft(e){return t=>+e(t)}function ht(e,t){return t=Math.max(0,e.bandwidth()-2*t)/2,e.round()&&(t=Math.round(t)),n=>+e(n)+t}function mt(){return!this.__axis}function yt(e,t){var n=[],r=null,a=null,i=6,s=6,o=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,d=e===st||e===dt?-1:1,l=e===dt||e===ot?"x":"y",c=e===st||e===ut?ct:_t;function _(_){var f=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,h=null==a?t.tickFormat?t.tickFormat.apply(t,n):it:a,m=Math.max(i,0)+o,y=t.range(),p=+y[0]+u,M=+y[y.length-1]+u,g=(t.bandwidth?ht:ft)(t.copy(),u),L=_.selection?_.selection():_,Y=L.selectAll(".domain").data([null]),v=L.selectAll(".tick").data(f,t).order(),b=v.exit(),w=v.enter().append("g").attr("class","tick"),k=v.select("line"),D=v.select("text");Y=Y.merge(Y.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),v=v.merge(w),k=k.merge(w.append("line").attr("stroke","currentColor").attr(l+"2",d*i)),D=D.merge(w.append("text").attr("fill","currentColor").attr(l,d*m).attr("dy",e===st?"0em":e===ut?"0.71em":"0.32em")),_!==L&&(Y=Y.transition(_),v=v.transition(_),k=k.transition(_),D=D.transition(_),b=b.transition(_).attr("opacity",lt).attr("transform",(function(e){return isFinite(e=g(e))?c(e+u):this.getAttribute("transform")})),w.attr("opacity",lt).attr("transform",(function(e){var t=this.parentNode.__axis;return c((t&&isFinite(t=t(e))?t:g(e))+u)}))),b.remove(),Y.attr("d",e===dt||e===ot?s?"M"+d*s+","+p+"H"+u+"V"+M+"H"+d*s:"M"+u+","+p+"V"+M:s?"M"+p+","+d*s+"V"+u+"H"+M+"V"+d*s:"M"+p+","+u+"H"+M),v.attr("opacity",1).attr("transform",(function(e){return c(g(e)+u)})),k.attr(l+"2",d*i),D.attr(l,d*m).text(h),L.filter(mt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",e===ot?"start":e===dt?"end":"middle"),L.each((function(){this.__axis=g}))}return _.scale=function(e){return arguments.length?(t=e,_):t},_.ticks=function(){return n=Array.from(arguments),_},_.tickArguments=function(e){return arguments.length?(n=null==e?[]:Array.from(e),_):n.slice()},_.tickValues=function(e){return arguments.length?(r=null==e?null:Array.from(e),_):r&&r.slice()},_.tickFormat=function(e){return arguments.length?(a=e,_):a},_.tickSize=function(e){return arguments.length?(i=s=+e,_):i},_.tickSizeInner=function(e){return arguments.length?(i=+e,_):i},_.tickSizeOuter=function(e){return arguments.length?(s=+e,_):s},_.tickPadding=function(e){return arguments.length?(o=+e,_):o},_.offset=function(e){return arguments.length?(u=+e,_):u},_}function pt(e){return yt(st,e)}function Mt(e){return yt(ot,e)}function gt(e){return yt(ut,e)}function Lt(e){return yt(dt,e)}var Yt={value:()=>{}};function vt(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new bt(r)}function bt(e){this._=e}function wt(e,t){for(var n,r=0,a=e.length;r<a;++r)if((n=e[r]).name===t)return n.value}function kt(e,t,n){for(var r=0,a=e.length;r<a;++r)if(e[r].name===t){e[r]=Yt,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}bt.prototype=vt.prototype={constructor:bt,on:function(e,t){var n,r,a=this._,i=(r=a,(e+"").trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");if(n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),e&&!r.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:t}}))),s=-1,o=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++s<o;)if(n=(e=i[s]).type)a[n]=kt(a[n],e.name,t);else if(null==t)for(n in a)a[n]=kt(a[n],e.name,null);return this}for(;++s<o;)if((n=(e=i[s]).type)&&(n=wt(a[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new bt(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(r=this._[e]).length;i<n;++i)r[i].value.apply(t,a)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],a=0,i=r.length;a<i;++a)r[a].value.apply(t,n)}};const Dt=vt;function Tt(){}function xt(e){return null==e?Tt:function(){return this.querySelector(e)}}function St(e){return null==e?[]:Array.isArray(e)?e:Array.from(e)}function At(){return[]}function Ht(e){return null==e?At:function(){return this.querySelectorAll(e)}}function jt(e){return function(){return this.matches(e)}}function Ft(e){return function(t){return t.matches(e)}}var Ot=Array.prototype.find;function Pt(){return this.firstElementChild}var Et=Array.prototype.filter;function Nt(){return Array.from(this.children)}function Jt(e){return new Array(e.length)}function Wt(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function zt(e,t,n,r,a,i){for(var s,o=0,u=t.length,d=i.length;o<d;++o)(s=t[o])?(s.__data__=i[o],r[o]=s):n[o]=new Wt(e,i[o]);for(;o<u;++o)(s=t[o])&&(a[o]=s)}function Ct(e,t,n,r,a,i,s){var o,u,d,l=new Map,c=t.length,_=i.length,f=new Array(c);for(o=0;o<c;++o)(u=t[o])&&(f[o]=d=s.call(u,u.__data__,o,t)+"",l.has(d)?a[o]=u:l.set(d,u));for(o=0;o<_;++o)d=s.call(e,i[o],o,i)+"",(u=l.get(d))?(r[o]=u,u.__data__=i[o],l.delete(d)):n[o]=new Wt(e,i[o]);for(o=0;o<c;++o)(u=t[o])&&l.get(f[o])===u&&(a[o]=u)}function Rt(e){return e.__data__}function It(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function Ut(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}Wt.prototype={constructor:Wt,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var $t="http://www.w3.org/1999/xhtml";const qt={svg:"http://www.w3.org/2000/svg",xhtml:$t,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Bt(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),qt.hasOwnProperty(t)?{space:qt[t],local:e}:e}function Gt(e){return function(){this.removeAttribute(e)}}function Vt(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Zt(e,t){return function(){this.setAttribute(e,t)}}function Kt(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function Xt(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function Qt(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function en(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function tn(e){return function(){this.style.removeProperty(e)}}function nn(e,t,n){return function(){this.style.setProperty(e,t,n)}}function rn(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function an(e,t){return e.style.getPropertyValue(t)||en(e).getComputedStyle(e,null).getPropertyValue(t)}function sn(e){return function(){delete this[e]}}function on(e,t){return function(){this[e]=t}}function un(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function dn(e){return e.trim().split(/^|\s+/)}function ln(e){return e.classList||new cn(e)}function cn(e){this._node=e,this._names=dn(e.getAttribute("class")||"")}function _n(e,t){for(var n=ln(e),r=-1,a=t.length;++r<a;)n.add(t[r])}function fn(e,t){for(var n=ln(e),r=-1,a=t.length;++r<a;)n.remove(t[r])}function hn(e){return function(){_n(this,e)}}function mn(e){return function(){fn(this,e)}}function yn(e,t){return function(){(t.apply(this,arguments)?_n:fn)(this,e)}}function pn(){this.textContent=""}function Mn(e){return function(){this.textContent=e}}function gn(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function Ln(){this.innerHTML=""}function Yn(e){return function(){this.innerHTML=e}}function vn(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function bn(){this.nextSibling&&this.parentNode.appendChild(this)}function wn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function kn(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===$t&&t.documentElement.namespaceURI===$t?t.createElement(e):t.createElementNS(n,e)}}function Dn(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function Tn(e){var t=Bt(e);return(t.local?Dn:kn)(t)}function xn(){return null}function Sn(){var e=this.parentNode;e&&e.removeChild(this)}function An(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function Hn(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function jn(e){return function(){var t=this.__on;if(t){for(var n,r=0,a=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++a]=n:this.removeEventListener(n.type,n.listener,n.options);++a?t.length=a:delete this.__on}}}function Fn(e,t,n){return function(){var r,a=this.__on,i=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(a)for(var s=0,o=a.length;s<o;++s)if((r=a[s]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=t);this.addEventListener(e.type,i,n),r={type:e.type,name:e.name,value:t,listener:i,options:n},a?a.push(r):this.__on=[r]}}function On(e,t,n){var r=en(e),a=r.CustomEvent;"function"==typeof a?a=new a(t,n):(a=r.document.createEvent("Event"),n?(a.initEvent(t,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(t,!1,!1)),e.dispatchEvent(a)}function Pn(e,t){return function(){return On(this,e,t)}}function En(e,t){return function(){return On(this,e,t.apply(this,arguments))}}cn.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var Nn=[null];function Jn(e,t){this._groups=e,this._parents=t}function Wn(){return new Jn([[document.documentElement]],Nn)}Jn.prototype=Wn.prototype={constructor:Jn,select:function(e){"function"!=typeof e&&(e=xt(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,s,o=t[a],u=o.length,d=r[a]=new Array(u),l=0;l<u;++l)(i=o[l])&&(s=e.call(i,i.__data__,l,o))&&("__data__"in i&&(s.__data__=i.__data__),d[l]=s);return new Jn(r,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){return St(e.apply(this,arguments))}}(e):Ht(e);for(var t=this._groups,n=t.length,r=[],a=[],i=0;i<n;++i)for(var s,o=t[i],u=o.length,d=0;d<u;++d)(s=o[d])&&(r.push(e.call(s,s.__data__,d,o)),a.push(s));return new Jn(r,a)},selectChild:function(e){return this.select(null==e?Pt:function(e){return function(){return Ot.call(this.children,e)}}("function"==typeof e?e:Ft(e)))},selectChildren:function(e){return this.selectAll(null==e?Nt:function(e){return function(){return Et.call(this.children,e)}}("function"==typeof e?e:Ft(e)))},filter:function(e){"function"!=typeof e&&(e=jt(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,s=t[a],o=s.length,u=r[a]=[],d=0;d<o;++d)(i=s[d])&&e.call(i,i.__data__,d,s)&&u.push(i);return new Jn(r,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,Rt);var n,r=t?Ct:zt,a=this._parents,i=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var s=i.length,o=new Array(s),u=new Array(s),d=new Array(s),l=0;l<s;++l){var c=a[l],_=i[l],f=_.length,h=It(e.call(c,c&&c.__data__,l,a)),m=h.length,y=u[l]=new Array(m),p=o[l]=new Array(m);r(c,_,y,p,d[l]=new Array(f),h,t);for(var M,g,L=0,Y=0;L<m;++L)if(M=y[L]){for(L>=Y&&(Y=L+1);!(g=p[Y])&&++Y<m;);M._next=g||null}}return(o=new Jn(o,a))._enter=u,o._exit=d,o},enter:function(){return new Jn(this._enter||this._groups.map(Jt),this._parents)},exit:function(){return new Jn(this._exit||this._groups.map(Jt),this._parents)},join:function(e,t,n){var r=this.enter(),a=this,i=this.exit();return"function"==typeof e?(r=e(r))&&(r=r.selection()):r=r.append(e+""),null!=t&&(a=t(a))&&(a=a.selection()),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(e){for(var t=e.selection?e.selection():e,n=this._groups,r=t._groups,a=n.length,i=r.length,s=Math.min(a,i),o=new Array(a),u=0;u<s;++u)for(var d,l=n[u],c=r[u],_=l.length,f=o[u]=new Array(_),h=0;h<_;++h)(d=l[h]||c[h])&&(f[h]=d);for(;u<a;++u)o[u]=n[u];return new Jn(o,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,a=e[t],i=a.length-1,s=a[i];--i>=0;)(r=a[i])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=Ut);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var s,o=n[i],u=o.length,d=a[i]=new Array(u),l=0;l<u;++l)(s=o[l])&&(d[l]=s);d.sort(t)}return new Jn(a,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],a=0,i=r.length;a<i;++a){var s=r[a];if(s)return s}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var a,i=t[n],s=0,o=i.length;s<o;++s)(a=i[s])&&e.call(a,a.__data__,s,i);return this},attr:function(e,t){var n=Bt(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Vt:Gt:"function"==typeof t?n.local?Qt:Xt:n.local?Kt:Zt)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?tn:"function"==typeof t?rn:nn)(e,t,null==n?"":n)):an(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?sn:"function"==typeof t?un:on)(e,t)):this.node()[e]},classed:function(e,t){var n=dn(e+"");if(arguments.length<2){for(var r=ln(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof t?yn:t?hn:mn)(n,t))},text:function(e){return arguments.length?this.each(null==e?pn:("function"==typeof e?gn:Mn)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?Ln:("function"==typeof e?vn:Yn)(e)):this.node().innerHTML},raise:function(){return this.each(bn)},lower:function(){return this.each(wn)},append:function(e){var t="function"==typeof e?e:Tn(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:Tn(e),r=null==t?xn:"function"==typeof t?t:xt(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Sn)},clone:function(e){return this.select(e?Hn:An)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,a,i=function(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}(e+""),s=i.length;if(!(arguments.length<2)){for(o=t?Fn:jn,r=0;r<s;++r)this.each(o(i[r],t,n));return this}var o=this.node().__on;if(o)for(var u,d=0,l=o.length;d<l;++d)for(r=0,u=o[d];r<s;++r)if((a=i[r]).type===u.type&&a.name===u.name)return u.value},dispatch:function(e,t){return this.each(("function"==typeof t?En:Pn)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r,a=e[t],i=0,s=a.length;i<s;++i)(r=a[i])&&(yield r)}};const zn=Wn;function Cn(e){return"string"==typeof e?new Jn([[document.querySelector(e)]],[document.documentElement]):new Jn([[e]],Nn)}const Rn={passive:!1},In={capture:!0,passive:!1};function Un(e){e.stopImmediatePropagation()}function $n(e){e.preventDefault(),e.stopImmediatePropagation()}function qn(e){var t=e.document.documentElement,n=Cn(e).on("dragstart.drag",$n,In);"onselectstart"in t?n.on("selectstart.drag",$n,In):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}function Bn(e,t){var n=e.document.documentElement,r=Cn(e).on("dragstart.drag",null);t&&(r.on("click.drag",$n,In),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function Gn(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function Vn(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Zn(){}var Kn=.7,Xn=1/Kn,Qn="\\s*([+-]?\\d+)\\s*",er="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",tr="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",nr=/^#([0-9a-f]{3,8})$/,rr=new RegExp(`^rgb\\(${Qn},${Qn},${Qn}\\)$`),ar=new RegExp(`^rgb\\(${tr},${tr},${tr}\\)$`),ir=new RegExp(`^rgba\\(${Qn},${Qn},${Qn},${er}\\)$`),sr=new RegExp(`^rgba\\(${tr},${tr},${tr},${er}\\)$`),or=new RegExp(`^hsl\\(${er},${tr},${tr}\\)$`),ur=new RegExp(`^hsla\\(${er},${tr},${tr},${er}\\)$`),dr={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function lr(){return this.rgb().formatHex()}function cr(){return this.rgb().formatRgb()}function _r(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=nr.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?fr(t):3===n?new pr(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?hr(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?hr(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=rr.exec(e))?new pr(t[1],t[2],t[3],1):(t=ar.exec(e))?new pr(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=ir.exec(e))?hr(t[1],t[2],t[3],t[4]):(t=sr.exec(e))?hr(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=or.exec(e))?br(t[1],t[2]/100,t[3]/100,1):(t=ur.exec(e))?br(t[1],t[2]/100,t[3]/100,t[4]):dr.hasOwnProperty(e)?fr(dr[e]):"transparent"===e?new pr(NaN,NaN,NaN,0):null}function fr(e){return new pr(e>>16&255,e>>8&255,255&e,1)}function hr(e,t,n,r){return r<=0&&(e=t=n=NaN),new pr(e,t,n,r)}function mr(e){return e instanceof Zn||(e=_r(e)),e?new pr((e=e.rgb()).r,e.g,e.b,e.opacity):new pr}function yr(e,t,n,r){return 1===arguments.length?mr(e):new pr(e,t,n,null==r?1:r)}function pr(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function Mr(){return`#${vr(this.r)}${vr(this.g)}${vr(this.b)}`}function gr(){const e=Lr(this.opacity);return`${1===e?"rgb(":"rgba("}${Yr(this.r)}, ${Yr(this.g)}, ${Yr(this.b)}${1===e?")":`, ${e})`}`}function Lr(e){return isNaN(e)?1:Math.max(0,Math.min(1,e))}function Yr(e){return Math.max(0,Math.min(255,Math.round(e)||0))}function vr(e){return((e=Yr(e))<16?"0":"")+e.toString(16)}function br(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Dr(e,t,n,r)}function wr(e){if(e instanceof Dr)return new Dr(e.h,e.s,e.l,e.opacity);if(e instanceof Zn||(e=_r(e)),!e)return new Dr;if(e instanceof Dr)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,a=Math.min(t,n,r),i=Math.max(t,n,r),s=NaN,o=i-a,u=(i+a)/2;return o?(s=t===i?(n-r)/o+6*(n<r):n===i?(r-t)/o+2:(t-n)/o+4,o/=u<.5?i+a:2-i-a,s*=60):o=u>0&&u<1?0:s,new Dr(s,o,u,e.opacity)}function kr(e,t,n,r){return 1===arguments.length?wr(e):new Dr(e,t,n,null==r?1:r)}function Dr(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function Tr(e){return(e=(e||0)%360)<0?e+360:e}function xr(e){return Math.max(0,Math.min(1,e||0))}function Sr(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function Ar(e,t,n,r,a){var i=e*e,s=i*e;return((1-3*e+3*i-s)*t+(4-6*i+3*s)*n+(1+3*e+3*i-3*s)*r+s*a)/6}function Hr(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),a=e[r],i=e[r+1],s=r>0?e[r-1]:2*a-i,o=r<t-1?e[r+2]:2*i-a;return Ar((n-r/t)*t,s,a,i,o)}}function jr(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),a=e[(r+t-1)%t],i=e[r%t],s=e[(r+1)%t],o=e[(r+2)%t];return Ar((n-r/t)*t,a,i,s,o)}}Gn(Zn,_r,{copy(e){return Object.assign(new this.constructor,this,e)},displayable(){return this.rgb().displayable()},hex:lr,formatHex:lr,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return wr(this).formatHsl()},formatRgb:cr,toString:cr}),Gn(pr,yr,Vn(Zn,{brighter(e){return e=null==e?Xn:Math.pow(Xn,e),new pr(this.r*e,this.g*e,this.b*e,this.opacity)},darker(e){return e=null==e?Kn:Math.pow(Kn,e),new pr(this.r*e,this.g*e,this.b*e,this.opacity)},rgb(){return this},clamp(){return new pr(Yr(this.r),Yr(this.g),Yr(this.b),Lr(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Mr,formatHex:Mr,formatHex8:function(){return`#${vr(this.r)}${vr(this.g)}${vr(this.b)}${vr(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:gr,toString:gr})),Gn(Dr,kr,Vn(Zn,{brighter(e){return e=null==e?Xn:Math.pow(Xn,e),new Dr(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=null==e?Kn:Math.pow(Kn,e),new Dr(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,a=2*n-r;return new pr(Sr(e>=240?e-240:e+120,a,r),Sr(e,a,r),Sr(e<120?e+240:e-120,a,r),this.opacity)},clamp(){return new Dr(Tr(this.h),xr(this.s),xr(this.l),Lr(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const e=Lr(this.opacity);return`${1===e?"hsl(":"hsla("}${Tr(this.h)}, ${100*xr(this.s)}%, ${100*xr(this.l)}%${1===e?")":`, ${e})`}`}}));const Fr=e=>()=>e;function Or(e,t){return function(n){return e+n*t}}function Pr(e,t){var n=t-e;return n?Or(e,n>180||n<-180?n-360*Math.round(n/360):n):Fr(isNaN(e)?t:e)}function Er(e,t){var n=t-e;return n?Or(e,n):Fr(isNaN(e)?t:e)}const Nr=function e(t){var n=function(e){return 1==(e=+e)?Er:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Fr(isNaN(t)?n:t)}}(t);function r(e,t){var r=n((e=yr(e)).r,(t=yr(t)).r),a=n(e.g,t.g),i=n(e.b,t.b),s=Er(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=a(t),e.b=i(t),e.opacity=s(t),e+""}}return r.gamma=e,r}(1);function Jr(e){return function(t){var n,r,a=t.length,i=new Array(a),s=new Array(a),o=new Array(a);for(n=0;n<a;++n)r=yr(t[n]),i[n]=r.r||0,s[n]=r.g||0,o[n]=r.b||0;return i=e(i),s=e(s),o=e(o),r.opacity=1,function(e){return r.r=i(e),r.g=s(e),r.b=o(e),r+""}}}var Wr=Jr(Hr),zr=Jr(jr);function Cr(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,a=t.slice();return function(i){for(n=0;n<r;++n)a[n]=e[n]*(1-i)+t[n]*i;return a}}function Rr(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function Ir(e,t){return(Rr(t)?Cr:Ur)(e,t)}function Ur(e,t){var n,r=t?t.length:0,a=e?Math.min(r,e.length):0,i=new Array(a),s=new Array(r);for(n=0;n<a;++n)i[n]=Kr(e[n],t[n]);for(;n<r;++n)s[n]=t[n];return function(e){for(n=0;n<a;++n)s[n]=i[n](e);return s}}function $r(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}}function qr(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}function Br(e,t){var n,r={},a={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=Kr(e[n],t[n]):a[n]=t[n];return function(e){for(n in r)a[n]=r[n](e);return a}}var Gr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Vr=new RegExp(Gr.source,"g");function Zr(e,t){var n,r,a,i=Gr.lastIndex=Vr.lastIndex=0,s=-1,o=[],u=[];for(e+="",t+="";(n=Gr.exec(e))&&(r=Vr.exec(t));)(a=r.index)>i&&(a=t.slice(i,a),o[s]?o[s]+=a:o[++s]=a),(n=n[0])===(r=r[0])?o[s]?o[s]+=r:o[++s]=r:(o[++s]=null,u.push({i:s,x:qr(n,r)})),i=Vr.lastIndex;return i<t.length&&(a=t.slice(i),o[s]?o[s]+=a:o[++s]=a),o.length<2?u[0]?function(e){return function(t){return e(t)+""}}(u[0].x):function(e){return function(){return e}}(t):(t=u.length,function(e){for(var n,r=0;r<t;++r)o[(n=u[r]).i]=n.x(e);return o.join("")})}function Kr(e,t){var n,r=typeof t;return null==t||"boolean"===r?Fr(t):("number"===r?qr:"string"===r?(n=_r(t))?(t=n,Nr):Zr:t instanceof _r?Nr:t instanceof Date?$r:Rr(t)?Cr:Array.isArray(t)?Ur:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?Br:qr)(e,t)}function Xr(e){let t;for(;t=e.sourceEvent;)e=t;return e}function Qr(e,t){if(e=Xr(e),void 0===t&&(t=e.currentTarget),t){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}if(t.getBoundingClientRect){var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]}}return[e.pageX,e.pageY]}var ea,ta,na=0,ra=0,aa=0,ia=0,sa=0,oa=0,ua="object"==typeof performance&&performance.now?performance:Date,da="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function la(){return sa||(da(ca),sa=ua.now()+oa)}function ca(){sa=0}function _a(){this._call=this._time=this._next=null}function fa(e,t,n){var r=new _a;return r.restart(e,t,n),r}function ha(){la(),++na;for(var e,t=ea;t;)(e=sa-t._time)>=0&&t._call.call(void 0,e),t=t._next;--na}function ma(){sa=(ia=ua.now())+oa,na=ra=0;try{ha()}finally{na=0,function(){for(var e,t,n=ea,r=1/0;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:ea=t);ta=e,pa(r)}(),sa=0}}function ya(){var e=ua.now(),t=e-ia;t>1e3&&(oa-=t,ia=e)}function pa(e){na||(ra&&(ra=clearTimeout(ra)),e-sa>24?(e<1/0&&(ra=setTimeout(ma,e-ua.now()-oa)),aa&&(aa=clearInterval(aa))):(aa||(ia=ua.now(),aa=setInterval(ya,1e3)),na=1,da(ma)))}function Ma(e,t,n){var r=new _a;return t=null==t?0:+t,r.restart((n=>{r.stop(),e(n+t)}),t,n),r}_a.prototype=fa.prototype={constructor:_a,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?la():+n)+(null==t?0:+t),this._next||ta===this||(ta?ta._next=this:ea=this,ta=this),this._call=e,this._time=n,pa()},stop:function(){this._call&&(this._call=null,this._time=1/0,pa())}};var ga=Dt("start","end","cancel","interrupt"),La=[],Ya=1,va=2,ba=5,wa=6;function ka(e,t,n,r,a,i){var s=e.__transition;if(s){if(n in s)return}else e.__transition={};!function(e,t,n){var r,a=e.__transition;function i(u){var d,l,c,_;if(n.state!==Ya)return o();for(d in a)if((_=a[d]).name===n.name){if(3===_.state)return Ma(i);4===_.state?(_.state=wa,_.timer.stop(),_.on.call("interrupt",e,e.__data__,_.index,_.group),delete a[d]):+d<t&&(_.state=wa,_.timer.stop(),_.on.call("cancel",e,e.__data__,_.index,_.group),delete a[d])}if(Ma((function(){3===n.state&&(n.state=4,n.timer.restart(s,n.delay,n.time),s(u))})),n.state=va,n.on.call("start",e,e.__data__,n.index,n.group),n.state===va){for(n.state=3,r=new Array(c=n.tween.length),d=0,l=-1;d<c;++d)(_=n.tween[d].value.call(e,e.__data__,n.index,n.group))&&(r[++l]=_);r.length=l+1}}function s(t){for(var a=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(o),n.state=ba,1),i=-1,s=r.length;++i<s;)r[i].call(e,a);n.state===ba&&(n.on.call("end",e,e.__data__,n.index,n.group),o())}function o(){for(var r in n.state=wa,n.timer.stop(),delete a[t],a)return;delete e.__transition}a[t]=n,n.timer=fa((function(e){n.state=Ya,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:a,on:ga,tween:La,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function Da(e,t){var n=xa(e,t);if(n.state>0)throw new Error("too late; already scheduled");return n}function Ta(e,t){var n=xa(e,t);if(n.state>3)throw new Error("too late; already running");return n}function xa(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function Sa(e,t){var n,r,a,i=e.__transition,s=!0;if(i){for(a in t=null==t?null:t+"",i)(n=i[a]).name===t?(r=n.state>va&&n.state<ba,n.state=wa,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete i[a]):s=!1;s&&delete e.__transition}}var Aa,Ha=180/Math.PI,ja={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Fa(e,t,n,r,a,i){var s,o,u;return(s=Math.sqrt(e*e+t*t))&&(e/=s,t/=s),(u=e*n+t*r)&&(n-=e*u,r-=t*u),(o=Math.sqrt(n*n+r*r))&&(n/=o,r/=o,u/=o),e*r<t*n&&(e=-e,t=-t,u=-u,s=-s),{translateX:a,translateY:i,rotate:Math.atan2(t,e)*Ha,skewX:Math.atan(u)*Ha,scaleX:s,scaleY:o}}function Oa(e,t,n,r){function a(e){return e.length?e.pop()+" ":""}return function(i,s){var o=[],u=[];return i=e(i),s=e(s),function(e,r,a,i,s,o){if(e!==a||r!==i){var u=s.push("translate(",null,t,null,n);o.push({i:u-4,x:qr(e,a)},{i:u-2,x:qr(r,i)})}else(a||i)&&s.push("translate("+a+t+i+n)}(i.translateX,i.translateY,s.translateX,s.translateY,o,u),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:qr(e,t)})):t&&n.push(a(n)+"rotate("+t+r)}(i.rotate,s.rotate,o,u),function(e,t,n,i){e!==t?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:qr(e,t)}):t&&n.push(a(n)+"skewX("+t+r)}(i.skewX,s.skewX,o,u),function(e,t,n,r,i,s){if(e!==n||t!==r){var o=i.push(a(i)+"scale(",null,",",null,")");s.push({i:o-4,x:qr(e,n)},{i:o-2,x:qr(t,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,s.scaleX,s.scaleY,o,u),i=s=null,function(e){for(var t,n=-1,r=u.length;++n<r;)o[(t=u[n]).i]=t.x(e);return o.join("")}}}var Pa=Oa((function(e){const t=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(e+"");return t.isIdentity?ja:Fa(t.a,t.b,t.c,t.d,t.e,t.f)}),"px, ","px)","deg)"),Ea=Oa((function(e){return null==e?ja:(Aa||(Aa=document.createElementNS("http://www.w3.org/2000/svg","g")),Aa.setAttribute("transform",e),(e=Aa.transform.baseVal.consolidate())?Fa((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):ja)}),", ",")",")");function Na(e,t){var n,r;return function(){var a=Ta(this,e),i=a.tween;if(i!==n)for(var s=0,o=(r=n=i).length;s<o;++s)if(r[s].name===t){(r=r.slice()).splice(s,1);break}a.tween=r}}function Ja(e,t,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=Ta(this,e),s=i.tween;if(s!==r){a=(r=s).slice();for(var o={name:t,value:n},u=0,d=a.length;u<d;++u)if(a[u].name===t){a[u]=o;break}u===d&&a.push(o)}i.tween=a}}function Wa(e,t,n){var r=e._id;return e.each((function(){var e=Ta(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return xa(e,r).value[t]}}function za(e,t){var n;return("number"==typeof t?qr:t instanceof _r?Nr:(n=_r(t))?(t=n,Nr):Zr)(e,t)}function Ca(e){return function(){this.removeAttribute(e)}}function Ra(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Ia(e,t,n){var r,a,i=n+"";return function(){var s=this.getAttribute(e);return s===i?null:s===r?a:a=t(r=s,n)}}function Ua(e,t,n){var r,a,i=n+"";return function(){var s=this.getAttributeNS(e.space,e.local);return s===i?null:s===r?a:a=t(r=s,n)}}function $a(e,t,n){var r,a,i;return function(){var s,o,u=n(this);if(null!=u)return(s=this.getAttribute(e))===(o=u+"")?null:s===r&&o===a?i:(a=o,i=t(r=s,u));this.removeAttribute(e)}}function qa(e,t,n){var r,a,i;return function(){var s,o,u=n(this);if(null!=u)return(s=this.getAttributeNS(e.space,e.local))===(o=u+"")?null:s===r&&o===a?i:(a=o,i=t(r=s,u));this.removeAttributeNS(e.space,e.local)}}function Ba(e,t){var n,r;function a(){var a=t.apply(this,arguments);return a!==r&&(n=(r=a)&&function(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}(e,a)),n}return a._value=t,a}function Ga(e,t){var n,r;function a(){var a=t.apply(this,arguments);return a!==r&&(n=(r=a)&&function(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}(e,a)),n}return a._value=t,a}function Va(e,t){return function(){Da(this,e).delay=+t.apply(this,arguments)}}function Za(e,t){return t=+t,function(){Da(this,e).delay=t}}function Ka(e,t){return function(){Ta(this,e).duration=+t.apply(this,arguments)}}function Xa(e,t){return t=+t,function(){Ta(this,e).duration=t}}var Qa=zn.prototype.constructor;function ei(e){return function(){this.style.removeProperty(e)}}var ti=0;function ni(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function ri(e){return zn().transition(e)}function ai(){return++ti}var ii=zn.prototype;function si(e){return e*e*e}function oi(e){return--e*e*e+1}function ui(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}ni.prototype=ri.prototype={constructor:ni,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=xt(e));for(var r=this._groups,a=r.length,i=new Array(a),s=0;s<a;++s)for(var o,u,d=r[s],l=d.length,c=i[s]=new Array(l),_=0;_<l;++_)(o=d[_])&&(u=e.call(o,o.__data__,_,d))&&("__data__"in o&&(u.__data__=o.__data__),c[_]=u,ka(c[_],t,n,_,c,xa(o,n)));return new ni(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Ht(e));for(var r=this._groups,a=r.length,i=[],s=[],o=0;o<a;++o)for(var u,d=r[o],l=d.length,c=0;c<l;++c)if(u=d[c]){for(var _,f=e.call(u,u.__data__,c,d),h=xa(u,n),m=0,y=f.length;m<y;++m)(_=f[m])&&ka(_,t,n,m,f,h);i.push(f),s.push(u)}return new ni(i,s,t,n)},selectChild:ii.selectChild,selectChildren:ii.selectChildren,filter:function(e){"function"!=typeof e&&(e=jt(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,s=t[a],o=s.length,u=r[a]=[],d=0;d<o;++d)(i=s[d])&&e.call(i,i.__data__,d,s)&&u.push(i);return new ni(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,a=n.length,i=Math.min(r,a),s=new Array(r),o=0;o<i;++o)for(var u,d=t[o],l=n[o],c=d.length,_=s[o]=new Array(c),f=0;f<c;++f)(u=d[f]||l[f])&&(_[f]=u);for(;o<r;++o)s[o]=t[o];return new ni(s,this._parents,this._name,this._id)},selection:function(){return new Qa(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=ai(),r=this._groups,a=r.length,i=0;i<a;++i)for(var s,o=r[i],u=o.length,d=0;d<u;++d)if(s=o[d]){var l=xa(s,t);ka(s,e,n,d,o,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new ni(r,this._parents,e,n)},call:ii.call,nodes:ii.nodes,node:ii.node,size:ii.size,empty:ii.empty,each:ii.each,on:function(e,t){var n=this._id;return arguments.length<2?xa(this.node(),n).on.on(e):this.each(function(e,t,n){var r,a,i=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?Da:Ta;return function(){var s=i(this,e),o=s.on;o!==r&&(a=(r=o).copy()).on(t,n),s.on=a}}(n,e,t))},attr:function(e,t){var n=Bt(e),r="transform"===n?Ea:za;return this.attrTween(e,"function"==typeof t?(n.local?qa:$a)(n,r,Wa(this,"attr."+e,t)):null==t?(n.local?Ra:Ca)(n):(n.local?Ua:Ia)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=Bt(e);return this.tween(n,(r.local?Ba:Ga)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?Pa:za;return null==t?this.styleTween(e,function(e,t){var n,r,a;return function(){var i=an(this,e),s=(this.style.removeProperty(e),an(this,e));return i===s?null:i===n&&s===r?a:a=t(n=i,r=s)}}(e,r)).on("end.style."+e,ei(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,a,i;return function(){var s=an(this,e),o=n(this),u=o+"";return null==o&&(this.style.removeProperty(e),u=o=an(this,e)),s===u?null:s===r&&u===a?i:(a=u,i=t(r=s,o))}}(e,r,Wa(this,"style."+e,t))).each(function(e,t){var n,r,a,i,s="style."+t,o="end."+s;return function(){var u=Ta(this,e),d=u.on,l=null==u.value[s]?i||(i=ei(t)):void 0;d===n&&a===l||(r=(n=d).copy()).on(o,a=l),u.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,a,i=n+"";return function(){var s=an(this,e);return s===i?null:s===r?a:a=t(r=s,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,function(e,t,n){var r,a;function i(){var i=t.apply(this,arguments);return i!==a&&(r=(a=i)&&function(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}(e,i,n)),r}return i._value=t,i}(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Wa(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,function(e){var t,n;function r(){var r=e.apply(this,arguments);return r!==n&&(t=(n=r)&&function(e){return function(t){this.textContent=e.call(this,t)}}(r)),t}return r._value=e,r}(e))},remove:function(){return this.on("end.remove",function(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}(this._id))},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,a=xa(this.node(),n).tween,i=0,s=a.length;i<s;++i)if((r=a[i]).name===e)return r.value;return null}return this.each((null==t?Na:Ja)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Va:Za)(t,e)):xa(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Ka:Xa)(t,e)):xa(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if("function"!=typeof t)throw new Error;return function(){Ta(this,e).ease=t}}(t,e)):xa(this.node(),t).ease},easeVarying:function(e){if("function"!=typeof e)throw new Error;return this.each(function(e,t){return function(){var n=t.apply(this,arguments);if("function"!=typeof n)throw new Error;Ta(this,e).ease=n}}(this._id,e))},end:function(){var e,t,n=this,r=n._id,a=n.size();return new Promise((function(i,s){var o={value:s},u={value:function(){0==--a&&i()}};n.each((function(){var n=Ta(this,r),a=n.on;a!==e&&((t=(e=a).copy())._.cancel.push(o),t._.interrupt.push(o),t._.end.push(u)),n.on=t})),0===a&&i()}))},[Symbol.iterator]:ii[Symbol.iterator]};var di={time:null,delay:0,duration:250,ease:ui};function li(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))throw new Error(`transition ${t} not found`);return n}zn.prototype.interrupt=function(e){return this.each((function(){Sa(this,e)}))},zn.prototype.transition=function(e){var t,n;e instanceof ni?(t=e._id,e=e._name):(t=ai(),(n=di).time=la(),e=null==e?null:e+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var s,o=r[i],u=o.length,d=0;d<u;++d)(s=o[d])&&ka(s,e,t,d,o,n||li(s,t));return new ni(r,this._parents,e,t)};var ci=[null];function _i(e,t){var n,r,a=e.__transition;if(a)for(r in t=null==t?null:t+"",a)if((n=a[r]).state>Ya&&n.name===t)return new ni([[e]],ci,t,+r);return null}const fi=e=>()=>e;function hi(e,{sourceEvent:t,target:n,selection:r,mode:a,dispatch:i}){Object.defineProperties(this,{type:{value:e,enumerable:!0,configurable:!0},sourceEvent:{value:t,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},selection:{value:r,enumerable:!0,configurable:!0},mode:{value:a,enumerable:!0,configurable:!0},_:{value:i}})}function mi(e){e.preventDefault(),e.stopImmediatePropagation()}var yi={name:"drag"},pi={name:"space"},Mi={name:"handle"},gi={name:"center"};const{abs:Li,max:Yi,min:vi}=Math;function bi(e){return[+e[0],+e[1]]}function wi(e){return[bi(e[0]),bi(e[1])]}var ki={name:"x",handles:["w","e"].map(Fi),input:function(e,t){return null==e?null:[[+e[0],t[0][1]],[+e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},Di={name:"y",handles:["n","s"].map(Fi),input:function(e,t){return null==e?null:[[t[0][0],+e[0]],[t[1][0],+e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},Ti={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Fi),input:function(e){return null==e?null:wi(e)},output:function(e){return e}},xi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Si={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Ai={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Hi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},ji={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Fi(e){return{type:e}}function Oi(e){return!e.ctrlKey&&!e.button}function Pi(){var e=this.ownerSVGElement||this;return e.hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function Ei(){return navigator.maxTouchPoints||"ontouchstart"in this}function Ni(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function Ji(e){var t=e.__brush;return t?t.dim.output(t.selection):null}function Wi(){return Ri(ki)}function zi(){return Ri(Di)}function Ci(){return Ri(Ti)}function Ri(e){var t,n=Pi,r=Oi,a=Ei,i=!0,s=Dt("start","brush","end"),o=6;function u(t){var n=t.property("__brush",m).selectAll(".overlay").data([Fi("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",xi.overlay).merge(n).each((function(){var e=Ni(this).extent;Cn(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])})),t.selectAll(".selection").data([Fi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",xi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,(function(e){return e.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(e){return"handle handle--"+e.type})).attr("cursor",(function(e){return xi[e.type]})),t.each(d).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",_).filter(a).on("touchstart.brush",_).on("touchmove.brush",f).on("touchend.brush touchcancel.brush",h).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){var e=Cn(this),t=Ni(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",(function(e){return"e"===e.type[e.type.length-1]?t[1][0]-o/2:t[0][0]-o/2})).attr("y",(function(e){return"s"===e.type[0]?t[1][1]-o/2:t[0][1]-o/2})).attr("width",(function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+o:o})).attr("height",(function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+o:o}))):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function l(e,t,n){var r=e.__brush.emitter;return!r||n&&r.clean?new c(e,t,n):r}function c(e,t,n){this.that=e,this.args=t,this.state=e.__brush,this.active=0,this.clean=n}function _(n){if((!t||n.touches)&&r.apply(this,arguments)){var a,s,o,u,c,_,f,h,m,y,p,M=this,g=n.target.__data__.type,L="selection"===(i&&n.metaKey?g="overlay":g)?yi:i&&n.altKey?gi:Mi,Y=e===Di?null:Hi[g],v=e===ki?null:ji[g],b=Ni(M),w=b.extent,k=b.selection,D=w[0][0],T=w[0][1],x=w[1][0],S=w[1][1],A=0,H=0,j=Y&&v&&i&&n.shiftKey,F=Array.from(n.touches||[n],(e=>{const t=e.identifier;return(e=Qr(e,M)).point0=e.slice(),e.identifier=t,e}));Sa(M);var O=l(M,arguments,!0).beforestart();if("overlay"===g){k&&(m=!0);const t=[F[0],F[1]||F[0]];b.selection=k=[[a=e===Di?D:vi(t[0][0],t[1][0]),o=e===ki?T:vi(t[0][1],t[1][1])],[c=e===Di?x:Yi(t[0][0],t[1][0]),f=e===ki?S:Yi(t[0][1],t[1][1])]],F.length>1&&W(n)}else a=k[0][0],o=k[0][1],c=k[1][0],f=k[1][1];s=a,u=o,_=c,h=f;var P=Cn(M).attr("pointer-events","none"),E=P.selectAll(".overlay").attr("cursor",xi[g]);if(n.touches)O.moved=J,O.ended=z;else{var N=Cn(n.view).on("mousemove.brush",J,!0).on("mouseup.brush",z,!0);i&&N.on("keydown.brush",(function(e){switch(e.keyCode){case 16:j=Y&&v;break;case 18:L===Mi&&(Y&&(c=_-A*Y,a=s+A*Y),v&&(f=h-H*v,o=u+H*v),L=gi,W(e));break;case 32:L!==Mi&&L!==gi||(Y<0?c=_-A:Y>0&&(a=s-A),v<0?f=h-H:v>0&&(o=u-H),L=pi,E.attr("cursor",xi.selection),W(e));break;default:return}mi(e)}),!0).on("keyup.brush",(function(e){switch(e.keyCode){case 16:j&&(y=p=j=!1,W(e));break;case 18:L===gi&&(Y<0?c=_:Y>0&&(a=s),v<0?f=h:v>0&&(o=u),L=Mi,W(e));break;case 32:L===pi&&(e.altKey?(Y&&(c=_-A*Y,a=s+A*Y),v&&(f=h-H*v,o=u+H*v),L=gi):(Y<0?c=_:Y>0&&(a=s),v<0?f=h:v>0&&(o=u),L=Mi),E.attr("cursor",xi[g]),W(e));break;default:return}mi(e)}),!0),qn(n.view)}d.call(M),O.start(n,L.name)}function J(e){for(const t of e.changedTouches||[e])for(const e of F)e.identifier===t.identifier&&(e.cur=Qr(t,M));if(j&&!y&&!p&&1===F.length){const e=F[0];Li(e.cur[0]-e[0])>Li(e.cur[1]-e[1])?p=!0:y=!0}for(const e of F)e.cur&&(e[0]=e.cur[0],e[1]=e.cur[1]);m=!0,mi(e),W(e)}function W(e){const t=F[0],n=t.point0;var r;switch(A=t[0]-n[0],H=t[1]-n[1],L){case pi:case yi:Y&&(A=Yi(D-a,vi(x-c,A)),s=a+A,_=c+A),v&&(H=Yi(T-o,vi(S-f,H)),u=o+H,h=f+H);break;case Mi:F[1]?(Y&&(s=Yi(D,vi(x,F[0][0])),_=Yi(D,vi(x,F[1][0])),Y=1),v&&(u=Yi(T,vi(S,F[0][1])),h=Yi(T,vi(S,F[1][1])),v=1)):(Y<0?(A=Yi(D-a,vi(x-a,A)),s=a+A,_=c):Y>0&&(A=Yi(D-c,vi(x-c,A)),s=a,_=c+A),v<0?(H=Yi(T-o,vi(S-o,H)),u=o+H,h=f):v>0&&(H=Yi(T-f,vi(S-f,H)),u=o,h=f+H));break;case gi:Y&&(s=Yi(D,vi(x,a-A*Y)),_=Yi(D,vi(x,c+A*Y))),v&&(u=Yi(T,vi(S,o-H*v)),h=Yi(T,vi(S,f+H*v)))}_<s&&(Y*=-1,r=a,a=c,c=r,r=s,s=_,_=r,g in Si&&E.attr("cursor",xi[g=Si[g]])),h<u&&(v*=-1,r=o,o=f,f=r,r=u,u=h,h=r,g in Ai&&E.attr("cursor",xi[g=Ai[g]])),b.selection&&(k=b.selection),y&&(s=k[0][0],_=k[1][0]),p&&(u=k[0][1],h=k[1][1]),k[0][0]===s&&k[0][1]===u&&k[1][0]===_&&k[1][1]===h||(b.selection=[[s,u],[_,h]],d.call(M),O.brush(e,L.name))}function z(e){if(function(e){e.stopImmediatePropagation()}(e),e.touches){if(e.touches.length)return;t&&clearTimeout(t),t=setTimeout((function(){t=null}),500)}else Bn(e.view,m),N.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),E.attr("cursor",xi.overlay),b.selection&&(k=b.selection),function(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}(k)&&(b.selection=null,d.call(M)),O.end(e,L.name)}}function f(e){l(this,arguments).moved(e)}function h(e){l(this,arguments).ended(e)}function m(){var t=this.__brush||{selection:null};return t.extent=wi(n.apply(this,arguments)),t.dim=e,t}return u.move=function(t,n,r){t.tween?t.on("start.brush",(function(e){l(this,arguments).beforestart().start(e)})).on("interrupt.brush end.brush",(function(e){l(this,arguments).end(e)})).tween("brush",(function(){var t=this,r=t.__brush,a=l(t,arguments),i=r.selection,s=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),o=Kr(i,s);function u(e){r.selection=1===e&&null===s?null:o(e),d.call(t),a.brush()}return null!==i&&null!==s?u:u(1)})):t.each((function(){var t=this,a=arguments,i=t.__brush,s=e.input("function"==typeof n?n.apply(t,a):n,i.extent),o=l(t,a).beforestart();Sa(t),i.selection=null===s?null:s,d.call(t),o.start(r).brush(r).end(r)}))},u.clear=function(e,t){u.move(e,null,t)},c.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(e,t){return this.starting?(this.starting=!1,this.emit("start",e,t)):this.emit("brush",e),this},brush:function(e,t){return this.emit("brush",e,t),this},end:function(e,t){return 0==--this.active&&(delete this.state.emitter,this.emit("end",e,t)),this},emit:function(t,n,r){var a=Cn(this.that).datum();s.call(t,this.that,new hi(t,{sourceEvent:n,target:u,selection:e.output(this.state.selection),mode:r,dispatch:s}),a)}},u.extent=function(e){return arguments.length?(n="function"==typeof e?e:fi(wi(e)),u):n},u.filter=function(e){return arguments.length?(r="function"==typeof e?e:fi(!!e),u):r},u.touchable=function(e){return arguments.length?(a="function"==typeof e?e:fi(!!e),u):a},u.handleSize=function(e){return arguments.length?(o=+e,u):o},u.keyModifiers=function(e){return arguments.length?(i=!!e,u):i},u.on=function(){var e=s.on.apply(s,arguments);return e===s?u:e},u}var Ii=Math.abs,Ui=Math.cos,$i=Math.sin,qi=Math.PI,Bi=qi/2,Gi=2*qi,Vi=Math.max,Zi=1e-12;function Ki(e,t){return Array.from({length:t-e},((t,n)=>e+n))}function Xi(){return ts(!1,!1)}function Qi(){return ts(!1,!0)}function es(){return ts(!0,!1)}function ts(e,t){var n=0,r=null,a=null,i=null;function s(s){var o,u=s.length,d=new Array(u),l=Ki(0,u),c=new Array(u*u),_=new Array(u),f=0;s=Float64Array.from({length:u*u},t?(e,t)=>s[t%u][t/u|0]:(e,t)=>s[t/u|0][t%u]);for(let t=0;t<u;++t){let n=0;for(let r=0;r<u;++r)n+=s[t*u+r]+e*s[r*u+t];f+=d[t]=n}o=(f=Vi(0,Gi-n*u)/f)?n:Gi/u;{let t=0;r&&l.sort(((e,t)=>r(d[e],d[t])));for(const n of l){const r=t;if(e){const e=Ki(1+~u,u).filter((e=>e<0?s[~e*u+n]:s[n*u+e]));a&&e.sort(((e,t)=>a(e<0?-s[~e*u+n]:s[n*u+e],t<0?-s[~t*u+n]:s[n*u+t])));for(const r of e)r<0?(c[~r*u+n]||(c[~r*u+n]={source:null,target:null})).target={index:n,startAngle:t,endAngle:t+=s[~r*u+n]*f,value:s[~r*u+n]}:(c[n*u+r]||(c[n*u+r]={source:null,target:null})).source={index:n,startAngle:t,endAngle:t+=s[n*u+r]*f,value:s[n*u+r]};_[n]={index:n,startAngle:r,endAngle:t,value:d[n]}}else{const e=Ki(0,u).filter((e=>s[n*u+e]||s[e*u+n]));a&&e.sort(((e,t)=>a(s[n*u+e],s[n*u+t])));for(const r of e){let e;if(n<r?(e=c[n*u+r]||(c[n*u+r]={source:null,target:null}),e.source={index:n,startAngle:t,endAngle:t+=s[n*u+r]*f,value:s[n*u+r]}):(e=c[r*u+n]||(c[r*u+n]={source:null,target:null}),e.target={index:n,startAngle:t,endAngle:t+=s[n*u+r]*f,value:s[n*u+r]},n===r&&(e.source=e.target)),e.source&&e.target&&e.source.value<e.target.value){const t=e.source;e.source=e.target,e.target=t}}_[n]={index:n,startAngle:r,endAngle:t,value:d[n]}}t+=o}}return(c=Object.values(c)).groups=_,i?c.sort(i):c}return s.padAngle=function(e){return arguments.length?(n=Vi(0,e),s):n},s.sortGroups=function(e){return arguments.length?(r=e,s):r},s.sortSubgroups=function(e){return arguments.length?(a=e,s):a},s.sortChords=function(e){return arguments.length?(null==e?i=null:(t=e,i=function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)})._=e,s):i&&i._;var t},s}const ns=Math.PI,rs=2*ns,as=1e-6,is=rs-as;function ss(e){this._+=e[0];for(let t=1,n=e.length;t<n;++t)this._+=arguments[t]+e[t]}class os{constructor(e){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==e?ss:function(e){let t=Math.floor(e);if(!(t>=0))throw new Error(`invalid digits: ${e}`);if(t>15)return ss;const n=10**t;return function(e){this._+=e[0];for(let t=1,r=e.length;t<r;++t)this._+=Math.round(arguments[t]*n)/n+e[t]}}(e)}moveTo(e,t){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(e,t){this._append`L${this._x1=+e},${this._y1=+t}`}quadraticCurveTo(e,t,n,r){this._append`Q${+e},${+t},${this._x1=+n},${this._y1=+r}`}bezierCurveTo(e,t,n,r,a,i){this._append`C${+e},${+t},${+n},${+r},${this._x1=+a},${this._y1=+i}`}arcTo(e,t,n,r,a){if(e=+e,t=+t,n=+n,r=+r,(a=+a)<0)throw new Error(`negative radius: ${a}`);let i=this._x1,s=this._y1,o=n-e,u=r-t,d=i-e,l=s-t,c=d*d+l*l;if(null===this._x1)this._append`M${this._x1=e},${this._y1=t}`;else if(c>as)if(Math.abs(l*o-u*d)>as&&a){let _=n-i,f=r-s,h=o*o+u*u,m=_*_+f*f,y=Math.sqrt(h),p=Math.sqrt(c),M=a*Math.tan((ns-Math.acos((h+c-m)/(2*y*p)))/2),g=M/p,L=M/y;Math.abs(g-1)>as&&this._append`L${e+g*d},${t+g*l}`,this._append`A${a},${a},0,0,${+(l*_>d*f)},${this._x1=e+L*o},${this._y1=t+L*u}`}else this._append`L${this._x1=e},${this._y1=t}`}arc(e,t,n,r,a,i){if(e=+e,t=+t,i=!!i,(n=+n)<0)throw new Error(`negative radius: ${n}`);let s=n*Math.cos(r),o=n*Math.sin(r),u=e+s,d=t+o,l=1^i,c=i?r-a:a-r;null===this._x1?this._append`M${u},${d}`:(Math.abs(this._x1-u)>as||Math.abs(this._y1-d)>as)&&this._append`L${u},${d}`,n&&(c<0&&(c=c%rs+rs),c>is?this._append`A${n},${n},0,1,${l},${e-s},${t-o}A${n},${n},0,1,${l},${this._x1=u},${this._y1=d}`:c>as&&this._append`A${n},${n},0,${+(c>=ns)},${l},${this._x1=e+n*Math.cos(a)},${this._y1=t+n*Math.sin(a)}`)}rect(e,t,n,r){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}h${n=+n}v${+r}h${-n}Z`}toString(){return this._}}function us(){return new os}function ds(e=3){return new os(+e)}us.prototype=os.prototype;var ls=Array.prototype.slice;function cs(e){return function(){return e}}function _s(e){return e.source}function fs(e){return e.target}function hs(e){return e.radius}function ms(e){return e.startAngle}function ys(e){return e.endAngle}function ps(){return 0}function Ms(){return 10}function gs(e){var t=_s,n=fs,r=hs,a=hs,i=ms,s=ys,o=ps,u=null;function d(){var d,l=t.apply(this,arguments),c=n.apply(this,arguments),_=o.apply(this,arguments)/2,f=ls.call(arguments),h=+r.apply(this,(f[0]=l,f)),m=i.apply(this,f)-Bi,y=s.apply(this,f)-Bi,p=+a.apply(this,(f[0]=c,f)),M=i.apply(this,f)-Bi,g=s.apply(this,f)-Bi;if(u||(u=d=us()),_>Zi&&(Ii(y-m)>2*_+Zi?y>m?(m+=_,y-=_):(m-=_,y+=_):m=y=(m+y)/2,Ii(g-M)>2*_+Zi?g>M?(M+=_,g-=_):(M-=_,g+=_):M=g=(M+g)/2),u.moveTo(h*Ui(m),h*$i(m)),u.arc(0,0,h,m,y),m!==M||y!==g)if(e){var L=p-+e.apply(this,arguments),Y=(M+g)/2;u.quadraticCurveTo(0,0,L*Ui(M),L*$i(M)),u.lineTo(p*Ui(Y),p*$i(Y)),u.lineTo(L*Ui(g),L*$i(g))}else u.quadraticCurveTo(0,0,p*Ui(M),p*$i(M)),u.arc(0,0,p,M,g);if(u.quadraticCurveTo(0,0,h*Ui(m),h*$i(m)),u.closePath(),d)return u=null,d+""||null}return e&&(d.headRadius=function(t){return arguments.length?(e="function"==typeof t?t:cs(+t),d):e}),d.radius=function(e){return arguments.length?(r=a="function"==typeof e?e:cs(+e),d):r},d.sourceRadius=function(e){return arguments.length?(r="function"==typeof e?e:cs(+e),d):r},d.targetRadius=function(e){return arguments.length?(a="function"==typeof e?e:cs(+e),d):a},d.startAngle=function(e){return arguments.length?(i="function"==typeof e?e:cs(+e),d):i},d.endAngle=function(e){return arguments.length?(s="function"==typeof e?e:cs(+e),d):s},d.padAngle=function(e){return arguments.length?(o="function"==typeof e?e:cs(+e),d):o},d.source=function(e){return arguments.length?(t=e,d):t},d.target=function(e){return arguments.length?(n=e,d):n},d.context=function(e){return arguments.length?(u=null==e?null:e,d):u},d}function Ls(){return gs()}function Ys(){return gs(Ms)}const vs=Math.PI/180,bs=180/Math.PI,ws=.96422,ks=1,Ds=.82521,Ts=4/29,xs=6/29,Ss=3*xs*xs,As=xs*xs*xs;function Hs(e){if(e instanceof Os)return new Os(e.l,e.a,e.b,e.opacity);if(e instanceof Rs)return Is(e);e instanceof pr||(e=mr(e));var t,n,r=Js(e.r),a=Js(e.g),i=Js(e.b),s=Ps((.2225045*r+.7168786*a+.0606169*i)/ks);return r===a&&a===i?t=n=s:(t=Ps((.4360747*r+.3850649*a+.1430804*i)/ws),n=Ps((.0139322*r+.0971045*a+.7141733*i)/Ds)),new Os(116*s-16,500*(t-s),200*(s-n),e.opacity)}function js(e,t){return new Os(e,0,0,null==t?1:t)}function Fs(e,t,n,r){return 1===arguments.length?Hs(e):new Os(e,t,n,null==r?1:r)}function Os(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function Ps(e){return e>As?Math.pow(e,1/3):e/Ss+Ts}function Es(e){return e>xs?e*e*e:Ss*(e-Ts)}function Ns(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function Js(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function Ws(e){if(e instanceof Rs)return new Rs(e.h,e.c,e.l,e.opacity);if(e instanceof Os||(e=Hs(e)),0===e.a&&0===e.b)return new Rs(NaN,0<e.l&&e.l<100?0:NaN,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*bs;return new Rs(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function zs(e,t,n,r){return 1===arguments.length?Ws(e):new Rs(n,t,e,null==r?1:r)}function Cs(e,t,n,r){return 1===arguments.length?Ws(e):new Rs(e,t,n,null==r?1:r)}function Rs(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}function Is(e){if(isNaN(e.h))return new Os(e.l,0,0,e.opacity);var t=e.h*vs;return new Os(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}Gn(Os,Fs,Vn(Zn,{brighter(e){return new Os(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker(e){return new Os(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new pr(Ns(3.1338561*(t=ws*Es(t))-1.6168667*(e=ks*Es(e))-.4906146*(n=Ds*Es(n))),Ns(-.9787684*t+1.9161415*e+.033454*n),Ns(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),Gn(Rs,Cs,Vn(Zn,{brighter(e){return new Rs(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker(e){return new Rs(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb(){return Is(this).rgb()}}));var Us=-.14861,$s=1.78277,qs=-.29227,Bs=-.90649,Gs=1.97294,Vs=Gs*Bs,Zs=Gs*$s,Ks=$s*qs-Bs*Us;function Xs(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof Qs)return new Qs(e.h,e.s,e.l,e.opacity);e instanceof pr||(e=mr(e));var t=e.r/255,n=e.g/255,r=e.b/255,a=(Ks*r+Vs*t-Zs*n)/(Ks+Vs-Zs),i=r-a,s=(Gs*(n-a)-qs*i)/Bs,o=Math.sqrt(s*s+i*i)/(Gs*a*(1-a)),u=o?Math.atan2(s,i)*bs-120:NaN;return new Qs(u<0?u+360:u,o,a,e.opacity)}(e):new Qs(e,t,n,null==r?1:r)}function Qs(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}Gn(Qs,Xs,Vn(Zn,{brighter(e){return e=null==e?Xn:Math.pow(Xn,e),new Qs(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=null==e?Kn:Math.pow(Kn,e),new Qs(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=isNaN(this.h)?0:(this.h+120)*vs,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),a=Math.sin(e);return new pr(255*(t+n*(Us*r+$s*a)),255*(t+n*(qs*r+Bs*a)),255*(t+n*(Gs*r)),this.opacity)}}));var eo=Array.prototype.slice;function to(e,t){return e-t}const no=e=>()=>e;function ro(e,t){for(var n,r=-1,a=t.length;++r<a;)if(n=ao(e,t[r]))return n;return 0}function ao(e,t){for(var n=t[0],r=t[1],a=-1,i=0,s=e.length,o=s-1;i<s;o=i++){var u=e[i],d=u[0],l=u[1],c=e[o],_=c[0],f=c[1];if(io(u,c,t))return 0;l>r!=f>r&&n<(_-d)*(r-l)/(f-l)+d&&(a=-a)}return a}function io(e,t,n){var r,a,i,s;return function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])==(n[0]-e[0])*(t[1]-e[1])}(e,t,n)&&(a=e[r=+(e[0]===t[0])],i=n[r],s=t[r],a<=i&&i<=s||s<=i&&i<=a)}function so(){}var oo=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function uo(){var e=1,t=1,n=_e,r=o;function a(e){var t=n(e);if(Array.isArray(t))t=t.slice().sort(to);else{const n=x(e,lo);for(t=ue(...ce(n[0],n[1],t),t);t[t.length-1]>=n[1];)t.pop();for(;t[1]<n[0];)t.shift()}return t.map((t=>i(e,t)))}function i(n,a){const i=null==a?NaN:+a;if(isNaN(i))throw new Error(`invalid value: ${a}`);var o=[],u=[];return function(n,r,a){var i,o,u,d,l,c,_=new Array,f=new Array;for(i=o=-1,d=co(n[0],r),oo[d<<1].forEach(h);++i<e-1;)u=d,d=co(n[i+1],r),oo[u|d<<1].forEach(h);for(oo[0|d].forEach(h);++o<t-1;){for(i=-1,d=co(n[o*e+e],r),l=co(n[o*e],r),oo[d<<1|l<<2].forEach(h);++i<e-1;)u=d,d=co(n[o*e+e+i+1],r),c=l,l=co(n[o*e+i+1],r),oo[u|d<<1|l<<2|c<<3].forEach(h);oo[d|l<<3].forEach(h)}for(i=-1,l=n[o*e]>=r,oo[l<<2].forEach(h);++i<e-1;)c=l,l=co(n[o*e+i+1],r),oo[l<<2|c<<3].forEach(h);function h(e){var t,n,r=[e[0][0]+i,e[0][1]+o],u=[e[1][0]+i,e[1][1]+o],d=s(r),l=s(u);(t=f[d])?(n=_[l])?(delete f[t.end],delete _[n.start],t===n?(t.ring.push(u),a(t.ring)):_[t.start]=f[n.end]={start:t.start,end:n.end,ring:t.ring.concat(n.ring)}):(delete f[t.end],t.ring.push(u),f[t.end=l]=t):(t=_[l])?(n=f[d])?(delete _[t.start],delete f[n.end],t===n?(t.ring.push(u),a(t.ring)):_[n.start]=f[t.end]={start:n.start,end:t.end,ring:n.ring.concat(t.ring)}):(delete _[t.start],t.ring.unshift(r),_[t.start=d]=t):_[d]=f[l]={start:d,end:l,ring:[r,u]}}oo[l<<3].forEach(h)}(n,i,(function(e){r(e,n,i),function(e){for(var t=0,n=e.length,r=e[n-1][1]*e[0][0]-e[n-1][0]*e[0][1];++t<n;)r+=e[t-1][1]*e[t][0]-e[t-1][0]*e[t][1];return r}(e)>0?o.push([e]):u.push(e)})),u.forEach((function(e){for(var t,n=0,r=o.length;n<r;++n)if(-1!==ro((t=o[n])[0],e))return void t.push(e)})),{type:"MultiPolygon",value:a,coordinates:o}}function s(t){return 2*t[0]+t[1]*(e+1)*4}function o(n,r,a){n.forEach((function(n){var i=n[0],s=n[1],o=0|i,u=0|s,d=_o(r[u*e+o]);i>0&&i<e&&o===i&&(n[0]=fo(i,_o(r[u*e+o-1]),d,a)),s>0&&s<t&&u===s&&(n[1]=fo(s,_o(r[(u-1)*e+o]),d,a))}))}return a.contour=i,a.size=function(n){if(!arguments.length)return[e,t];var r=Math.floor(n[0]),i=Math.floor(n[1]);if(!(r>=0&&i>=0))throw new Error("invalid size");return e=r,t=i,a},a.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?no(eo.call(e)):no(e),a):n},a.smooth=function(e){return arguments.length?(r=e?o:so,a):r===o},a}function lo(e){return isFinite(e)?e:NaN}function co(e,t){return null!=e&&+e>=t}function _o(e){return null==e||isNaN(e=+e)?-1/0:e}function fo(e,t,n,r){const a=r-t,i=n-t,s=isFinite(a)||isFinite(i)?a/i:Math.sign(a)/Math.sign(i);return isNaN(s)?e:e+s-.5}function ho(e){return e[0]}function mo(e){return e[1]}function yo(){return 1}function po(){var e=ho,t=mo,n=yo,r=960,a=500,i=20,s=2,o=3*i,u=r+2*o>>s,d=a+2*o>>s,l=no(20);function c(r){var a=new Float32Array(u*d),l=Math.pow(2,-s),c=-1;for(const i of r){var _=(e(i,++c,r)+o)*l,f=(t(i,c,r)+o)*l,m=+n(i,c,r);if(m&&_>=0&&_<u&&f>=0&&f<d){var y=Math.floor(_),p=Math.floor(f),M=_-y-.5,g=f-p-.5;a[y+p*u]+=(1-M)*(1-g)*m,a[y+1+p*u]+=M*(1-g)*m,a[y+1+(p+1)*u]+=M*g*m,a[y+(p+1)*u]+=(1-M)*g*m}}return h({data:a,width:u,height:d},i*l),a}function _(e){var t=c(e),n=l(t),r=Math.pow(2,2*s);return Array.isArray(n)||(n=ue(Number.MIN_VALUE,he(t)/r,n)),uo().size([u,d]).thresholds(n.map((e=>e*r)))(t).map(((e,t)=>(e.value=+n[t],f(e))))}function f(e){return e.coordinates.forEach(m),e}function m(e){e.forEach(y)}function y(e){e.forEach(p)}function p(e){e[0]=e[0]*Math.pow(2,s)-o,e[1]=e[1]*Math.pow(2,s)-o}function M(){return u=r+2*(o=3*i)>>s,d=a+2*o>>s,_}return _.contours=function(e){var t=c(e),n=uo().size([u,d]),r=Math.pow(2,2*s),a=e=>{e=+e;var a=f(n.contour(t,e*r));return a.value=e,a};return Object.defineProperty(a,"max",{get:()=>he(t)/r}),a},_.x=function(t){return arguments.length?(e="function"==typeof t?t:no(+t),_):e},_.y=function(e){return arguments.length?(t="function"==typeof e?e:no(+e),_):t},_.weight=function(e){return arguments.length?(n="function"==typeof e?e:no(+e),_):n},_.size=function(e){if(!arguments.length)return[r,a];var t=+e[0],n=+e[1];if(!(t>=0&&n>=0))throw new Error("invalid size");return r=t,a=n,M()},_.cellSize=function(e){if(!arguments.length)return 1<<s;if(!((e=+e)>=1))throw new Error("invalid cell size");return s=Math.floor(Math.log(e)/Math.LN2),M()},_.thresholds=function(e){return arguments.length?(l="function"==typeof e?e:Array.isArray(e)?no(eo.call(e)):no(e),_):l},_.bandwidth=function(e){if(!arguments.length)return Math.sqrt(i*(i+1));if(!((e=+e)>=0))throw new Error("invalid bandwidth");return i=(Math.sqrt(4*e*e+1)-1)/2,M()},_}const Mo=134217729;function go(e,t,n,r,a){let i,s,o,u,d=t[0],l=r[0],c=0,_=0;l>d==l>-d?(i=d,d=t[++c]):(i=l,l=r[++_]);let f=0;if(c<e&&_<n)for(l>d==l>-d?(s=d+i,o=i-(s-d),d=t[++c]):(s=l+i,o=i-(s-l),l=r[++_]),i=s,0!==o&&(a[f++]=o);c<e&&_<n;)l>d==l>-d?(s=i+d,u=s-i,o=i-(s-u)+(d-u),d=t[++c]):(s=i+l,u=s-i,o=i-(s-u)+(l-u),l=r[++_]),i=s,0!==o&&(a[f++]=o);for(;c<e;)s=i+d,u=s-i,o=i-(s-u)+(d-u),d=t[++c],i=s,0!==o&&(a[f++]=o);for(;_<n;)s=i+l,u=s-i,o=i-(s-u)+(l-u),l=r[++_],i=s,0!==o&&(a[f++]=o);return 0===i&&0!==f||(a[f++]=i),f}function Lo(e){return new Float64Array(e)}const Yo=Lo(4),vo=Lo(8),bo=Lo(12),wo=Lo(16),ko=Lo(4);function Do(e,t,n,r,a,i){const s=(t-i)*(n-a),o=(e-a)*(r-i),u=s-o,d=Math.abs(s+o);return Math.abs(u)>=33306690738754716e-32*d?u:-function(e,t,n,r,a,i,s){let o,u,d,l,c,_,f,h,m,y,p,M,g,L,Y,v,b,w;const k=e-a,D=n-a,T=t-i,x=r-i;L=k*x,_=Mo*k,f=_-(_-k),h=k-f,_=Mo*x,m=_-(_-x),y=x-m,Y=h*y-(L-f*m-h*m-f*y),v=T*D,_=Mo*T,f=_-(_-T),h=T-f,_=Mo*D,m=_-(_-D),y=D-m,b=h*y-(v-f*m-h*m-f*y),p=Y-b,c=Y-p,Yo[0]=Y-(p+c)+(c-b),M=L+p,c=M-L,g=L-(M-c)+(p-c),p=g-v,c=g-p,Yo[1]=g-(p+c)+(c-v),w=M+p,c=w-M,Yo[2]=M-(w-c)+(p-c),Yo[3]=w;let S=function(e,t){let n=t[0];for(let e=1;e<4;e++)n+=t[e];return n}(0,Yo),A=22204460492503146e-32*s;if(S>=A||-S>=A)return S;if(c=e-k,o=e-(k+c)+(c-a),c=n-D,d=n-(D+c)+(c-a),c=t-T,u=t-(T+c)+(c-i),c=r-x,l=r-(x+c)+(c-i),0===o&&0===u&&0===d&&0===l)return S;if(A=11093356479670487e-47*s+33306690738754706e-32*Math.abs(S),S+=k*l+x*o-(T*d+D*u),S>=A||-S>=A)return S;L=o*x,_=Mo*o,f=_-(_-o),h=o-f,_=Mo*x,m=_-(_-x),y=x-m,Y=h*y-(L-f*m-h*m-f*y),v=u*D,_=Mo*u,f=_-(_-u),h=u-f,_=Mo*D,m=_-(_-D),y=D-m,b=h*y-(v-f*m-h*m-f*y),p=Y-b,c=Y-p,ko[0]=Y-(p+c)+(c-b),M=L+p,c=M-L,g=L-(M-c)+(p-c),p=g-v,c=g-p,ko[1]=g-(p+c)+(c-v),w=M+p,c=w-M,ko[2]=M-(w-c)+(p-c),ko[3]=w;const H=go(4,Yo,4,ko,vo);L=k*l,_=Mo*k,f=_-(_-k),h=k-f,_=Mo*l,m=_-(_-l),y=l-m,Y=h*y-(L-f*m-h*m-f*y),v=T*d,_=Mo*T,f=_-(_-T),h=T-f,_=Mo*d,m=_-(_-d),y=d-m,b=h*y-(v-f*m-h*m-f*y),p=Y-b,c=Y-p,ko[0]=Y-(p+c)+(c-b),M=L+p,c=M-L,g=L-(M-c)+(p-c),p=g-v,c=g-p,ko[1]=g-(p+c)+(c-v),w=M+p,c=w-M,ko[2]=M-(w-c)+(p-c),ko[3]=w;const j=go(H,vo,4,ko,bo);L=o*l,_=Mo*o,f=_-(_-o),h=o-f,_=Mo*l,m=_-(_-l),y=l-m,Y=h*y-(L-f*m-h*m-f*y),v=u*d,_=Mo*u,f=_-(_-u),h=u-f,_=Mo*d,m=_-(_-d),y=d-m,b=h*y-(v-f*m-h*m-f*y),p=Y-b,c=Y-p,ko[0]=Y-(p+c)+(c-b),M=L+p,c=M-L,g=L-(M-c)+(p-c),p=g-v,c=g-p,ko[1]=g-(p+c)+(c-v),w=M+p,c=w-M,ko[2]=M-(w-c)+(p-c),ko[3]=w;const F=go(j,bo,4,ko,wo);return wo[F-1]}(e,t,n,r,a,i,d)}Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(8),Lo(8),Lo(8),Lo(4),Lo(8),Lo(8),Lo(8),Lo(12),Lo(192),Lo(192),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(8),Lo(8),Lo(8),Lo(8),Lo(8),Lo(8),Lo(8),Lo(8),Lo(8),Lo(4),Lo(4),Lo(4),Lo(8),Lo(16),Lo(16),Lo(16),Lo(32),Lo(32),Lo(48),Lo(64),Lo(1152),Lo(1152),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(4),Lo(24),Lo(24),Lo(24),Lo(24),Lo(24),Lo(24),Lo(24),Lo(24),Lo(24),Lo(24),Lo(1152),Lo(1152),Lo(1152),Lo(1152),Lo(1152),Lo(2304),Lo(2304),Lo(3456),Lo(5760),Lo(8),Lo(8),Lo(8),Lo(16),Lo(24),Lo(48),Lo(48),Lo(96),Lo(192),Lo(384),Lo(384),Lo(384),Lo(768),Lo(96),Lo(96),Lo(96),Lo(1152);const To=Math.pow(2,-52),xo=new Uint32Array(512);class So{static from(e,t=Po,n=Eo){const r=e.length,a=new Float64Array(2*r);for(let i=0;i<r;i++){const r=e[i];a[2*i]=t(r),a[2*i+1]=n(r)}return new So(a)}constructor(e){const t=e.length>>1;if(t>0&&"number"!=typeof e[0])throw new Error("Expected coords to contain numbers.");this.coords=e;const n=Math.max(2*t-5,0);this._triangles=new Uint32Array(3*n),this._halfedges=new Int32Array(3*n),this._hashSize=Math.ceil(Math.sqrt(t)),this._hullPrev=new Uint32Array(t),this._hullNext=new Uint32Array(t),this._hullTri=new Uint32Array(t),this._hullHash=new Int32Array(this._hashSize),this._ids=new Uint32Array(t),this._dists=new Float64Array(t),this.update()}update(){const{coords:e,_hullPrev:t,_hullNext:n,_hullTri:r,_hullHash:a}=this,i=e.length>>1;let s=1/0,o=1/0,u=-1/0,d=-1/0;for(let t=0;t<i;t++){const n=e[2*t],r=e[2*t+1];n<s&&(s=n),r<o&&(o=r),n>u&&(u=n),r>d&&(d=r),this._ids[t]=t}const l=(s+u)/2,c=(o+d)/2;let _,f,h;for(let t=0,n=1/0;t<i;t++){const r=Ao(l,c,e[2*t],e[2*t+1]);r<n&&(_=t,n=r)}const m=e[2*_],y=e[2*_+1];for(let t=0,n=1/0;t<i;t++){if(t===_)continue;const r=Ao(m,y,e[2*t],e[2*t+1]);r<n&&r>0&&(f=t,n=r)}let p=e[2*f],M=e[2*f+1],g=1/0;for(let t=0;t<i;t++){if(t===_||t===f)continue;const n=jo(m,y,p,M,e[2*t],e[2*t+1]);n<g&&(h=t,g=n)}let L=e[2*h],Y=e[2*h+1];if(g===1/0){for(let t=0;t<i;t++)this._dists[t]=e[2*t]-e[0]||e[2*t+1]-e[1];Fo(this._ids,this._dists,0,i-1);const t=new Uint32Array(i);let n=0;for(let e=0,r=-1/0;e<i;e++){const a=this._ids[e],i=this._dists[a];i>r&&(t[n++]=a,r=i)}return this.hull=t.subarray(0,n),this.triangles=new Uint32Array(0),void(this.halfedges=new Uint32Array(0))}if(Do(m,y,p,M,L,Y)<0){const e=f,t=p,n=M;f=h,p=L,M=Y,h=e,L=t,Y=n}const v=function(e,t,n,r,a,i){const s=n-e,o=r-t,u=a-e,d=i-t,l=s*s+o*o,c=u*u+d*d,_=.5/(s*d-o*u);return{x:e+(d*l-o*c)*_,y:t+(s*c-u*l)*_}}(m,y,p,M,L,Y);this._cx=v.x,this._cy=v.y;for(let t=0;t<i;t++)this._dists[t]=Ao(e[2*t],e[2*t+1],v.x,v.y);Fo(this._ids,this._dists,0,i-1),this._hullStart=_;let b=3;n[_]=t[h]=f,n[f]=t[_]=h,n[h]=t[f]=_,r[_]=0,r[f]=1,r[h]=2,a.fill(-1),a[this._hashKey(m,y)]=_,a[this._hashKey(p,M)]=f,a[this._hashKey(L,Y)]=h,this.trianglesLen=0,this._addTriangle(_,f,h,-1,-1,-1);for(let i,s,o=0;o<this._ids.length;o++){const u=this._ids[o],d=e[2*u],l=e[2*u+1];if(o>0&&Math.abs(d-i)<=To&&Math.abs(l-s)<=To)continue;if(i=d,s=l,u===_||u===f||u===h)continue;let c=0;for(let e=0,t=this._hashKey(d,l);e<this._hashSize&&(c=a[(t+e)%this._hashSize],-1===c||c===n[c]);e++);c=t[c];let m,y=c;for(;m=n[y],Do(d,l,e[2*y],e[2*y+1],e[2*m],e[2*m+1])>=0;)if(y=m,y===c){y=-1;break}if(-1===y)continue;let p=this._addTriangle(y,u,n[y],-1,-1,r[y]);r[u]=this._legalize(p+2),r[y]=p,b++;let M=n[y];for(;m=n[M],Do(d,l,e[2*M],e[2*M+1],e[2*m],e[2*m+1])<0;)p=this._addTriangle(M,u,m,r[u],-1,r[M]),r[u]=this._legalize(p+2),n[M]=M,b--,M=m;if(y===c)for(;m=t[y],Do(d,l,e[2*m],e[2*m+1],e[2*y],e[2*y+1])<0;)p=this._addTriangle(m,u,y,-1,r[y],r[m]),this._legalize(p+2),r[m]=p,n[y]=y,b--,y=m;this._hullStart=t[u]=y,n[y]=t[M]=u,n[u]=M,a[this._hashKey(d,l)]=u,a[this._hashKey(e[2*y],e[2*y+1])]=y}this.hull=new Uint32Array(b);for(let e=0,t=this._hullStart;e<b;e++)this.hull[e]=t,t=n[t];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(e,t){return Math.floor(function(e,t){const n=e/(Math.abs(e)+Math.abs(t));return(t>0?3-n:1+n)/4}(e-this._cx,t-this._cy)*this._hashSize)%this._hashSize}_legalize(e){const{_triangles:t,_halfedges:n,coords:r}=this;let a=0,i=0;for(;;){const s=n[e],o=e-e%3;if(i=o+(e+2)%3,-1===s){if(0===a)break;e=xo[--a];continue}const u=s-s%3,d=o+(e+1)%3,l=u+(s+2)%3,c=t[i],_=t[e],f=t[d],h=t[l];if(Ho(r[2*c],r[2*c+1],r[2*_],r[2*_+1],r[2*f],r[2*f+1],r[2*h],r[2*h+1])){t[e]=h,t[s]=c;const r=n[l];if(-1===r){let t=this._hullStart;do{if(this._hullTri[t]===l){this._hullTri[t]=e;break}t=this._hullPrev[t]}while(t!==this._hullStart)}this._link(e,r),this._link(s,n[i]),this._link(i,l);const o=u+(s+1)%3;a<xo.length&&(xo[a++]=o)}else{if(0===a)break;e=xo[--a]}}return i}_link(e,t){this._halfedges[e]=t,-1!==t&&(this._halfedges[t]=e)}_addTriangle(e,t,n,r,a,i){const s=this.trianglesLen;return this._triangles[s]=e,this._triangles[s+1]=t,this._triangles[s+2]=n,this._link(s,r),this._link(s+1,a),this._link(s+2,i),this.trianglesLen+=3,s}}function Ao(e,t,n,r){const a=e-n,i=t-r;return a*a+i*i}function Ho(e,t,n,r,a,i,s,o){const u=e-s,d=t-o,l=n-s,c=r-o,_=a-s,f=i-o,h=l*l+c*c,m=_*_+f*f;return u*(c*m-h*f)-d*(l*m-h*_)+(u*u+d*d)*(l*f-c*_)<0}function jo(e,t,n,r,a,i){const s=n-e,o=r-t,u=a-e,d=i-t,l=s*s+o*o,c=u*u+d*d,_=.5/(s*d-o*u),f=(d*l-o*c)*_,h=(s*c-u*l)*_;return f*f+h*h}function Fo(e,t,n,r){if(r-n<=20)for(let a=n+1;a<=r;a++){const r=e[a],i=t[r];let s=a-1;for(;s>=n&&t[e[s]]>i;)e[s+1]=e[s--];e[s+1]=r}else{let a=n+1,i=r;Oo(e,n+r>>1,a),t[e[n]]>t[e[r]]&&Oo(e,n,r),t[e[a]]>t[e[r]]&&Oo(e,a,r),t[e[n]]>t[e[a]]&&Oo(e,n,a);const s=e[a],o=t[s];for(;;){do{a++}while(t[e[a]]<o);do{i--}while(t[e[i]]>o);if(i<a)break;Oo(e,a,i)}e[n+1]=e[i],e[i]=s,r-a+1>=i-n?(Fo(e,t,a,r),Fo(e,t,n,i-1)):(Fo(e,t,n,i-1),Fo(e,t,a,r))}}function Oo(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function Po(e){return e[0]}function Eo(e){return e[1]}const No=1e-6;class Jo{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(e,t){this._+=`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(e,t){this._+=`L${this._x1=+e},${this._y1=+t}`}arc(e,t,n){const r=(e=+e)+(n=+n),a=t=+t;if(n<0)throw new Error("negative radius");null===this._x1?this._+=`M${r},${a}`:(Math.abs(this._x1-r)>No||Math.abs(this._y1-a)>No)&&(this._+="L"+r+","+a),n&&(this._+=`A${n},${n},0,1,1,${e-n},${t}A${n},${n},0,1,1,${this._x1=r},${this._y1=a}`)}rect(e,t,n,r){this._+=`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}h${+n}v${+r}h${-n}Z`}value(){return this._||null}}class Wo{constructor(){this._=[]}moveTo(e,t){this._.push([e,t])}closePath(){this._.push(this._[0].slice())}lineTo(e,t){this._.push([e,t])}value(){return this._.length?this._:null}}class zo{constructor(e,[t,n,r,a]=[0,0,960,500]){if(!((r=+r)>=(t=+t)&&(a=+a)>=(n=+n)))throw new Error("invalid bounds");this.delaunay=e,this._circumcenters=new Float64Array(2*e.points.length),this.vectors=new Float64Array(2*e.points.length),this.xmax=r,this.xmin=t,this.ymax=a,this.ymin=n,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){const{delaunay:{points:e,hull:t,triangles:n},vectors:r}=this;let a,i;const s=this.circumcenters=this._circumcenters.subarray(0,n.length/3*2);for(let r,o,u=0,d=0,l=n.length;u<l;u+=3,d+=2){const l=2*n[u],c=2*n[u+1],_=2*n[u+2],f=e[l],h=e[l+1],m=e[c],y=e[c+1],p=e[_],M=e[_+1],g=m-f,L=y-h,Y=p-f,v=M-h,b=2*(g*v-L*Y);if(Math.abs(b)<1e-9){if(void 0===a){a=i=0;for(const n of t)a+=e[2*n],i+=e[2*n+1];a/=t.length,i/=t.length}const n=1e9*Math.sign((a-f)*v-(i-h)*Y);r=(f+p)/2-n*v,o=(h+M)/2+n*Y}else{const e=1/b,t=g*g+L*L,n=Y*Y+v*v;r=f+(v*t-L*n)*e,o=h+(g*n-Y*t)*e}s[d]=r,s[d+1]=o}let o,u,d,l=t[t.length-1],c=4*l,_=e[2*l],f=e[2*l+1];r.fill(0);for(let n=0;n<t.length;++n)l=t[n],o=c,u=_,d=f,c=4*l,_=e[2*l],f=e[2*l+1],r[o+2]=r[c]=d-f,r[o+3]=r[c+1]=_-u}render(e){const t=null==e?e=new Jo:void 0,{delaunay:{halfedges:n,inedges:r,hull:a},circumcenters:i,vectors:s}=this;if(a.length<=1)return null;for(let t=0,r=n.length;t<r;++t){const r=n[t];if(r<t)continue;const a=2*Math.floor(t/3),s=2*Math.floor(r/3),o=i[a],u=i[a+1],d=i[s],l=i[s+1];this._renderSegment(o,u,d,l,e)}let o,u=a[a.length-1];for(let t=0;t<a.length;++t){o=u,u=a[t];const n=2*Math.floor(r[u]/3),d=i[n],l=i[n+1],c=4*o,_=this._project(d,l,s[c+2],s[c+3]);_&&this._renderSegment(d,l,_[0],_[1],e)}return t&&t.value()}renderBounds(e){const t=null==e?e=new Jo:void 0;return e.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),t&&t.value()}renderCell(e,t){const n=null==t?t=new Jo:void 0,r=this._clip(e);if(null===r||!r.length)return;t.moveTo(r[0],r[1]);let a=r.length;for(;r[0]===r[a-2]&&r[1]===r[a-1]&&a>1;)a-=2;for(let e=2;e<a;e+=2)r[e]===r[e-2]&&r[e+1]===r[e-1]||t.lineTo(r[e],r[e+1]);return t.closePath(),n&&n.value()}*cellPolygons(){const{delaunay:{points:e}}=this;for(let t=0,n=e.length/2;t<n;++t){const e=this.cellPolygon(t);e&&(e.index=t,yield e)}}cellPolygon(e){const t=new Wo;return this.renderCell(e,t),t.value()}_renderSegment(e,t,n,r,a){let i;const s=this._regioncode(e,t),o=this._regioncode(n,r);0===s&&0===o?(a.moveTo(e,t),a.lineTo(n,r)):(i=this._clipSegment(e,t,n,r,s,o))&&(a.moveTo(i[0],i[1]),a.lineTo(i[2],i[3]))}contains(e,t,n){return(t=+t)==t&&(n=+n)==n&&this.delaunay._step(e,t,n)===e}*neighbors(e){const t=this._clip(e);if(t)for(const n of this.delaunay.neighbors(e)){const e=this._clip(n);if(e)e:for(let r=0,a=t.length;r<a;r+=2)for(let i=0,s=e.length;i<s;i+=2)if(t[r]===e[i]&&t[r+1]===e[i+1]&&t[(r+2)%a]===e[(i+s-2)%s]&&t[(r+3)%a]===e[(i+s-1)%s]){yield n;break e}}}_cell(e){const{circumcenters:t,delaunay:{inedges:n,halfedges:r,triangles:a}}=this,i=n[e];if(-1===i)return null;const s=[];let o=i;do{const n=Math.floor(o/3);if(s.push(t[2*n],t[2*n+1]),o=o%3==2?o-2:o+1,a[o]!==e)break;o=r[o]}while(o!==i&&-1!==o);return s}_clip(e){if(0===e&&1===this.delaunay.hull.length)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];const t=this._cell(e);if(null===t)return null;const{vectors:n}=this,r=4*e;return this._simplify(n[r]||n[r+1]?this._clipInfinite(e,t,n[r],n[r+1],n[r+2],n[r+3]):this._clipFinite(e,t))}_clipFinite(e,t){const n=t.length;let r,a,i,s,o=null,u=t[n-2],d=t[n-1],l=this._regioncode(u,d),c=0;for(let _=0;_<n;_+=2)if(r=u,a=d,u=t[_],d=t[_+1],i=l,l=this._regioncode(u,d),0===i&&0===l)s=c,c=0,o?o.push(u,d):o=[u,d];else{let t,n,_,f,h;if(0===i){if(null===(t=this._clipSegment(r,a,u,d,i,l)))continue;[n,_,f,h]=t}else{if(null===(t=this._clipSegment(u,d,r,a,l,i)))continue;[f,h,n,_]=t,s=c,c=this._edgecode(n,_),s&&c&&this._edge(e,s,c,o,o.length),o?o.push(n,_):o=[n,_]}s=c,c=this._edgecode(f,h),s&&c&&this._edge(e,s,c,o,o.length),o?o.push(f,h):o=[f,h]}if(o)s=c,c=this._edgecode(o[0],o[1]),s&&c&&this._edge(e,s,c,o,o.length);else if(this.contains(e,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return o}_clipSegment(e,t,n,r,a,i){const s=a<i;for(s&&([e,t,n,r,a,i]=[n,r,e,t,i,a]);;){if(0===a&&0===i)return s?[n,r,e,t]:[e,t,n,r];if(a&i)return null;let o,u,d=a||i;8&d?(o=e+(n-e)*(this.ymax-t)/(r-t),u=this.ymax):4&d?(o=e+(n-e)*(this.ymin-t)/(r-t),u=this.ymin):2&d?(u=t+(r-t)*(this.xmax-e)/(n-e),o=this.xmax):(u=t+(r-t)*(this.xmin-e)/(n-e),o=this.xmin),a?(e=o,t=u,a=this._regioncode(e,t)):(n=o,r=u,i=this._regioncode(n,r))}}_clipInfinite(e,t,n,r,a,i){let s,o=Array.from(t);if((s=this._project(o[0],o[1],n,r))&&o.unshift(s[0],s[1]),(s=this._project(o[o.length-2],o[o.length-1],a,i))&&o.push(s[0],s[1]),o=this._clipFinite(e,o))for(let t,n=0,r=o.length,a=this._edgecode(o[r-2],o[r-1]);n<r;n+=2)t=a,a=this._edgecode(o[n],o[n+1]),t&&a&&(n=this._edge(e,t,a,o,n),r=o.length);else this.contains(e,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(o=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return o}_edge(e,t,n,r,a){for(;t!==n;){let n,i;switch(t){case 5:t=4;continue;case 4:t=6,n=this.xmax,i=this.ymin;break;case 6:t=2;continue;case 2:t=10,n=this.xmax,i=this.ymax;break;case 10:t=8;continue;case 8:t=9,n=this.xmin,i=this.ymax;break;case 9:t=1;continue;case 1:t=5,n=this.xmin,i=this.ymin}r[a]===n&&r[a+1]===i||!this.contains(e,n,i)||(r.splice(a,0,n,i),a+=2)}return a}_project(e,t,n,r){let a,i,s,o=1/0;if(r<0){if(t<=this.ymin)return null;(a=(this.ymin-t)/r)<o&&(s=this.ymin,i=e+(o=a)*n)}else if(r>0){if(t>=this.ymax)return null;(a=(this.ymax-t)/r)<o&&(s=this.ymax,i=e+(o=a)*n)}if(n>0){if(e>=this.xmax)return null;(a=(this.xmax-e)/n)<o&&(i=this.xmax,s=t+(o=a)*r)}else if(n<0){if(e<=this.xmin)return null;(a=(this.xmin-e)/n)<o&&(i=this.xmin,s=t+(o=a)*r)}return[i,s]}_edgecode(e,t){return(e===this.xmin?1:e===this.xmax?2:0)|(t===this.ymin?4:t===this.ymax?8:0)}_regioncode(e,t){return(e<this.xmin?1:e>this.xmax?2:0)|(t<this.ymin?4:t>this.ymax?8:0)}_simplify(e){if(e&&e.length>4){for(let t=0;t<e.length;t+=2){const n=(t+2)%e.length,r=(t+4)%e.length;(e[t]===e[n]&&e[n]===e[r]||e[t+1]===e[n+1]&&e[n+1]===e[r+1])&&(e.splice(n,2),t-=2)}e.length||(e=null)}return e}}const Co=2*Math.PI,Ro=Math.pow;function Io(e){return e[0]}function Uo(e){return e[1]}function $o(e,t,n){return[e+Math.sin(e+t)*n,t+Math.cos(e-t)*n]}class qo{static from(e,t=Io,n=Uo,r){return new qo("length"in e?function(e,t,n,r){const a=e.length,i=new Float64Array(2*a);for(let s=0;s<a;++s){const a=e[s];i[2*s]=t.call(r,a,s,e),i[2*s+1]=n.call(r,a,s,e)}return i}(e,t,n,r):Float64Array.from(function*(e,t,n,r){let a=0;for(const i of e)yield t.call(r,i,a,e),yield n.call(r,i,a,e),++a}(e,t,n,r)))}constructor(e){this._delaunator=new So(e),this.inedges=new Int32Array(e.length/2),this._hullIndex=new Int32Array(e.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){const e=this._delaunator,t=this.points;if(e.hull&&e.hull.length>2&&function(e){const{triangles:t,coords:n}=e;for(let e=0;e<t.length;e+=3){const r=2*t[e],a=2*t[e+1],i=2*t[e+2];if((n[i]-n[r])*(n[a+1]-n[r+1])-(n[a]-n[r])*(n[i+1]-n[r+1])>1e-10)return!1}return!0}(e)){this.collinear=Int32Array.from({length:t.length/2},((e,t)=>t)).sort(((e,n)=>t[2*e]-t[2*n]||t[2*e+1]-t[2*n+1]));const e=this.collinear[0],n=this.collinear[this.collinear.length-1],r=[t[2*e],t[2*e+1],t[2*n],t[2*n+1]],a=1e-8*Math.hypot(r[3]-r[1],r[2]-r[0]);for(let e=0,n=t.length/2;e<n;++e){const n=$o(t[2*e],t[2*e+1],a);t[2*e]=n[0],t[2*e+1]=n[1]}this._delaunator=new So(t)}else delete this.collinear;const n=this.halfedges=this._delaunator.halfedges,r=this.hull=this._delaunator.hull,a=this.triangles=this._delaunator.triangles,i=this.inedges.fill(-1),s=this._hullIndex.fill(-1);for(let e=0,t=n.length;e<t;++e){const t=a[e%3==2?e-2:e+1];-1!==n[e]&&-1!==i[t]||(i[t]=e)}for(let e=0,t=r.length;e<t;++e)s[r[e]]=e;r.length<=2&&r.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=r[0],i[r[0]]=1,2===r.length&&(i[r[1]]=0,this.triangles[1]=r[1],this.triangles[2]=r[1]))}voronoi(e){return new zo(this,e)}*neighbors(e){const{inedges:t,hull:n,_hullIndex:r,halfedges:a,triangles:i,collinear:s}=this;if(s){const t=s.indexOf(e);return t>0&&(yield s[t-1]),void(t<s.length-1&&(yield s[t+1]))}const o=t[e];if(-1===o)return;let u=o,d=-1;do{if(yield d=i[u],u=u%3==2?u-2:u+1,i[u]!==e)return;if(u=a[u],-1===u){const t=n[(r[e]+1)%n.length];return void(t!==d&&(yield t))}}while(u!==o)}find(e,t,n=0){if((e=+e)!=e||(t=+t)!=t)return-1;const r=n;let a;for(;(a=this._step(n,e,t))>=0&&a!==n&&a!==r;)n=a;return a}_step(e,t,n){const{inedges:r,hull:a,_hullIndex:i,halfedges:s,triangles:o,points:u}=this;if(-1===r[e]||!u.length)return(e+1)%(u.length>>1);let d=e,l=Ro(t-u[2*e],2)+Ro(n-u[2*e+1],2);const c=r[e];let _=c;do{let r=o[_];const c=Ro(t-u[2*r],2)+Ro(n-u[2*r+1],2);if(c<l&&(l=c,d=r),_=_%3==2?_-2:_+1,o[_]!==e)break;if(_=s[_],-1===_){if(_=a[(i[e]+1)%a.length],_!==r&&Ro(t-u[2*_],2)+Ro(n-u[2*_+1],2)<l)return _;break}}while(_!==c);return d}render(e){const t=null==e?e=new Jo:void 0,{points:n,halfedges:r,triangles:a}=this;for(let t=0,i=r.length;t<i;++t){const i=r[t];if(i<t)continue;const s=2*a[t],o=2*a[i];e.moveTo(n[s],n[s+1]),e.lineTo(n[o],n[o+1])}return this.renderHull(e),t&&t.value()}renderPoints(e,t){void 0!==t||e&&"function"==typeof e.moveTo||(t=e,e=null),t=null==t?2:+t;const n=null==e?e=new Jo:void 0,{points:r}=this;for(let n=0,a=r.length;n<a;n+=2){const a=r[n],i=r[n+1];e.moveTo(a+t,i),e.arc(a,i,t,0,Co)}return n&&n.value()}renderHull(e){const t=null==e?e=new Jo:void 0,{hull:n,points:r}=this,a=2*n[0],i=n.length;e.moveTo(r[a],r[a+1]);for(let t=1;t<i;++t){const a=2*n[t];e.lineTo(r[a],r[a+1])}return e.closePath(),t&&t.value()}hullPolygon(){const e=new Wo;return this.renderHull(e),e.value()}renderTriangle(e,t){const n=null==t?t=new Jo:void 0,{points:r,triangles:a}=this,i=2*a[e*=3],s=2*a[e+1],o=2*a[e+2];return t.moveTo(r[i],r[i+1]),t.lineTo(r[s],r[s+1]),t.lineTo(r[o],r[o+1]),t.closePath(),n&&n.value()}*trianglePolygons(){const{triangles:e}=this;for(let t=0,n=e.length/3;t<n;++t)yield this.trianglePolygon(t)}trianglePolygon(e){const t=new Wo;return this.renderTriangle(e,t),t.value()}}const Bo=e=>()=>e;function Go(e,{sourceEvent:t,subject:n,target:r,identifier:a,active:i,x:s,y:o,dx:u,dy:d,dispatch:l}){Object.defineProperties(this,{type:{value:e,enumerable:!0,configurable:!0},sourceEvent:{value:t,enumerable:!0,configurable:!0},subject:{value:n,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:a,enumerable:!0,configurable:!0},active:{value:i,enumerable:!0,configurable:!0},x:{value:s,enumerable:!0,configurable:!0},y:{value:o,enumerable:!0,configurable:!0},dx:{value:u,enumerable:!0,configurable:!0},dy:{value:d,enumerable:!0,configurable:!0},_:{value:l}})}function Vo(e){return!e.ctrlKey&&!e.button}function Zo(){return this.parentNode}function Ko(e,t){return null==t?{x:e.x,y:e.y}:t}function Xo(){return navigator.maxTouchPoints||"ontouchstart"in this}function Qo(){var e,t,n,r,a=Vo,i=Zo,s=Ko,o=Xo,u={},d=Dt("start","drag","end"),l=0,c=0;function _(e){e.on("mousedown.drag",f).filter(o).on("touchstart.drag",y).on("touchmove.drag",p,Rn).on("touchend.drag touchcancel.drag",M).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function f(s,o){if(!r&&a.call(this,s,o)){var u=g(this,i.call(this,s,o),s,o,"mouse");u&&(Cn(s.view).on("mousemove.drag",h,In).on("mouseup.drag",m,In),qn(s.view),Un(s),n=!1,e=s.clientX,t=s.clientY,u("start",s))}}function h(r){if($n(r),!n){var a=r.clientX-e,i=r.clientY-t;n=a*a+i*i>c}u.mouse("drag",r)}function m(e){Cn(e.view).on("mousemove.drag mouseup.drag",null),Bn(e.view,n),$n(e),u.mouse("end",e)}function y(e,t){if(a.call(this,e,t)){var n,r,s=e.changedTouches,o=i.call(this,e,t),u=s.length;for(n=0;n<u;++n)(r=g(this,o,e,t,s[n].identifier,s[n]))&&(Un(e),r("start",e,s[n]))}}function p(e){var t,n,r=e.changedTouches,a=r.length;for(t=0;t<a;++t)(n=u[r[t].identifier])&&($n(e),n("drag",e,r[t]))}function M(e){var t,n,a=e.changedTouches,i=a.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=u[a[t].identifier])&&(Un(e),n("end",e,a[t]))}function g(e,t,n,r,a,i){var o,c,f,h=d.copy(),m=Qr(i||n,t);if(null!=(f=s.call(e,new Go("beforestart",{sourceEvent:n,target:_,identifier:a,active:l,x:m[0],y:m[1],dx:0,dy:0,dispatch:h}),r)))return o=f.x-m[0]||0,c=f.y-m[1]||0,function n(i,s,d){var y,p=m;switch(i){case"start":u[a]=n,y=l++;break;case"end":delete u[a],--l;case"drag":m=Qr(d||s,t),y=l}h.call(i,e,new Go(i,{sourceEvent:s,subject:f,target:_,identifier:a,active:y,x:m[0]+o,y:m[1]+c,dx:m[0]-p[0],dy:m[1]-p[1],dispatch:h}),r)}}return _.filter=function(e){return arguments.length?(a="function"==typeof e?e:Bo(!!e),_):a},_.container=function(e){return arguments.length?(i="function"==typeof e?e:Bo(e),_):i},_.subject=function(e){return arguments.length?(s="function"==typeof e?e:Bo(e),_):s},_.touchable=function(e){return arguments.length?(o="function"==typeof e?e:Bo(!!e),_):o},_.on=function(){var e=d.on.apply(d,arguments);return e===d?_:e},_.clickDistance=function(e){return arguments.length?(c=(e=+e)*e,_):Math.sqrt(c)},_}Go.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e};var eu={},tu={},nu=34,ru=10,au=13;function iu(e){return new Function("d","return {"+e.map((function(e,t){return JSON.stringify(e)+": d["+t+'] || ""'})).join(",")+"}")}function su(e){var t=Object.create(null),n=[];return e.forEach((function(e){for(var r in e)r in t||n.push(t[r]=r)})),n}function ou(e,t){var n=e+"",r=n.length;return r<t?new Array(t-r+1).join(0)+n:n}function uu(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function r(e,t){var r,a=[],i=e.length,s=0,o=0,u=i<=0,d=!1;function l(){if(u)return tu;if(d)return d=!1,eu;var t,r,a=s;if(e.charCodeAt(a)===nu){for(;s++<i&&e.charCodeAt(s)!==nu||e.charCodeAt(++s)===nu;);return(t=s)>=i?u=!0:(r=e.charCodeAt(s++))===ru?d=!0:r===au&&(d=!0,e.charCodeAt(s)===ru&&++s),e.slice(a+1,t-1).replace(/""/g,'"')}for(;s<i;){if((r=e.charCodeAt(t=s++))===ru)d=!0;else if(r===au)d=!0,e.charCodeAt(s)===ru&&++s;else if(r!==n)continue;return e.slice(a,t)}return u=!0,e.slice(a,i)}for(e.charCodeAt(i-1)===ru&&--i,e.charCodeAt(i-1)===au&&--i;(r=l())!==tu;){for(var c=[];r!==eu&&r!==tu;)c.push(r),r=l();t&&null==(c=t(c,o++))||a.push(c)}return a}function a(t,n){return t.map((function(t){return n.map((function(e){return s(t[e])})).join(e)}))}function i(t){return t.map(s).join(e)}function s(e){return null==e?"":e instanceof Date?function(e){var t,n=e.getUTCHours(),r=e.getUTCMinutes(),a=e.getUTCSeconds(),i=e.getUTCMilliseconds();return isNaN(e)?"Invalid Date":((t=e.getUTCFullYear())<0?"-"+ou(-t,6):t>9999?"+"+ou(t,6):ou(t,4))+"-"+ou(e.getUTCMonth()+1,2)+"-"+ou(e.getUTCDate(),2)+(i?"T"+ou(n,2)+":"+ou(r,2)+":"+ou(a,2)+"."+ou(i,3)+"Z":a?"T"+ou(n,2)+":"+ou(r,2)+":"+ou(a,2)+"Z":r||n?"T"+ou(n,2)+":"+ou(r,2)+"Z":"")}(e):t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,a,i=r(e,(function(e,r){if(n)return n(e,r-1);a=e,n=t?function(e,t){var n=iu(e);return function(r,a){return t(n(r),a,e)}}(e,t):iu(e)}));return i.columns=a||[],i},parseRows:r,format:function(t,n){return null==n&&(n=su(t)),[n.map(s).join(e)].concat(a(t,n)).join("\n")},formatBody:function(e,t){return null==t&&(t=su(e)),a(e,t).join("\n")},formatRows:function(e){return e.map(i).join("\n")},formatRow:i,formatValue:s}}var du=uu(","),lu=du.parse,cu=du.parseRows,_u=du.format,fu=du.formatBody,hu=du.formatRows,mu=du.formatRow,yu=du.formatValue,pu=uu("\t"),Mu=pu.parse,gu=pu.parseRows,Lu=pu.format,Yu=pu.formatBody,vu=pu.formatRows,bu=pu.formatRow,wu=pu.formatValue;function ku(e){for(var t in e){var n,r,a=e[t].trim();if(a)if("true"===a)a=!0;else if("false"===a)a=!1;else if("NaN"===a)a=NaN;else if(isNaN(n=+a)){if(!(r=a.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Du&&r[4]&&!r[7]&&(a=a.replace(/-/g,"/").replace(/T/," ")),a=new Date(a)}else a=n;else a=null;e[t]=a}return e}const Du=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours(),Tu=e=>+e;function xu(e){return e*e}function Su(e){return e*(2-e)}function Au(e){return((e*=2)<=1?e*e:--e*(2-e)+1)/2}var Hu=function e(t){function n(e){return Math.pow(e,t)}return t=+t,n.exponent=e,n}(3),ju=function e(t){function n(e){return 1-Math.pow(1-e,t)}return t=+t,n.exponent=e,n}(3),Fu=function e(t){function n(e){return((e*=2)<=1?Math.pow(e,t):2-Math.pow(2-e,t))/2}return t=+t,n.exponent=e,n}(3),Ou=Math.PI,Pu=Ou/2;function Eu(e){return 1==+e?1:1-Math.cos(e*Pu)}function Nu(e){return Math.sin(e*Pu)}function Ju(e){return(1-Math.cos(Ou*e))/2}function Wu(e){return 1.0009775171065494*(Math.pow(2,-10*e)-.0009765625)}function zu(e){return Wu(1-+e)}function Cu(e){return 1-Wu(e)}function Ru(e){return((e*=2)<=1?Wu(1-e):2-Wu(e-1))/2}function Iu(e){return 1-Math.sqrt(1-e*e)}function Uu(e){return Math.sqrt(1- --e*e)}function $u(e){return((e*=2)<=1?1-Math.sqrt(1-e*e):Math.sqrt(1-(e-=2)*e)+1)/2}var qu=4/11,Bu=6/11,Gu=8/11,Vu=3/4,Zu=9/11,Ku=10/11,Xu=15/16,Qu=21/22,ed=63/64,td=1/qu/qu;function nd(e){return 1-rd(1-e)}function rd(e){return(e=+e)<qu?td*e*e:e<Gu?td*(e-=Bu)*e+Vu:e<Ku?td*(e-=Zu)*e+Xu:td*(e-=Qu)*e+ed}function ad(e){return((e*=2)<=1?1-rd(1-e):rd(e-1)+1)/2}var id=1.70158,sd=function e(t){function n(e){return(e=+e)*e*(t*(e-1)+e)}return t=+t,n.overshoot=e,n}(id),od=function e(t){function n(e){return--e*e*((e+1)*t+e)+1}return t=+t,n.overshoot=e,n}(id),ud=function e(t){function n(e){return((e*=2)<1?e*e*((t+1)*e-t):(e-=2)*e*((t+1)*e+t)+2)/2}return t=+t,n.overshoot=e,n}(id),dd=2*Math.PI,ld=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=dd);function a(e){return t*Wu(- --e)*Math.sin((r-e)/n)}return a.amplitude=function(t){return e(t,n*dd)},a.period=function(n){return e(t,n)},a}(1,.3),cd=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=dd);function a(e){return 1-t*Wu(e=+e)*Math.sin((e+r)/n)}return a.amplitude=function(t){return e(t,n*dd)},a.period=function(n){return e(t,n)},a}(1,.3),_d=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=dd);function a(e){return((e=2*e-1)<0?t*Wu(-e)*Math.sin((r-e)/n):2-t*Wu(e)*Math.sin((r+e)/n))/2}return a.amplitude=function(t){return e(t,n*dd)},a.period=function(n){return e(t,n)},a}(1,.3);function fd(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.blob()}function hd(e,t){return fetch(e,t).then(fd)}function md(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.arrayBuffer()}function yd(e,t){return fetch(e,t).then(md)}function pd(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}function Md(e,t){return fetch(e,t).then(pd)}function gd(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Md(t,n).then((function(t){return e(t,r)}))}}function Ld(e,t,n,r){3===arguments.length&&"function"==typeof n&&(r=n,n=void 0);var a=uu(e);return Md(t,n).then((function(e){return a.parse(e,r)}))}var Yd=gd(lu),vd=gd(Mu);function bd(e,t){return new Promise((function(n,r){var a=new Image;for(var i in t)a[i]=t[i];a.onerror=r,a.onload=function(){n(a)},a.src=e}))}function wd(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);if(204!==e.status&&205!==e.status)return e.json()}function kd(e,t){return fetch(e,t).then(wd)}function Dd(e){return(t,n)=>Md(t,n).then((t=>(new DOMParser).parseFromString(t,e)))}const Td=Dd("application/xml");var xd=Dd("text/html"),Sd=Dd("image/svg+xml");function Ad(e,t){var n,r=1;function a(){var a,i,s=n.length,o=0,u=0;for(a=0;a<s;++a)o+=(i=n[a]).x,u+=i.y;for(o=(o/s-e)*r,u=(u/s-t)*r,a=0;a<s;++a)(i=n[a]).x-=o,i.y-=u}return null==e&&(e=0),null==t&&(t=0),a.initialize=function(e){n=e},a.x=function(t){return arguments.length?(e=+t,a):e},a.y=function(e){return arguments.length?(t=+e,a):t},a.strength=function(e){return arguments.length?(r=+e,a):r},a}function Hd(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var a,i,s,o,u,d,l,c,_,f=e._root,h={data:r},m=e._x0,y=e._y0,p=e._x1,M=e._y1;if(!f)return e._root=h,e;for(;f.length;)if((d=t>=(i=(m+p)/2))?m=i:p=i,(l=n>=(s=(y+M)/2))?y=s:M=s,a=f,!(f=f[c=l<<1|d]))return a[c]=h,e;if(o=+e._x.call(null,f.data),u=+e._y.call(null,f.data),t===o&&n===u)return h.next=f,a?a[c]=h:e._root=h,e;do{a=a?a[c]=new Array(4):e._root=new Array(4),(d=t>=(i=(m+p)/2))?m=i:p=i,(l=n>=(s=(y+M)/2))?y=s:M=s}while((c=l<<1|d)==(_=(u>=s)<<1|o>=i));return a[_]=f,a[c]=h,e}function jd(e,t,n,r,a){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=a}function Fd(e){return e[0]}function Od(e){return e[1]}function Pd(e,t,n){var r=new Ed(null==t?Fd:t,null==n?Od:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function Ed(e,t,n,r,a,i){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=a,this._y1=i,this._root=void 0}function Nd(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var Jd=Pd.prototype=Ed.prototype;function Wd(e){return function(){return e}}function zd(e){return 1e-6*(e()-.5)}function Cd(e){return e.x+e.vx}function Rd(e){return e.y+e.vy}function Id(e){var t,n,r,a=1,i=1;function s(){for(var e,s,u,d,l,c,_,f=t.length,h=0;h<i;++h)for(s=Pd(t,Cd,Rd).visitAfter(o),e=0;e<f;++e)u=t[e],c=n[u.index],_=c*c,d=u.x+u.vx,l=u.y+u.vy,s.visit(m);function m(e,t,n,i,s){var o=e.data,f=e.r,h=c+f;if(!o)return t>d+h||i<d-h||n>l+h||s<l-h;if(o.index>u.index){var m=d-o.x-o.vx,y=l-o.y-o.vy,p=m*m+y*y;p<h*h&&(0===m&&(p+=(m=zd(r))*m),0===y&&(p+=(y=zd(r))*y),p=(h-(p=Math.sqrt(p)))/p*a,u.vx+=(m*=p)*(h=(f*=f)/(_+f)),u.vy+=(y*=p)*h,o.vx-=m*(h=1-h),o.vy-=y*h)}}}function o(e){if(e.data)return e.r=n[e.data.index];for(var t=e.r=0;t<4;++t)e[t]&&e[t].r>e.r&&(e.r=e[t].r)}function u(){if(t){var r,a,i=t.length;for(n=new Array(i),r=0;r<i;++r)a=t[r],n[a.index]=+e(a,r,t)}}return"function"!=typeof e&&(e=Wd(null==e?1:+e)),s.initialize=function(e,n){t=e,r=n,u()},s.iterations=function(e){return arguments.length?(i=+e,s):i},s.strength=function(e){return arguments.length?(a=+e,s):a},s.radius=function(t){return arguments.length?(e="function"==typeof t?t:Wd(+t),u(),s):e},s}function Ud(e){return e.index}function $d(e,t){var n=e.get(t);if(!n)throw new Error("node not found: "+t);return n}function qd(e){var t,n,r,a,i,s,o=Ud,u=function(e){return 1/Math.min(a[e.source.index],a[e.target.index])},d=Wd(30),l=1;function c(r){for(var a=0,o=e.length;a<l;++a)for(var u,d,c,_,f,h,m,y=0;y<o;++y)d=(u=e[y]).source,_=(c=u.target).x+c.vx-d.x-d.vx||zd(s),f=c.y+c.vy-d.y-d.vy||zd(s),_*=h=((h=Math.sqrt(_*_+f*f))-n[y])/h*r*t[y],f*=h,c.vx-=_*(m=i[y]),c.vy-=f*m,d.vx+=_*(m=1-m),d.vy+=f*m}function _(){if(r){var s,u,d=r.length,l=e.length,c=new Map(r.map(((e,t)=>[o(e,t,r),e])));for(s=0,a=new Array(d);s<l;++s)(u=e[s]).index=s,"object"!=typeof u.source&&(u.source=$d(c,u.source)),"object"!=typeof u.target&&(u.target=$d(c,u.target)),a[u.source.index]=(a[u.source.index]||0)+1,a[u.target.index]=(a[u.target.index]||0)+1;for(s=0,i=new Array(l);s<l;++s)u=e[s],i[s]=a[u.source.index]/(a[u.source.index]+a[u.target.index]);t=new Array(l),f(),n=new Array(l),h()}}function f(){if(r)for(var n=0,a=e.length;n<a;++n)t[n]=+u(e[n],n,e)}function h(){if(r)for(var t=0,a=e.length;t<a;++t)n[t]=+d(e[t],t,e)}return null==e&&(e=[]),c.initialize=function(e,t){r=e,s=t,_()},c.links=function(t){return arguments.length?(e=t,_(),c):e},c.id=function(e){return arguments.length?(o=e,c):o},c.iterations=function(e){return arguments.length?(l=+e,c):l},c.strength=function(e){return arguments.length?(u="function"==typeof e?e:Wd(+e),f(),c):u},c.distance=function(e){return arguments.length?(d="function"==typeof e?e:Wd(+e),h(),c):d},c}Jd.copy=function(){var e,t,n=new Ed(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Nd(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var a=0;a<4;++a)(t=r.source[a])&&(t.length?e.push({source:t,target:r.target[a]=new Array(4)}):r.target[a]=Nd(t));return n},Jd.add=function(e){const t=+this._x.call(null,e),n=+this._y.call(null,e);return Hd(this.cover(t,n),t,n,e)},Jd.addAll=function(e){var t,n,r,a,i=e.length,s=new Array(i),o=new Array(i),u=1/0,d=1/0,l=-1/0,c=-1/0;for(n=0;n<i;++n)isNaN(r=+this._x.call(null,t=e[n]))||isNaN(a=+this._y.call(null,t))||(s[n]=r,o[n]=a,r<u&&(u=r),r>l&&(l=r),a<d&&(d=a),a>c&&(c=a));if(u>l||d>c)return this;for(this.cover(u,d).cover(l,c),n=0;n<i;++n)Hd(this,s[n],o[n],e[n]);return this},Jd.cover=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,a=this._x1,i=this._y1;if(isNaN(n))a=(n=Math.floor(e))+1,i=(r=Math.floor(t))+1;else{for(var s,o,u=a-n||1,d=this._root;n>e||e>=a||r>t||t>=i;)switch(o=(t<r)<<1|e<n,(s=new Array(4))[o]=d,d=s,u*=2,o){case 0:a=n+u,i=r+u;break;case 1:n=a-u,i=r+u;break;case 2:a=n+u,r=i-u;break;case 3:n=a-u,r=i-u}this._root&&this._root.length&&(this._root=d)}return this._x0=n,this._y0=r,this._x1=a,this._y1=i,this},Jd.data=function(){var e=[];return this.visit((function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)})),e},Jd.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Jd.find=function(e,t,n){var r,a,i,s,o,u,d,l=this._x0,c=this._y0,_=this._x1,f=this._y1,h=[],m=this._root;for(m&&h.push(new jd(m,l,c,_,f)),null==n?n=1/0:(l=e-n,c=t-n,_=e+n,f=t+n,n*=n);u=h.pop();)if(!(!(m=u.node)||(a=u.x0)>_||(i=u.y0)>f||(s=u.x1)<l||(o=u.y1)<c))if(m.length){var y=(a+s)/2,p=(i+o)/2;h.push(new jd(m[3],y,p,s,o),new jd(m[2],a,p,y,o),new jd(m[1],y,i,s,p),new jd(m[0],a,i,y,p)),(d=(t>=p)<<1|e>=y)&&(u=h[h.length-1],h[h.length-1]=h[h.length-1-d],h[h.length-1-d]=u)}else{var M=e-+this._x.call(null,m.data),g=t-+this._y.call(null,m.data),L=M*M+g*g;if(L<n){var Y=Math.sqrt(n=L);l=e-Y,c=t-Y,_=e+Y,f=t+Y,r=m.data}}return r},Jd.remove=function(e){if(isNaN(i=+this._x.call(null,e))||isNaN(s=+this._y.call(null,e)))return this;var t,n,r,a,i,s,o,u,d,l,c,_,f=this._root,h=this._x0,m=this._y0,y=this._x1,p=this._y1;if(!f)return this;if(f.length)for(;;){if((d=i>=(o=(h+y)/2))?h=o:y=o,(l=s>=(u=(m+p)/2))?m=u:p=u,t=f,!(f=f[c=l<<1|d]))return this;if(!f.length)break;(t[c+1&3]||t[c+2&3]||t[c+3&3])&&(n=t,_=c)}for(;f.data!==e;)if(r=f,!(f=f.next))return this;return(a=f.next)&&delete f.next,r?(a?r.next=a:delete r.next,this):t?(a?t[c]=a:delete t[c],(f=t[0]||t[1]||t[2]||t[3])&&f===(t[3]||t[2]||t[1]||t[0])&&!f.length&&(n?n[_]=f:this._root=f),this):(this._root=a,this)},Jd.removeAll=function(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this},Jd.root=function(){return this._root},Jd.size=function(){var e=0;return this.visit((function(t){if(!t.length)do{++e}while(t=t.next)})),e},Jd.visit=function(e){var t,n,r,a,i,s,o=[],u=this._root;for(u&&o.push(new jd(u,this._x0,this._y0,this._x1,this._y1));t=o.pop();)if(!e(u=t.node,r=t.x0,a=t.y0,i=t.x1,s=t.y1)&&u.length){var d=(r+i)/2,l=(a+s)/2;(n=u[3])&&o.push(new jd(n,d,l,i,s)),(n=u[2])&&o.push(new jd(n,r,l,d,s)),(n=u[1])&&o.push(new jd(n,d,a,i,l)),(n=u[0])&&o.push(new jd(n,r,a,d,l))}return this},Jd.visitAfter=function(e){var t,n=[],r=[];for(this._root&&n.push(new jd(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var a=t.node;if(a.length){var i,s=t.x0,o=t.y0,u=t.x1,d=t.y1,l=(s+u)/2,c=(o+d)/2;(i=a[0])&&n.push(new jd(i,s,o,l,c)),(i=a[1])&&n.push(new jd(i,l,o,u,c)),(i=a[2])&&n.push(new jd(i,s,c,l,d)),(i=a[3])&&n.push(new jd(i,l,c,u,d))}r.push(t)}for(;t=r.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this},Jd.x=function(e){return arguments.length?(this._x=e,this):this._x},Jd.y=function(e){return arguments.length?(this._y=e,this):this._y};const Bd=1664525,Gd=1013904223,Vd=4294967296;function Zd(e){return e.x}function Kd(e){return e.y}var Xd=10,Qd=Math.PI*(3-Math.sqrt(5));function el(e){var t,n=1,r=.001,a=1-Math.pow(r,1/300),i=0,s=.6,o=new Map,u=fa(c),d=Dt("tick","end"),l=function(){let e=1;return()=>(e=(Bd*e+Gd)%Vd)/Vd}();function c(){_(),d.call("tick",t),n<r&&(u.stop(),d.call("end",t))}function _(r){var u,d,l=e.length;void 0===r&&(r=1);for(var c=0;c<r;++c)for(n+=(i-n)*a,o.forEach((function(e){e(n)})),u=0;u<l;++u)null==(d=e[u]).fx?d.x+=d.vx*=s:(d.x=d.fx,d.vx=0),null==d.fy?d.y+=d.vy*=s:(d.y=d.fy,d.vy=0);return t}function f(){for(var t,n=0,r=e.length;n<r;++n){if((t=e[n]).index=n,null!=t.fx&&(t.x=t.fx),null!=t.fy&&(t.y=t.fy),isNaN(t.x)||isNaN(t.y)){var a=Xd*Math.sqrt(.5+n),i=n*Qd;t.x=a*Math.cos(i),t.y=a*Math.sin(i)}(isNaN(t.vx)||isNaN(t.vy))&&(t.vx=t.vy=0)}}function h(t){return t.initialize&&t.initialize(e,l),t}return null==e&&(e=[]),f(),t={tick:_,restart:function(){return u.restart(c),t},stop:function(){return u.stop(),t},nodes:function(n){return arguments.length?(e=n,f(),o.forEach(h),t):e},alpha:function(e){return arguments.length?(n=+e,t):n},alphaMin:function(e){return arguments.length?(r=+e,t):r},alphaDecay:function(e){return arguments.length?(a=+e,t):+a},alphaTarget:function(e){return arguments.length?(i=+e,t):i},velocityDecay:function(e){return arguments.length?(s=1-e,t):1-s},randomSource:function(e){return arguments.length?(l=e,o.forEach(h),t):l},force:function(e,n){return arguments.length>1?(null==n?o.delete(e):o.set(e,h(n)),t):o.get(e)},find:function(t,n,r){var a,i,s,o,u,d=0,l=e.length;for(null==r?r=1/0:r*=r,d=0;d<l;++d)(s=(a=t-(o=e[d]).x)*a+(i=n-o.y)*i)<r&&(u=o,r=s);return u},on:function(e,n){return arguments.length>1?(d.on(e,n),t):d.on(e)}}}function tl(){var e,t,n,r,a,i=Wd(-30),s=1,o=1/0,u=.81;function d(n){var a,i=e.length,s=Pd(e,Zd,Kd).visitAfter(c);for(r=n,a=0;a<i;++a)t=e[a],s.visit(_)}function l(){if(e){var t,n,r=e.length;for(a=new Array(r),t=0;t<r;++t)n=e[t],a[n.index]=+i(n,t,e)}}function c(e){var t,n,r,i,s,o=0,u=0;if(e.length){for(r=i=s=0;s<4;++s)(t=e[s])&&(n=Math.abs(t.value))&&(o+=t.value,u+=n,r+=n*t.x,i+=n*t.y);e.x=r/u,e.y=i/u}else{(t=e).x=t.data.x,t.y=t.data.y;do{o+=a[t.data.index]}while(t=t.next)}e.value=o}function _(e,i,d,l){if(!e.value)return!0;var c=e.x-t.x,_=e.y-t.y,f=l-i,h=c*c+_*_;if(f*f/u<h)return h<o&&(0===c&&(h+=(c=zd(n))*c),0===_&&(h+=(_=zd(n))*_),h<s&&(h=Math.sqrt(s*h)),t.vx+=c*e.value*r/h,t.vy+=_*e.value*r/h),!0;if(!(e.length||h>=o)){(e.data!==t||e.next)&&(0===c&&(h+=(c=zd(n))*c),0===_&&(h+=(_=zd(n))*_),h<s&&(h=Math.sqrt(s*h)));do{e.data!==t&&(f=a[e.data.index]*r/h,t.vx+=c*f,t.vy+=_*f)}while(e=e.next)}}return d.initialize=function(t,r){e=t,n=r,l()},d.strength=function(e){return arguments.length?(i="function"==typeof e?e:Wd(+e),l(),d):i},d.distanceMin=function(e){return arguments.length?(s=e*e,d):Math.sqrt(s)},d.distanceMax=function(e){return arguments.length?(o=e*e,d):Math.sqrt(o)},d.theta=function(e){return arguments.length?(u=e*e,d):Math.sqrt(u)},d}function nl(e,t,n){var r,a,i,s=Wd(.1);function o(e){for(var s=0,o=r.length;s<o;++s){var u=r[s],d=u.x-t||1e-6,l=u.y-n||1e-6,c=Math.sqrt(d*d+l*l),_=(i[s]-c)*a[s]*e/c;u.vx+=d*_,u.vy+=l*_}}function u(){if(r){var t,n=r.length;for(a=new Array(n),i=new Array(n),t=0;t<n;++t)i[t]=+e(r[t],t,r),a[t]=isNaN(i[t])?0:+s(r[t],t,r)}}return"function"!=typeof e&&(e=Wd(+e)),null==t&&(t=0),null==n&&(n=0),o.initialize=function(e){r=e,u()},o.strength=function(e){return arguments.length?(s="function"==typeof e?e:Wd(+e),u(),o):s},o.radius=function(t){return arguments.length?(e="function"==typeof t?t:Wd(+t),u(),o):e},o.x=function(e){return arguments.length?(t=+e,o):t},o.y=function(e){return arguments.length?(n=+e,o):n},o}function rl(e){var t,n,r,a=Wd(.1);function i(e){for(var a,i=0,s=t.length;i<s;++i)(a=t[i]).vx+=(r[i]-a.x)*n[i]*e}function s(){if(t){var i,s=t.length;for(n=new Array(s),r=new Array(s),i=0;i<s;++i)n[i]=isNaN(r[i]=+e(t[i],i,t))?0:+a(t[i],i,t)}}return"function"!=typeof e&&(e=Wd(null==e?0:+e)),i.initialize=function(e){t=e,s()},i.strength=function(e){return arguments.length?(a="function"==typeof e?e:Wd(+e),s(),i):a},i.x=function(t){return arguments.length?(e="function"==typeof t?t:Wd(+t),s(),i):e},i}function al(e){var t,n,r,a=Wd(.1);function i(e){for(var a,i=0,s=t.length;i<s;++i)(a=t[i]).vy+=(r[i]-a.y)*n[i]*e}function s(){if(t){var i,s=t.length;for(n=new Array(s),r=new Array(s),i=0;i<s;++i)n[i]=isNaN(r[i]=+e(t[i],i,t))?0:+a(t[i],i,t)}}return"function"!=typeof e&&(e=Wd(null==e?0:+e)),i.initialize=function(e){t=e,s()},i.strength=function(e){return arguments.length?(a="function"==typeof e?e:Wd(+e),s(),i):a},i.y=function(t){return arguments.length?(e="function"==typeof t?t:Wd(+t),s(),i):e},i}function il(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}function sl(e){return(e=il(Math.abs(e)))?e[1]:NaN}var ol,ul=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function dl(e){if(!(t=ul.exec(e)))throw new Error("invalid format: "+e);var t;return new ll({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function ll(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}function cl(e,t){var n=il(e,t);if(!n)return e+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}dl.prototype=ll.prototype,ll.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const _l={"%":(e,t)=>(100*e).toFixed(t),b:e=>Math.round(e).toString(2),c:e=>e+"",d:function(e){return Math.abs(e=Math.round(e))>=1e21?e.toLocaleString("en").replace(/,/g,""):e.toString(10)},e:(e,t)=>e.toExponential(t),f:(e,t)=>e.toFixed(t),g:(e,t)=>e.toPrecision(t),o:e=>Math.round(e).toString(8),p:(e,t)=>cl(100*e,t),r:cl,s:function(e,t){var n=il(e,t);if(!n)return e+"";var r=n[0],a=n[1],i=a-(ol=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,s=r.length;return i===s?r:i>s?r+new Array(i-s+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+il(e,Math.max(0,t+i-1))[0]},X:e=>Math.round(e).toString(16).toUpperCase(),x:e=>Math.round(e).toString(16)};function fl(e){return e}var hl,ml,yl,pl=Array.prototype.map,Ml=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function gl(e){var t,n,r=void 0===e.grouping||void 0===e.thousands?fl:(t=pl.call(e.grouping,Number),n=e.thousands+"",function(e,r){for(var a=e.length,i=[],s=0,o=t[0],u=0;a>0&&o>0&&(u+o+1>r&&(o=Math.max(1,r-u)),i.push(e.substring(a-=o,a+o)),!((u+=o+1)>r));)o=t[s=(s+1)%t.length];return i.reverse().join(n)}),a=void 0===e.currency?"":e.currency[0]+"",i=void 0===e.currency?"":e.currency[1]+"",s=void 0===e.decimal?".":e.decimal+"",o=void 0===e.numerals?fl:function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}(pl.call(e.numerals,String)),u=void 0===e.percent?"%":e.percent+"",d=void 0===e.minus?"−":e.minus+"",l=void 0===e.nan?"NaN":e.nan+"";function c(e){var t=(e=dl(e)).fill,n=e.align,c=e.sign,_=e.symbol,f=e.zero,h=e.width,m=e.comma,y=e.precision,p=e.trim,M=e.type;"n"===M?(m=!0,M="g"):_l[M]||(void 0===y&&(y=12),p=!0,M="g"),(f||"0"===t&&"="===n)&&(f=!0,t="0",n="=");var g="$"===_?a:"#"===_&&/[boxX]/.test(M)?"0"+M.toLowerCase():"",L="$"===_?i:/[%p]/.test(M)?u:"",Y=_l[M],v=/[defgprs%]/.test(M);function b(e){var a,i,u,_=g,b=L;if("c"===M)b=Y(e)+b,e="";else{var w=(e=+e)<0||1/e<0;if(e=isNaN(e)?l:Y(Math.abs(e),y),p&&(e=function(e){e:for(var t,n=e.length,r=1,a=-1;r<n;++r)switch(e[r]){case".":a=t=r;break;case"0":0===a&&(a=r),t=r;break;default:if(!+e[r])break e;a>0&&(a=0)}return a>0?e.slice(0,a)+e.slice(t+1):e}(e)),w&&0==+e&&"+"!==c&&(w=!1),_=(w?"("===c?c:d:"-"===c||"("===c?"":c)+_,b=("s"===M?Ml[8+ol/3]:"")+b+(w&&"("===c?")":""),v)for(a=-1,i=e.length;++a<i;)if(48>(u=e.charCodeAt(a))||u>57){b=(46===u?s+e.slice(a+1):e.slice(a))+b,e=e.slice(0,a);break}}m&&!f&&(e=r(e,1/0));var k=_.length+e.length+b.length,D=k<h?new Array(h-k+1).join(t):"";switch(m&&f&&(e=r(D+e,D.length?h-b.length:1/0),D=""),n){case"<":e=_+e+b+D;break;case"=":e=_+D+e+b;break;case"^":e=D.slice(0,k=D.length>>1)+_+e+b+D.slice(k);break;default:e=D+_+e+b}return o(e)}return y=void 0===y?6:/[gprs]/.test(M)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),b.toString=function(){return e+""},b}return{format:c,formatPrefix:function(e,t){var n=c(((e=dl(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(sl(t)/3))),a=Math.pow(10,-r),i=Ml[8+r/3];return function(e){return n(a*e)+i}}}}function Ll(e){return hl=gl(e),ml=hl.format,yl=hl.formatPrefix,hl}function Yl(e){return Math.max(0,-sl(Math.abs(e)))}function vl(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(sl(t)/3)))-sl(Math.abs(e)))}function bl(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,sl(t)-sl(e))+1}Ll({thousands:",",grouping:[3],currency:["$",""]});var wl=1e-6,kl=1e-12,Dl=Math.PI,Tl=Dl/2,xl=Dl/4,Sl=2*Dl,Al=180/Dl,Hl=Dl/180,jl=Math.abs,Fl=Math.atan,Ol=Math.atan2,Pl=Math.cos,El=Math.ceil,Nl=Math.exp,Jl=(Math.floor,Math.hypot),Wl=Math.log,zl=Math.pow,Cl=Math.sin,Rl=Math.sign||function(e){return e>0?1:e<0?-1:0},Il=Math.sqrt,Ul=Math.tan;function $l(e){return e>1?0:e<-1?Dl:Math.acos(e)}function ql(e){return e>1?Tl:e<-1?-Tl:Math.asin(e)}function Bl(e){return(e=Cl(e/2))*e}function Gl(){}function Vl(e,t){e&&Kl.hasOwnProperty(e.type)&&Kl[e.type](e,t)}var Zl={Feature:function(e,t){Vl(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,a=n.length;++r<a;)Vl(n[r].geometry,t)}},Kl={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){Xl(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)Xl(n[r],t,0)},Polygon:function(e,t){Ql(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)Ql(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,a=n.length;++r<a;)Vl(n[r],t)}};function Xl(e,t,n){var r,a=-1,i=e.length-n;for(t.lineStart();++a<i;)r=e[a],t.point(r[0],r[1],r[2]);t.lineEnd()}function Ql(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)Xl(e[n],t,1);t.polygonEnd()}function ec(e,t){e&&Zl.hasOwnProperty(e.type)?Zl[e.type](e,t):Vl(e,t)}var tc,nc,rc,ac,ic,sc,oc,uc,dc,lc,cc,_c,fc,hc,mc,yc,pc=new S,Mc=new S,gc={point:Gl,lineStart:Gl,lineEnd:Gl,polygonStart:function(){pc=new S,gc.lineStart=Lc,gc.lineEnd=Yc},polygonEnd:function(){var e=+pc;Mc.add(e<0?Sl+e:e),this.lineStart=this.lineEnd=this.point=Gl},sphere:function(){Mc.add(Sl)}};function Lc(){gc.point=vc}function Yc(){bc(tc,nc)}function vc(e,t){gc.point=bc,tc=e,nc=t,rc=e*=Hl,ac=Pl(t=(t*=Hl)/2+xl),ic=Cl(t)}function bc(e,t){var n=(e*=Hl)-rc,r=n>=0?1:-1,a=r*n,i=Pl(t=(t*=Hl)/2+xl),s=Cl(t),o=ic*s,u=ac*i+o*Pl(a),d=o*r*Cl(a);pc.add(Ol(d,u)),rc=e,ac=i,ic=s}function wc(e){return Mc=new S,ec(e,gc),2*Mc}function kc(e){return[Ol(e[1],e[0]),ql(e[2])]}function Dc(e){var t=e[0],n=e[1],r=Pl(n);return[r*Pl(t),r*Cl(t),Cl(n)]}function Tc(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function xc(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function Sc(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function Ac(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function Hc(e){var t=Il(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}var jc,Fc,Oc,Pc,Ec,Nc,Jc,Wc,zc,Cc,Rc,Ic,Uc,$c,qc,Bc,Gc={point:Vc,lineStart:Kc,lineEnd:Xc,polygonStart:function(){Gc.point=Qc,Gc.lineStart=e_,Gc.lineEnd=t_,hc=new S,gc.polygonStart()},polygonEnd:function(){gc.polygonEnd(),Gc.point=Vc,Gc.lineStart=Kc,Gc.lineEnd=Xc,pc<0?(sc=-(uc=180),oc=-(dc=90)):hc>wl?dc=90:hc<-wl&&(oc=-90),yc[0]=sc,yc[1]=uc},sphere:function(){sc=-(uc=180),oc=-(dc=90)}};function Vc(e,t){mc.push(yc=[sc=e,uc=e]),t<oc&&(oc=t),t>dc&&(dc=t)}function Zc(e,t){var n=Dc([e*Hl,t*Hl]);if(fc){var r=xc(fc,n),a=xc([r[1],-r[0],0],r);Hc(a),a=kc(a);var i,s=e-lc,o=s>0?1:-1,u=a[0]*Al*o,d=jl(s)>180;d^(o*lc<u&&u<o*e)?(i=a[1]*Al)>dc&&(dc=i):d^(o*lc<(u=(u+360)%360-180)&&u<o*e)?(i=-a[1]*Al)<oc&&(oc=i):(t<oc&&(oc=t),t>dc&&(dc=t)),d?e<lc?n_(sc,e)>n_(sc,uc)&&(uc=e):n_(e,uc)>n_(sc,uc)&&(sc=e):uc>=sc?(e<sc&&(sc=e),e>uc&&(uc=e)):e>lc?n_(sc,e)>n_(sc,uc)&&(uc=e):n_(e,uc)>n_(sc,uc)&&(sc=e)}else mc.push(yc=[sc=e,uc=e]);t<oc&&(oc=t),t>dc&&(dc=t),fc=n,lc=e}function Kc(){Gc.point=Zc}function Xc(){yc[0]=sc,yc[1]=uc,Gc.point=Vc,fc=null}function Qc(e,t){if(fc){var n=e-lc;hc.add(jl(n)>180?n+(n>0?360:-360):n)}else cc=e,_c=t;gc.point(e,t),Zc(e,t)}function e_(){gc.lineStart()}function t_(){Qc(cc,_c),gc.lineEnd(),jl(hc)>wl&&(sc=-(uc=180)),yc[0]=sc,yc[1]=uc,fc=null}function n_(e,t){return(t-=e)<0?t+360:t}function r_(e,t){return e[0]-t[0]}function a_(e,t){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}function i_(e){var t,n,r,a,i,s,o;if(dc=uc=-(sc=oc=1/0),mc=[],ec(e,Gc),n=mc.length){for(mc.sort(r_),t=1,i=[r=mc[0]];t<n;++t)a_(r,(a=mc[t])[0])||a_(r,a[1])?(n_(r[0],a[1])>n_(r[0],r[1])&&(r[1]=a[1]),n_(a[0],r[1])>n_(r[0],r[1])&&(r[0]=a[0])):i.push(r=a);for(s=-1/0,t=0,r=i[n=i.length-1];t<=n;r=a,++t)a=i[t],(o=n_(r[1],a[0]))>s&&(s=o,sc=a[0],uc=r[1])}return mc=yc=null,sc===1/0||oc===1/0?[[NaN,NaN],[NaN,NaN]]:[[sc,oc],[uc,dc]]}var s_={sphere:Gl,point:o_,lineStart:d_,lineEnd:__,polygonStart:function(){s_.lineStart=f_,s_.lineEnd=h_},polygonEnd:function(){s_.lineStart=d_,s_.lineEnd=__}};function o_(e,t){e*=Hl;var n=Pl(t*=Hl);u_(n*Pl(e),n*Cl(e),Cl(t))}function u_(e,t,n){++jc,Oc+=(e-Oc)/jc,Pc+=(t-Pc)/jc,Ec+=(n-Ec)/jc}function d_(){s_.point=l_}function l_(e,t){e*=Hl;var n=Pl(t*=Hl);$c=n*Pl(e),qc=n*Cl(e),Bc=Cl(t),s_.point=c_,u_($c,qc,Bc)}function c_(e,t){e*=Hl;var n=Pl(t*=Hl),r=n*Pl(e),a=n*Cl(e),i=Cl(t),s=Ol(Il((s=qc*i-Bc*a)*s+(s=Bc*r-$c*i)*s+(s=$c*a-qc*r)*s),$c*r+qc*a+Bc*i);Fc+=s,Nc+=s*($c+($c=r)),Jc+=s*(qc+(qc=a)),Wc+=s*(Bc+(Bc=i)),u_($c,qc,Bc)}function __(){s_.point=o_}function f_(){s_.point=m_}function h_(){y_(Ic,Uc),s_.point=o_}function m_(e,t){Ic=e,Uc=t,e*=Hl,t*=Hl,s_.point=y_;var n=Pl(t);$c=n*Pl(e),qc=n*Cl(e),Bc=Cl(t),u_($c,qc,Bc)}function y_(e,t){e*=Hl;var n=Pl(t*=Hl),r=n*Pl(e),a=n*Cl(e),i=Cl(t),s=qc*i-Bc*a,o=Bc*r-$c*i,u=$c*a-qc*r,d=Jl(s,o,u),l=ql(d),c=d&&-l/d;zc.add(c*s),Cc.add(c*o),Rc.add(c*u),Fc+=l,Nc+=l*($c+($c=r)),Jc+=l*(qc+(qc=a)),Wc+=l*(Bc+(Bc=i)),u_($c,qc,Bc)}function p_(e){jc=Fc=Oc=Pc=Ec=Nc=Jc=Wc=0,zc=new S,Cc=new S,Rc=new S,ec(e,s_);var t=+zc,n=+Cc,r=+Rc,a=Jl(t,n,r);return a<kl&&(t=Nc,n=Jc,r=Wc,Fc<wl&&(t=Oc,n=Pc,r=Ec),(a=Jl(t,n,r))<kl)?[NaN,NaN]:[Ol(n,t)*Al,ql(r/a)*Al]}function M_(e){return function(){return e}}function g_(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return(n=t.invert(n,r))&&e.invert(n[0],n[1])}),n}function L_(e,t){return jl(e)>Dl&&(e-=Math.round(e/Sl)*Sl),[e,t]}function Y_(e,t,n){return(e%=Sl)?t||n?g_(b_(e),w_(t,n)):b_(e):t||n?w_(t,n):L_}function v_(e){return function(t,n){return jl(t+=e)>Dl&&(t-=Math.round(t/Sl)*Sl),[t,n]}}function b_(e){var t=v_(e);return t.invert=v_(-e),t}function w_(e,t){var n=Pl(e),r=Cl(e),a=Pl(t),i=Cl(t);function s(e,t){var s=Pl(t),o=Pl(e)*s,u=Cl(e)*s,d=Cl(t),l=d*n+o*r;return[Ol(u*a-l*i,o*n-d*r),ql(l*a+u*i)]}return s.invert=function(e,t){var s=Pl(t),o=Pl(e)*s,u=Cl(e)*s,d=Cl(t),l=d*a-u*i;return[Ol(u*a+d*i,o*n+l*r),ql(l*n-o*r)]},s}function k_(e){function t(t){return(t=e(t[0]*Hl,t[1]*Hl))[0]*=Al,t[1]*=Al,t}return e=Y_(e[0]*Hl,e[1]*Hl,e.length>2?e[2]*Hl:0),t.invert=function(t){return(t=e.invert(t[0]*Hl,t[1]*Hl))[0]*=Al,t[1]*=Al,t},t}function D_(e,t,n,r,a,i){if(n){var s=Pl(t),o=Cl(t),u=r*n;null==a?(a=t+r*Sl,i=t-u/2):(a=T_(s,a),i=T_(s,i),(r>0?a<i:a>i)&&(a+=r*Sl));for(var d,l=a;r>0?l>i:l<i;l-=u)d=kc([s,-o*Pl(l),-o*Cl(l)]),e.point(d[0],d[1])}}function T_(e,t){(t=Dc(t))[0]-=e,Hc(t);var n=$l(-t[1]);return((-t[2]<0?-n:n)+Sl-wl)%Sl}function x_(){var e,t,n=M_([0,0]),r=M_(90),a=M_(2),i={point:function(n,r){e.push(n=t(n,r)),n[0]*=Al,n[1]*=Al}};function s(){var s=n.apply(this,arguments),o=r.apply(this,arguments)*Hl,u=a.apply(this,arguments)*Hl;return e=[],t=Y_(-s[0]*Hl,-s[1]*Hl,0).invert,D_(i,o,u,1),s={type:"Polygon",coordinates:[e]},e=t=null,s}return s.center=function(e){return arguments.length?(n="function"==typeof e?e:M_([+e[0],+e[1]]),s):n},s.radius=function(e){return arguments.length?(r="function"==typeof e?e:M_(+e),s):r},s.precision=function(e){return arguments.length?(a="function"==typeof e?e:M_(+e),s):a},s}function S_(){var e,t=[];return{point:function(t,n,r){e.push([t,n,r])},lineStart:function(){t.push(e=[])},lineEnd:Gl,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}}function A_(e,t){return jl(e[0]-t[0])<wl&&jl(e[1]-t[1])<wl}function H_(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function j_(e,t,n,r,a){var i,s,o=[],u=[];if(e.forEach((function(e){if(!((t=e.length-1)<=0)){var t,n,r=e[0],s=e[t];if(A_(r,s)){if(!r[2]&&!s[2]){for(a.lineStart(),i=0;i<t;++i)a.point((r=e[i])[0],r[1]);return void a.lineEnd()}s[0]+=2*wl}o.push(n=new H_(r,e,null,!0)),u.push(n.o=new H_(r,null,n,!1)),o.push(n=new H_(s,e,null,!1)),u.push(n.o=new H_(s,null,n,!0))}})),o.length){for(u.sort(t),F_(o),F_(u),i=0,s=u.length;i<s;++i)u[i].e=n=!n;for(var d,l,c=o[0];;){for(var _=c,f=!0;_.v;)if((_=_.n)===c)return;d=_.z,a.lineStart();do{if(_.v=_.o.v=!0,_.e){if(f)for(i=0,s=d.length;i<s;++i)a.point((l=d[i])[0],l[1]);else r(_.x,_.n.x,1,a);_=_.n}else{if(f)for(d=_.p.z,i=d.length-1;i>=0;--i)a.point((l=d[i])[0],l[1]);else r(_.x,_.p.x,-1,a);_=_.p}d=(_=_.o).z,f=!f}while(!_.v);a.lineEnd()}}}function F_(e){if(t=e.length){for(var t,n,r=0,a=e[0];++r<t;)a.n=n=e[r],n.p=a,a=n;a.n=n=e[0],n.p=a}}function O_(e){return jl(e[0])<=Dl?e[0]:Rl(e[0])*((jl(e[0])+Dl)%Sl-Dl)}function P_(e,t){var n=O_(t),r=t[1],a=Cl(r),i=[Cl(n),-Pl(n),0],s=0,o=0,u=new S;1===a?r=Tl+wl:-1===a&&(r=-Tl-wl);for(var d=0,l=e.length;d<l;++d)if(_=(c=e[d]).length)for(var c,_,f=c[_-1],h=O_(f),m=f[1]/2+xl,y=Cl(m),p=Pl(m),M=0;M<_;++M,h=L,y=v,p=b,f=g){var g=c[M],L=O_(g),Y=g[1]/2+xl,v=Cl(Y),b=Pl(Y),w=L-h,k=w>=0?1:-1,D=k*w,T=D>Dl,x=y*v;if(u.add(Ol(x*k*Cl(D),p*b+x*Pl(D))),s+=T?w+k*Sl:w,T^h>=n^L>=n){var A=xc(Dc(f),Dc(g));Hc(A);var H=xc(i,A);Hc(H);var j=(T^w>=0?-1:1)*ql(H[2]);(r>j||r===j&&(A[0]||A[1]))&&(o+=T^w>=0?1:-1)}}return(s<-wl||s<wl&&u<-kl)^1&o}function E_(e,t,n,r){return function(a){var i,s,o,u=t(a),d=S_(),l=t(d),c=!1,_={point:f,lineStart:m,lineEnd:y,polygonStart:function(){_.point=p,_.lineStart=M,_.lineEnd=g,s=[],i=[]},polygonEnd:function(){_.point=f,_.lineStart=m,_.lineEnd=y,s=Se(s);var e=P_(i,r);s.length?(c||(a.polygonStart(),c=!0),j_(s,J_,e,n,a)):e&&(c||(a.polygonStart(),c=!0),a.lineStart(),n(null,null,1,a),a.lineEnd()),c&&(a.polygonEnd(),c=!1),s=i=null},sphere:function(){a.polygonStart(),a.lineStart(),n(null,null,1,a),a.lineEnd(),a.polygonEnd()}};function f(t,n){e(t,n)&&a.point(t,n)}function h(e,t){u.point(e,t)}function m(){_.point=h,u.lineStart()}function y(){_.point=f,u.lineEnd()}function p(e,t){o.push([e,t]),l.point(e,t)}function M(){l.lineStart(),o=[]}function g(){p(o[0][0],o[0][1]),l.lineEnd();var e,t,n,r,u=l.clean(),_=d.result(),f=_.length;if(o.pop(),i.push(o),o=null,f)if(1&u){if((t=(n=_[0]).length-1)>0){for(c||(a.polygonStart(),c=!0),a.lineStart(),e=0;e<t;++e)a.point((r=n[e])[0],r[1]);a.lineEnd()}}else f>1&&2&u&&_.push(_.pop().concat(_.shift())),s.push(_.filter(N_))}return _}}function N_(e){return e.length>1}function J_(e,t){return((e=e.x)[0]<0?e[1]-Tl-wl:Tl-e[1])-((t=t.x)[0]<0?t[1]-Tl-wl:Tl-t[1])}L_.invert=L_;const W_=E_((function(){return!0}),(function(e){var t,n=NaN,r=NaN,a=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(i,s){var o=i>0?Dl:-Dl,u=jl(i-n);jl(u-Dl)<wl?(e.point(n,r=(r+s)/2>0?Tl:-Tl),e.point(a,r),e.lineEnd(),e.lineStart(),e.point(o,r),e.point(i,r),t=0):a!==o&&u>=Dl&&(jl(n-a)<wl&&(n-=a*wl),jl(i-o)<wl&&(i-=o*wl),r=function(e,t,n,r){var a,i,s=Cl(e-n);return jl(s)>wl?Fl((Cl(t)*(i=Pl(r))*Cl(n)-Cl(r)*(a=Pl(t))*Cl(e))/(a*i*s)):(t+r)/2}(n,r,i,s),e.point(a,r),e.lineEnd(),e.lineStart(),e.point(o,r),t=0),e.point(n=i,r=s),a=o},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}}),(function(e,t,n,r){var a;if(null==e)a=n*Tl,r.point(-Dl,a),r.point(0,a),r.point(Dl,a),r.point(Dl,0),r.point(Dl,-a),r.point(0,-a),r.point(-Dl,-a),r.point(-Dl,0),r.point(-Dl,a);else if(jl(e[0]-t[0])>wl){var i=e[0]<t[0]?Dl:-Dl;a=n*i/2,r.point(-i,a),r.point(0,a),r.point(i,a)}else r.point(t[0],t[1])}),[-Dl,-Tl]);function z_(e){var t=Pl(e),n=2*Hl,r=t>0,a=jl(t)>wl;function i(e,n){return Pl(e)*Pl(n)>t}function s(e,n,r){var a=[1,0,0],i=xc(Dc(e),Dc(n)),s=Tc(i,i),o=i[0],u=s-o*o;if(!u)return!r&&e;var d=t*s/u,l=-t*o/u,c=xc(a,i),_=Ac(a,d);Sc(_,Ac(i,l));var f=c,h=Tc(_,f),m=Tc(f,f),y=h*h-m*(Tc(_,_)-1);if(!(y<0)){var p=Il(y),M=Ac(f,(-h-p)/m);if(Sc(M,_),M=kc(M),!r)return M;var g,L=e[0],Y=n[0],v=e[1],b=n[1];Y<L&&(g=L,L=Y,Y=g);var w=Y-L,k=jl(w-Dl)<wl;if(!k&&b<v&&(g=v,v=b,b=g),k||w<wl?k?v+b>0^M[1]<(jl(M[0]-L)<wl?v:b):v<=M[1]&&M[1]<=b:w>Dl^(L<=M[0]&&M[0]<=Y)){var D=Ac(f,(-h+p)/m);return Sc(D,_),[M,kc(D)]}}}function o(t,n){var a=r?e:Dl-e,i=0;return t<-a?i|=1:t>a&&(i|=2),n<-a?i|=4:n>a&&(i|=8),i}return E_(i,(function(e){var t,n,u,d,l;return{lineStart:function(){d=u=!1,l=1},point:function(c,_){var f,h=[c,_],m=i(c,_),y=r?m?0:o(c,_):m?o(c+(c<0?Dl:-Dl),_):0;if(!t&&(d=u=m)&&e.lineStart(),m!==u&&(!(f=s(t,h))||A_(t,f)||A_(h,f))&&(h[2]=1),m!==u)l=0,m?(e.lineStart(),f=s(h,t),e.point(f[0],f[1])):(f=s(t,h),e.point(f[0],f[1],2),e.lineEnd()),t=f;else if(a&&t&&r^m){var p;y&n||!(p=s(h,t,!0))||(l=0,r?(e.lineStart(),e.point(p[0][0],p[0][1]),e.point(p[1][0],p[1][1]),e.lineEnd()):(e.point(p[1][0],p[1][1]),e.lineEnd(),e.lineStart(),e.point(p[0][0],p[0][1],3)))}!m||t&&A_(t,h)||e.point(h[0],h[1]),t=h,u=m,n=y},lineEnd:function(){u&&e.lineEnd(),t=null},clean:function(){return l|(d&&u)<<1}}}),(function(t,r,a,i){D_(i,e,n,a,t,r)}),r?[0,-e]:[-Dl,e-Dl])}var C_,R_,I_,U_,$_=1e9,q_=-$_;function B_(e,t,n,r){function a(a,i){return e<=a&&a<=n&&t<=i&&i<=r}function i(a,i,o,d){var l=0,c=0;if(null==a||(l=s(a,o))!==(c=s(i,o))||u(a,i)<0^o>0)do{d.point(0===l||3===l?e:n,l>1?r:t)}while((l=(l+o+4)%4)!==c);else d.point(i[0],i[1])}function s(r,a){return jl(r[0]-e)<wl?a>0?0:3:jl(r[0]-n)<wl?a>0?2:1:jl(r[1]-t)<wl?a>0?1:0:a>0?3:2}function o(e,t){return u(e.x,t.x)}function u(e,t){var n=s(e,1),r=s(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(s){var u,d,l,c,_,f,h,m,y,p,M,g=s,L=S_(),Y={point:v,lineStart:function(){Y.point=b,d&&d.push(l=[]),p=!0,y=!1,h=m=NaN},lineEnd:function(){u&&(b(c,_),f&&y&&L.rejoin(),u.push(L.result())),Y.point=v,y&&g.lineEnd()},polygonStart:function(){g=L,u=[],d=[],M=!0},polygonEnd:function(){var t=function(){for(var t=0,n=0,a=d.length;n<a;++n)for(var i,s,o=d[n],u=1,l=o.length,c=o[0],_=c[0],f=c[1];u<l;++u)i=_,s=f,_=(c=o[u])[0],f=c[1],s<=r?f>r&&(_-i)*(r-s)>(f-s)*(e-i)&&++t:f<=r&&(_-i)*(r-s)<(f-s)*(e-i)&&--t;return t}(),n=M&&t,a=(u=Se(u)).length;(n||a)&&(s.polygonStart(),n&&(s.lineStart(),i(null,null,1,s),s.lineEnd()),a&&j_(u,o,t,i,s),s.polygonEnd()),g=s,u=d=l=null}};function v(e,t){a(e,t)&&g.point(e,t)}function b(i,s){var o=a(i,s);if(d&&l.push([i,s]),p)c=i,_=s,f=o,p=!1,o&&(g.lineStart(),g.point(i,s));else if(o&&y)g.point(i,s);else{var u=[h=Math.max(q_,Math.min($_,h)),m=Math.max(q_,Math.min($_,m))],L=[i=Math.max(q_,Math.min($_,i)),s=Math.max(q_,Math.min($_,s))];!function(e,t,n,r,a,i){var s,o=e[0],u=e[1],d=0,l=1,c=t[0]-o,_=t[1]-u;if(s=n-o,c||!(s>0)){if(s/=c,c<0){if(s<d)return;s<l&&(l=s)}else if(c>0){if(s>l)return;s>d&&(d=s)}if(s=a-o,c||!(s<0)){if(s/=c,c<0){if(s>l)return;s>d&&(d=s)}else if(c>0){if(s<d)return;s<l&&(l=s)}if(s=r-u,_||!(s>0)){if(s/=_,_<0){if(s<d)return;s<l&&(l=s)}else if(_>0){if(s>l)return;s>d&&(d=s)}if(s=i-u,_||!(s<0)){if(s/=_,_<0){if(s>l)return;s>d&&(d=s)}else if(_>0){if(s<d)return;s<l&&(l=s)}return d>0&&(e[0]=o+d*c,e[1]=u+d*_),l<1&&(t[0]=o+l*c,t[1]=u+l*_),!0}}}}}(u,L,e,t,n,r)?o&&(g.lineStart(),g.point(i,s),M=!1):(y||(g.lineStart(),g.point(u[0],u[1])),g.point(L[0],L[1]),o||g.lineEnd(),M=!1)}h=i,m=s,y=o}return Y}}function G_(){var e,t,n,r=0,a=0,i=960,s=500;return n={stream:function(n){return e&&t===n?e:e=B_(r,a,i,s)(t=n)},extent:function(o){return arguments.length?(r=+o[0][0],a=+o[0][1],i=+o[1][0],s=+o[1][1],e=t=null,n):[[r,a],[i,s]]}}}var V_={sphere:Gl,point:Gl,lineStart:function(){V_.point=K_,V_.lineEnd=Z_},lineEnd:Gl,polygonStart:Gl,polygonEnd:Gl};function Z_(){V_.point=V_.lineEnd=Gl}function K_(e,t){R_=e*=Hl,I_=Cl(t*=Hl),U_=Pl(t),V_.point=X_}function X_(e,t){e*=Hl;var n=Cl(t*=Hl),r=Pl(t),a=jl(e-R_),i=Pl(a),s=r*Cl(a),o=U_*n-I_*r*i,u=I_*n+U_*r*i;C_.add(Ol(Il(s*s+o*o),u)),R_=e,I_=n,U_=r}function Q_(e){return C_=new S,ec(e,V_),+C_}var ef=[null,null],tf={type:"LineString",coordinates:ef};function nf(e,t){return ef[0]=e,ef[1]=t,Q_(tf)}var rf={Feature:function(e,t){return sf(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,a=n.length;++r<a;)if(sf(n[r].geometry,t))return!0;return!1}},af={Sphere:function(){return!0},Point:function(e,t){return of(e.coordinates,t)},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)if(of(n[r],t))return!0;return!1},LineString:function(e,t){return uf(e.coordinates,t)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)if(uf(n[r],t))return!0;return!1},Polygon:function(e,t){return df(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)if(df(n[r],t))return!0;return!1},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,a=n.length;++r<a;)if(sf(n[r],t))return!0;return!1}};function sf(e,t){return!(!e||!af.hasOwnProperty(e.type))&&af[e.type](e,t)}function of(e,t){return 0===nf(e,t)}function uf(e,t){for(var n,r,a,i=0,s=e.length;i<s;i++){if(0===(r=nf(e[i],t)))return!0;if(i>0&&(a=nf(e[i],e[i-1]))>0&&n<=a&&r<=a&&(n+r-a)*(1-Math.pow((n-r)/a,2))<kl*a)return!0;n=r}return!1}function df(e,t){return!!P_(e.map(lf),cf(t))}function lf(e){return(e=e.map(cf)).pop(),e}function cf(e){return[e[0]*Hl,e[1]*Hl]}function _f(e,t){return(e&&rf.hasOwnProperty(e.type)?rf[e.type]:sf)(e,t)}function ff(e,t,n){var r=Fe(e,t-wl,n).concat(t);return function(e){return r.map((function(t){return[e,t]}))}}function hf(e,t,n){var r=Fe(e,t-wl,n).concat(t);return function(e){return r.map((function(t){return[t,e]}))}}function mf(){var e,t,n,r,a,i,s,o,u,d,l,c,_=10,f=_,h=90,m=360,y=2.5;function p(){return{type:"MultiLineString",coordinates:M()}}function M(){return Fe(El(r/h)*h,n,h).map(l).concat(Fe(El(o/m)*m,s,m).map(c)).concat(Fe(El(t/_)*_,e,_).filter((function(e){return jl(e%h)>wl})).map(u)).concat(Fe(El(i/f)*f,a,f).filter((function(e){return jl(e%m)>wl})).map(d))}return p.lines=function(){return M().map((function(e){return{type:"LineString",coordinates:e}}))},p.outline=function(){return{type:"Polygon",coordinates:[l(r).concat(c(s).slice(1),l(n).reverse().slice(1),c(o).reverse().slice(1))]}},p.extent=function(e){return arguments.length?p.extentMajor(e).extentMinor(e):p.extentMinor()},p.extentMajor=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],o=+e[0][1],s=+e[1][1],r>n&&(e=r,r=n,n=e),o>s&&(e=o,o=s,s=e),p.precision(y)):[[r,o],[n,s]]},p.extentMinor=function(n){return arguments.length?(t=+n[0][0],e=+n[1][0],i=+n[0][1],a=+n[1][1],t>e&&(n=t,t=e,e=n),i>a&&(n=i,i=a,a=n),p.precision(y)):[[t,i],[e,a]]},p.step=function(e){return arguments.length?p.stepMajor(e).stepMinor(e):p.stepMinor()},p.stepMajor=function(e){return arguments.length?(h=+e[0],m=+e[1],p):[h,m]},p.stepMinor=function(e){return arguments.length?(_=+e[0],f=+e[1],p):[_,f]},p.precision=function(_){return arguments.length?(y=+_,u=ff(i,a,90),d=hf(t,e,y),l=ff(o,s,90),c=hf(r,n,y),p):y},p.extentMajor([[-180,-90+wl],[180,90-wl]]).extentMinor([[-180,-80-wl],[180,80+wl]])}function yf(){return mf()()}function pf(e,t){var n=e[0]*Hl,r=e[1]*Hl,a=t[0]*Hl,i=t[1]*Hl,s=Pl(r),o=Cl(r),u=Pl(i),d=Cl(i),l=s*Pl(n),c=s*Cl(n),_=u*Pl(a),f=u*Cl(a),h=2*ql(Il(Bl(i-r)+s*u*Bl(a-n))),m=Cl(h),y=h?function(e){var t=Cl(e*=h)/m,n=Cl(h-e)/m,r=n*l+t*_,a=n*c+t*f,i=n*o+t*d;return[Ol(a,r)*Al,Ol(i,Il(r*r+a*a))*Al]}:function(){return[n*Al,r*Al]};return y.distance=h,y}const Mf=e=>e;var gf,Lf,Yf,vf,bf=new S,wf=new S,kf={point:Gl,lineStart:Gl,lineEnd:Gl,polygonStart:function(){kf.lineStart=Df,kf.lineEnd=Sf},polygonEnd:function(){kf.lineStart=kf.lineEnd=kf.point=Gl,bf.add(jl(wf)),wf=new S},result:function(){var e=bf/2;return bf=new S,e}};function Df(){kf.point=Tf}function Tf(e,t){kf.point=xf,gf=Yf=e,Lf=vf=t}function xf(e,t){wf.add(vf*e-Yf*t),Yf=e,vf=t}function Sf(){xf(gf,Lf)}const Af=kf;var Hf=1/0,jf=Hf,Ff=-Hf,Of=Ff,Pf={point:function(e,t){e<Hf&&(Hf=e),e>Ff&&(Ff=e),t<jf&&(jf=t),t>Of&&(Of=t)},lineStart:Gl,lineEnd:Gl,polygonStart:Gl,polygonEnd:Gl,result:function(){var e=[[Hf,jf],[Ff,Of]];return Ff=Of=-(jf=Hf=1/0),e}};const Ef=Pf;var Nf,Jf,Wf,zf,Cf=0,Rf=0,If=0,Uf=0,$f=0,qf=0,Bf=0,Gf=0,Vf=0,Zf={point:Kf,lineStart:Xf,lineEnd:th,polygonStart:function(){Zf.lineStart=nh,Zf.lineEnd=rh},polygonEnd:function(){Zf.point=Kf,Zf.lineStart=Xf,Zf.lineEnd=th},result:function(){var e=Vf?[Bf/Vf,Gf/Vf]:qf?[Uf/qf,$f/qf]:If?[Cf/If,Rf/If]:[NaN,NaN];return Cf=Rf=If=Uf=$f=qf=Bf=Gf=Vf=0,e}};function Kf(e,t){Cf+=e,Rf+=t,++If}function Xf(){Zf.point=Qf}function Qf(e,t){Zf.point=eh,Kf(Wf=e,zf=t)}function eh(e,t){var n=e-Wf,r=t-zf,a=Il(n*n+r*r);Uf+=a*(Wf+e)/2,$f+=a*(zf+t)/2,qf+=a,Kf(Wf=e,zf=t)}function th(){Zf.point=Kf}function nh(){Zf.point=ah}function rh(){ih(Nf,Jf)}function ah(e,t){Zf.point=ih,Kf(Nf=Wf=e,Jf=zf=t)}function ih(e,t){var n=e-Wf,r=t-zf,a=Il(n*n+r*r);Uf+=a*(Wf+e)/2,$f+=a*(zf+t)/2,qf+=a,Bf+=(a=zf*e-Wf*t)*(Wf+e),Gf+=a*(zf+t),Vf+=3*a,Kf(Wf=e,zf=t)}const sh=Zf;function oh(e){this._context=e}oh.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,Sl)}},result:Gl};var uh,dh,lh,ch,_h,fh=new S,hh={point:Gl,lineStart:function(){hh.point=mh},lineEnd:function(){uh&&yh(dh,lh),hh.point=Gl},polygonStart:function(){uh=!0},polygonEnd:function(){uh=null},result:function(){var e=+fh;return fh=new S,e}};function mh(e,t){hh.point=yh,dh=ch=e,lh=_h=t}function yh(e,t){ch-=e,_h-=t,fh.add(Il(ch*ch+_h*_h)),ch=e,_h=t}const ph=hh;let Mh,gh,Lh,Yh;class vh{constructor(e){this._append=null==e?bh:function(e){const t=Math.floor(e);if(!(t>=0))throw new RangeError(`invalid digits: ${e}`);if(t>15)return bh;if(t!==Mh){const e=10**t;Mh=t,gh=function(t){let n=1;this._+=t[0];for(const r=t.length;n<r;++n)this._+=Math.round(arguments[n]*e)/e+t[n]}}return gh}(e),this._radius=4.5,this._=""}pointRadius(e){return this._radius=+e,this}polygonStart(){this._line=0}polygonEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){0===this._line&&(this._+="Z"),this._point=NaN}point(e,t){switch(this._point){case 0:this._append`M${e},${t}`,this._point=1;break;case 1:this._append`L${e},${t}`;break;default:if(this._append`M${e},${t}`,this._radius!==Lh||this._append!==gh){const e=this._radius,t=this._;this._="",this._append`m0,${e}a${e},${e} 0 1,1 0,${-2*e}a${e},${e} 0 1,1 0,${2*e}z`,Lh=e,gh=this._append,Yh=this._,this._=t}this._+=Yh}}result(){const e=this._;return this._="",e.length?e:null}}function bh(e){let t=1;this._+=e[0];for(const n=e.length;t<n;++t)this._+=arguments[t]+e[t]}function wh(e,t){let n,r,a=3,i=4.5;function s(e){return e&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),ec(e,n(r))),r.result()}return s.area=function(e){return ec(e,n(Af)),Af.result()},s.measure=function(e){return ec(e,n(ph)),ph.result()},s.bounds=function(e){return ec(e,n(Ef)),Ef.result()},s.centroid=function(e){return ec(e,n(sh)),sh.result()},s.projection=function(t){return arguments.length?(n=null==t?(e=null,Mf):(e=t).stream,s):e},s.context=function(e){return arguments.length?(r=null==e?(t=null,new vh(a)):new oh(t=e),"function"!=typeof i&&r.pointRadius(i),s):t},s.pointRadius=function(e){return arguments.length?(i="function"==typeof e?e:(r.pointRadius(+e),+e),s):i},s.digits=function(e){if(!arguments.length)return a;if(null==e)a=null;else{const t=Math.floor(e);if(!(t>=0))throw new RangeError(`invalid digits: ${e}`);a=t}return null===t&&(r=new vh(a)),s},s.projection(e).digits(a).context(t)}function kh(e){return{stream:Dh(e)}}function Dh(e){return function(t){var n=new Th;for(var r in e)n[r]=e[r];return n.stream=t,n}}function Th(){}function xh(e,t,n){var r=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),null!=r&&e.clipExtent(null),ec(n,e.stream(Ef)),t(Ef.result()),null!=r&&e.clipExtent(r),e}function Sh(e,t,n){return xh(e,(function(n){var r=t[1][0]-t[0][0],a=t[1][1]-t[0][1],i=Math.min(r/(n[1][0]-n[0][0]),a/(n[1][1]-n[0][1])),s=+t[0][0]+(r-i*(n[1][0]+n[0][0]))/2,o=+t[0][1]+(a-i*(n[1][1]+n[0][1]))/2;e.scale(150*i).translate([s,o])}),n)}function Ah(e,t,n){return Sh(e,[[0,0],t],n)}function Hh(e,t,n){return xh(e,(function(n){var r=+t,a=r/(n[1][0]-n[0][0]),i=(r-a*(n[1][0]+n[0][0]))/2,s=-a*n[0][1];e.scale(150*a).translate([i,s])}),n)}function jh(e,t,n){return xh(e,(function(n){var r=+t,a=r/(n[1][1]-n[0][1]),i=-a*n[0][0],s=(r-a*(n[1][1]+n[0][1]))/2;e.scale(150*a).translate([i,s])}),n)}Th.prototype={constructor:Th,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Fh=16,Oh=Pl(30*Hl);function Ph(e,t){return+t?function(e,t){function n(r,a,i,s,o,u,d,l,c,_,f,h,m,y){var p=d-r,M=l-a,g=p*p+M*M;if(g>4*t&&m--){var L=s+_,Y=o+f,v=u+h,b=Il(L*L+Y*Y+v*v),w=ql(v/=b),k=jl(jl(v)-1)<wl||jl(i-c)<wl?(i+c)/2:Ol(Y,L),D=e(k,w),T=D[0],x=D[1],S=T-r,A=x-a,H=M*S-p*A;(H*H/g>t||jl((p*S+M*A)/g-.5)>.3||s*_+o*f+u*h<Oh)&&(n(r,a,i,s,o,u,T,x,k,L/=b,Y/=b,v,m,y),y.point(T,x),n(T,x,k,L,Y,v,d,l,c,_,f,h,m,y))}}return function(t){var r,a,i,s,o,u,d,l,c,_,f,h,m={point:y,lineStart:p,lineEnd:g,polygonStart:function(){t.polygonStart(),m.lineStart=L},polygonEnd:function(){t.polygonEnd(),m.lineStart=p}};function y(n,r){n=e(n,r),t.point(n[0],n[1])}function p(){l=NaN,m.point=M,t.lineStart()}function M(r,a){var i=Dc([r,a]),s=e(r,a);n(l,c,d,_,f,h,l=s[0],c=s[1],d=r,_=i[0],f=i[1],h=i[2],Fh,t),t.point(l,c)}function g(){m.point=y,t.lineEnd()}function L(){p(),m.point=Y,m.lineEnd=v}function Y(e,t){M(r=e,t),a=l,i=c,s=_,o=f,u=h,m.point=M}function v(){n(l,c,d,_,f,h,a,i,r,s,o,u,Fh,t),m.lineEnd=g,g()}return m}}(e,t):function(e){return Dh({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}(e)}var Eh=Dh({point:function(e,t){this.stream.point(e*Hl,t*Hl)}});function Nh(e,t,n,r,a,i){if(!i)return function(e,t,n,r,a){function i(i,s){return[t+e*(i*=r),n-e*(s*=a)]}return i.invert=function(i,s){return[(i-t)/e*r,(n-s)/e*a]},i}(e,t,n,r,a);var s=Pl(i),o=Cl(i),u=s*e,d=o*e,l=s/e,c=o/e,_=(o*n-s*t)/e,f=(o*t+s*n)/e;function h(e,i){return[u*(e*=r)-d*(i*=a)+t,n-d*e-u*i]}return h.invert=function(e,t){return[r*(l*e-c*t+_),a*(f-c*e-l*t)]},h}function Jh(e){return Wh((function(){return e}))()}function Wh(e){var t,n,r,a,i,s,o,u,d,l,c=150,_=480,f=250,h=0,m=0,y=0,p=0,M=0,g=0,L=1,Y=1,v=null,b=W_,w=null,k=Mf,D=.5;function T(e){return u(e[0]*Hl,e[1]*Hl)}function x(e){return(e=u.invert(e[0],e[1]))&&[e[0]*Al,e[1]*Al]}function S(){var e=Nh(c,0,0,L,Y,g).apply(null,t(h,m)),r=Nh(c,_-e[0],f-e[1],L,Y,g);return n=Y_(y,p,M),o=g_(t,r),u=g_(n,o),s=Ph(o,D),A()}function A(){return d=l=null,T}return T.stream=function(e){return d&&l===e?d:d=Eh(function(e){return Dh({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}(n)(b(s(k(l=e)))))},T.preclip=function(e){return arguments.length?(b=e,v=void 0,A()):b},T.postclip=function(e){return arguments.length?(k=e,w=r=a=i=null,A()):k},T.clipAngle=function(e){return arguments.length?(b=+e?z_(v=e*Hl):(v=null,W_),A()):v*Al},T.clipExtent=function(e){return arguments.length?(k=null==e?(w=r=a=i=null,Mf):B_(w=+e[0][0],r=+e[0][1],a=+e[1][0],i=+e[1][1]),A()):null==w?null:[[w,r],[a,i]]},T.scale=function(e){return arguments.length?(c=+e,S()):c},T.translate=function(e){return arguments.length?(_=+e[0],f=+e[1],S()):[_,f]},T.center=function(e){return arguments.length?(h=e[0]%360*Hl,m=e[1]%360*Hl,S()):[h*Al,m*Al]},T.rotate=function(e){return arguments.length?(y=e[0]%360*Hl,p=e[1]%360*Hl,M=e.length>2?e[2]%360*Hl:0,S()):[y*Al,p*Al,M*Al]},T.angle=function(e){return arguments.length?(g=e%360*Hl,S()):g*Al},T.reflectX=function(e){return arguments.length?(L=e?-1:1,S()):L<0},T.reflectY=function(e){return arguments.length?(Y=e?-1:1,S()):Y<0},T.precision=function(e){return arguments.length?(s=Ph(o,D=e*e),A()):Il(D)},T.fitExtent=function(e,t){return Sh(T,e,t)},T.fitSize=function(e,t){return Ah(T,e,t)},T.fitWidth=function(e,t){return Hh(T,e,t)},T.fitHeight=function(e,t){return jh(T,e,t)},function(){return t=e.apply(this,arguments),T.invert=t.invert&&x,S()}}function zh(e){var t=0,n=Dl/3,r=Wh(e),a=r(t,n);return a.parallels=function(e){return arguments.length?r(t=e[0]*Hl,n=e[1]*Hl):[t*Al,n*Al]},a}function Ch(e,t){var n=Cl(e),r=(n+Cl(t))/2;if(jl(r)<wl)return function(e){var t=Pl(e);function n(e,n){return[e*t,Cl(n)/t]}return n.invert=function(e,n){return[e/t,ql(n*t)]},n}(e);var a=1+n*(2*r-n),i=Il(a)/r;function s(e,t){var n=Il(a-2*r*Cl(t))/r;return[n*Cl(e*=r),i-n*Pl(e)]}return s.invert=function(e,t){var n=i-t,s=Ol(e,jl(n))*Rl(n);return n*r<0&&(s-=Dl*Rl(e)*Rl(n)),[s/r,ql((a-(e*e+n*n)*r*r)/(2*r))]},s}function Rh(){return zh(Ch).scale(155.424).center([0,33.6442])}function Ih(){return Rh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Uh(){var e,t,n,r,a,i,s=Ih(),o=Rh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=Rh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),d={point:function(e,t){i=[e,t]}};function l(e){var t=e[0],s=e[1];return i=null,n.point(t,s),i||(r.point(t,s),i)||(a.point(t,s),i)}function c(){return e=t=null,l}return l.invert=function(e){var t=s.scale(),n=s.translate(),r=(e[0]-n[0])/t,a=(e[1]-n[1])/t;return(a>=.12&&a<.234&&r>=-.425&&r<-.214?o:a>=.166&&a<.234&&r>=-.214&&r<-.115?u:s).invert(e)},l.stream=function(n){return e&&t===n?e:(r=[s.stream(t=n),o.stream(n),u.stream(n)],a=r.length,e={point:function(e,t){for(var n=-1;++n<a;)r[n].point(e,t)},sphere:function(){for(var e=-1;++e<a;)r[e].sphere()},lineStart:function(){for(var e=-1;++e<a;)r[e].lineStart()},lineEnd:function(){for(var e=-1;++e<a;)r[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<a;)r[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<a;)r[e].polygonEnd()}});var r,a},l.precision=function(e){return arguments.length?(s.precision(e),o.precision(e),u.precision(e),c()):s.precision()},l.scale=function(e){return arguments.length?(s.scale(e),o.scale(.35*e),u.scale(e),l.translate(s.translate())):s.scale()},l.translate=function(e){if(!arguments.length)return s.translate();var t=s.scale(),i=+e[0],l=+e[1];return n=s.translate(e).clipExtent([[i-.455*t,l-.238*t],[i+.455*t,l+.238*t]]).stream(d),r=o.translate([i-.307*t,l+.201*t]).clipExtent([[i-.425*t+wl,l+.12*t+wl],[i-.214*t-wl,l+.234*t-wl]]).stream(d),a=u.translate([i-.205*t,l+.212*t]).clipExtent([[i-.214*t+wl,l+.166*t+wl],[i-.115*t-wl,l+.234*t-wl]]).stream(d),c()},l.fitExtent=function(e,t){return Sh(l,e,t)},l.fitSize=function(e,t){return Ah(l,e,t)},l.fitWidth=function(e,t){return Hh(l,e,t)},l.fitHeight=function(e,t){return jh(l,e,t)},l.scale(1070)}function $h(e){return function(t,n){var r=Pl(t),a=Pl(n),i=e(r*a);return i===1/0?[2,0]:[i*a*Cl(t),i*Cl(n)]}}function qh(e){return function(t,n){var r=Il(t*t+n*n),a=e(r),i=Cl(a),s=Pl(a);return[Ol(t*i,r*s),ql(r&&n*i/r)]}}var Bh=$h((function(e){return Il(2/(1+e))}));function Gh(){return Jh(Bh).scale(124.75).clipAngle(179.999)}Bh.invert=qh((function(e){return 2*ql(e/2)}));var Vh=$h((function(e){return(e=$l(e))&&e/Cl(e)}));function Zh(){return Jh(Vh).scale(79.4188).clipAngle(179.999)}function Kh(e,t){return[e,Wl(Ul((Tl+t)/2))]}function Xh(){return Qh(Kh).scale(961/Sl)}function Qh(e){var t,n,r,a=Jh(e),i=a.center,s=a.scale,o=a.translate,u=a.clipExtent,d=null;function l(){var i=Dl*s(),o=a(k_(a.rotate()).invert([0,0]));return u(null==d?[[o[0]-i,o[1]-i],[o[0]+i,o[1]+i]]:e===Kh?[[Math.max(o[0]-i,d),t],[Math.min(o[0]+i,n),r]]:[[d,Math.max(o[1]-i,t)],[n,Math.min(o[1]+i,r)]])}return a.scale=function(e){return arguments.length?(s(e),l()):s()},a.translate=function(e){return arguments.length?(o(e),l()):o()},a.center=function(e){return arguments.length?(i(e),l()):i()},a.clipExtent=function(e){return arguments.length?(null==e?d=t=n=r=null:(d=+e[0][0],t=+e[0][1],n=+e[1][0],r=+e[1][1]),l()):null==d?null:[[d,t],[n,r]]},l()}function em(e){return Ul((Tl+e)/2)}function tm(e,t){var n=Pl(e),r=e===t?Cl(e):Wl(n/Pl(t))/Wl(em(t)/em(e)),a=n*zl(em(e),r)/r;if(!r)return Kh;function i(e,t){a>0?t<-Tl+wl&&(t=-Tl+wl):t>Tl-wl&&(t=Tl-wl);var n=a/zl(em(t),r);return[n*Cl(r*e),a-n*Pl(r*e)]}return i.invert=function(e,t){var n=a-t,i=Rl(r)*Il(e*e+n*n),s=Ol(e,jl(n))*Rl(n);return n*r<0&&(s-=Dl*Rl(e)*Rl(n)),[s/r,2*Fl(zl(a/i,1/r))-Tl]},i}function nm(){return zh(tm).scale(109.5).parallels([30,30])}function rm(e,t){return[e,t]}function am(){return Jh(rm).scale(152.63)}function im(e,t){var n=Pl(e),r=e===t?Cl(e):(n-Pl(t))/(t-e),a=n/r+e;if(jl(r)<wl)return rm;function i(e,t){var n=a-t,i=r*e;return[n*Cl(i),a-n*Pl(i)]}return i.invert=function(e,t){var n=a-t,i=Ol(e,jl(n))*Rl(n);return n*r<0&&(i-=Dl*Rl(e)*Rl(n)),[i/r,a-Rl(r)*Il(e*e+n*n)]},i}function sm(){return zh(im).scale(131.154).center([0,13.9389])}Vh.invert=qh((function(e){return e})),Kh.invert=function(e,t){return[e,2*Fl(Nl(t))-Tl]},rm.invert=rm;var om=1.340264,um=-.081106,dm=893e-6,lm=.003796,cm=Il(3)/2;function _m(e,t){var n=ql(cm*Cl(t)),r=n*n,a=r*r*r;return[e*Pl(n)/(cm*(om+3*um*r+a*(7*dm+9*lm*r))),n*(om+um*r+a*(dm+lm*r))]}function fm(){return Jh(_m).scale(177.158)}function hm(e,t){var n=Pl(t),r=Pl(e)*n;return[n*Cl(e)/r,Cl(t)/r]}function mm(){return Jh(hm).scale(144.049).clipAngle(60)}function ym(){var e,t,n,r,a,i,s,o=1,u=0,d=0,l=1,c=1,_=0,f=null,h=1,m=1,y=Dh({point:function(e,t){var n=g([e,t]);this.stream.point(n[0],n[1])}}),p=Mf;function M(){return h=o*l,m=o*c,i=s=null,g}function g(n){var r=n[0]*h,a=n[1]*m;if(_){var i=a*e-r*t;r=r*e+a*t,a=i}return[r+u,a+d]}return g.invert=function(n){var r=n[0]-u,a=n[1]-d;if(_){var i=a*e+r*t;r=r*e-a*t,a=i}return[r/h,a/m]},g.stream=function(e){return i&&s===e?i:i=y(p(s=e))},g.postclip=function(e){return arguments.length?(p=e,f=n=r=a=null,M()):p},g.clipExtent=function(e){return arguments.length?(p=null==e?(f=n=r=a=null,Mf):B_(f=+e[0][0],n=+e[0][1],r=+e[1][0],a=+e[1][1]),M()):null==f?null:[[f,n],[r,a]]},g.scale=function(e){return arguments.length?(o=+e,M()):o},g.translate=function(e){return arguments.length?(u=+e[0],d=+e[1],M()):[u,d]},g.angle=function(n){return arguments.length?(t=Cl(_=n%360*Hl),e=Pl(_),M()):_*Al},g.reflectX=function(e){return arguments.length?(l=e?-1:1,M()):l<0},g.reflectY=function(e){return arguments.length?(c=e?-1:1,M()):c<0},g.fitExtent=function(e,t){return Sh(g,e,t)},g.fitSize=function(e,t){return Ah(g,e,t)},g.fitWidth=function(e,t){return Hh(g,e,t)},g.fitHeight=function(e,t){return jh(g,e,t)},g}function pm(e,t){var n=t*t,r=n*n;return[e*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),t*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}function Mm(){return Jh(pm).scale(175.295)}function gm(e,t){return[Pl(t)*Cl(e),Cl(t)]}function Lm(){return Jh(gm).scale(249.5).clipAngle(90+wl)}function Ym(e,t){var n=Pl(t),r=1+Pl(e)*n;return[n*Cl(e)/r,Cl(t)/r]}function vm(){return Jh(Ym).scale(250).clipAngle(142)}function bm(e,t){return[Wl(Ul((Tl+t)/2)),-e]}function wm(){var e=Qh(bm),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):[(e=t())[1],-e[0]]},e.rotate=function(e){return arguments.length?n([e[0],e[1],e.length>2?e[2]+90:90]):[(e=n())[0],e[1],e[2]-90]},n([0,0,90]).scale(159.155)}function km(e,t){return e.parent===t.parent?1:2}function Dm(e,t){return e+t.x}function Tm(e,t){return Math.max(e,t.y)}function xm(){var e=km,t=1,n=1,r=!1;function a(a){var i,s=0;a.eachAfter((function(t){var n=t.children;n?(t.x=function(e){return e.reduce(Dm,0)/e.length}(n),t.y=function(e){return 1+e.reduce(Tm,0)}(n)):(t.x=i?s+=e(t,i):0,t.y=0,i=t)}));var o=function(e){for(var t;t=e.children;)e=t[0];return e}(a),u=function(e){for(var t;t=e.children;)e=t[t.length-1];return e}(a),d=o.x-e(o,u)/2,l=u.x+e(u,o)/2;return a.eachAfter(r?function(e){e.x=(e.x-a.x)*t,e.y=(a.y-e.y)*n}:function(e){e.x=(e.x-d)/(l-d)*t,e.y=(1-(a.y?e.y/a.y:1))*n})}return a.separation=function(t){return arguments.length?(e=t,a):e},a.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],a):r?null:[t,n]},a.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],a):r?[t,n]:null},a}function Sm(e){var t=0,n=e.children,r=n&&n.length;if(r)for(;--r>=0;)t+=n[r].value;else t=1;e.value=t}function Am(e,t){e instanceof Map?(e=[void 0,e],void 0===t&&(t=jm)):void 0===t&&(t=Hm);for(var n,r,a,i,s,o=new Pm(e),u=[o];n=u.pop();)if((a=t(n.data))&&(s=(a=Array.from(a)).length))for(n.children=a,i=s-1;i>=0;--i)u.push(r=a[i]=new Pm(a[i])),r.parent=n,r.depth=n.depth+1;return o.eachBefore(Om)}function Hm(e){return e.children}function jm(e){return Array.isArray(e)?e[1]:null}function Fm(e){void 0!==e.data.value&&(e.value=e.data.value),e.data=e.data.data}function Om(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function Pm(e){this.data=e,this.depth=this.height=0,this.parent=null}function Em(e){return null==e?null:Nm(e)}function Nm(e){if("function"!=typeof e)throw new Error;return e}function Jm(){return 0}function Wm(e){return function(){return e}}_m.invert=function(e,t){for(var n,r=t,a=r*r,i=a*a*a,s=0;s<12&&(i=(a=(r-=n=(r*(om+um*a+i*(dm+lm*a))-t)/(om+3*um*a+i*(7*dm+9*lm*a)))*r)*a*a,!(jl(n)<kl));++s);return[cm*e*(om+3*um*a+i*(7*dm+9*lm*a))/Pl(r),ql(Cl(r)/cm)]},hm.invert=qh(Fl),pm.invert=function(e,t){var n,r=t,a=25;do{var i=r*r,s=i*i;r-=n=(r*(1.007226+i*(.015085+s*(.028874*i-.044475-.005916*s)))-t)/(1.007226+i*(.045255+s*(.259866*i-.311325-.005916*11*s)))}while(jl(n)>wl&&--a>0);return[e/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]},gm.invert=qh(ql),Ym.invert=qh((function(e){return 2*Fl(e)})),bm.invert=function(e,t){return[-t,2*Fl(Nl(e))-Tl]},Pm.prototype=Am.prototype={constructor:Pm,count:function(){return this.eachAfter(Sm)},each:function(e,t){let n=-1;for(const r of this)e.call(t,r,++n,this);return this},eachAfter:function(e,t){for(var n,r,a,i=this,s=[i],o=[],u=-1;i=s.pop();)if(o.push(i),n=i.children)for(r=0,a=n.length;r<a;++r)s.push(n[r]);for(;i=o.pop();)e.call(t,i,++u,this);return this},eachBefore:function(e,t){for(var n,r,a=this,i=[a],s=-1;a=i.pop();)if(e.call(t,a,++s,this),n=a.children)for(r=n.length-1;r>=0;--r)i.push(n[r]);return this},find:function(e,t){let n=-1;for(const r of this)if(e.call(t,r,++n,this))return r},sum:function(e){return this.eachAfter((function(t){for(var n=+e(t.data)||0,r=t.children,a=r&&r.length;--a>=0;)n+=r[a].value;t.value=n}))},sort:function(e){return this.eachBefore((function(t){t.children&&t.children.sort(e)}))},path:function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),a=null;for(e=n.pop(),t=r.pop();e===t;)a=e,e=n.pop(),t=r.pop();return a}(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var a=r.length;e!==n;)r.splice(a,0,e),e=e.parent;return r},ancestors:function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t},descendants:function(){return Array.from(this)},leaves:function(){var e=[];return this.eachBefore((function(t){t.children||e.push(t)})),e},links:function(){var e=this,t=[];return e.each((function(n){n!==e&&t.push({source:n.parent,target:n})})),t},copy:function(){return Am(this).eachBefore(Fm)},[Symbol.iterator]:function*(){var e,t,n,r,a=this,i=[a];do{for(e=i.reverse(),i=[];a=e.pop();)if(yield a,t=a.children)for(n=0,r=t.length;n<r;++n)i.push(t[n])}while(i.length)}};const zm=1664525,Cm=1013904223,Rm=4294967296;function Im(){let e=1;return()=>(e=(zm*e+Cm)%Rm)/Rm}function Um(e){return $m(e,Im())}function $m(e,t){for(var n,r,a=0,i=(e=function(e,t){let n,r,a=e.length;for(;a;)r=t()*a--|0,n=e[a],e[a]=e[r],e[r]=n;return e}(Array.from(e),t)).length,s=[];a<i;)n=e[a],r&&Gm(r,n)?++a:(r=Zm(s=qm(s,n)),a=0);return r}function qm(e,t){var n,r;if(Vm(t,e))return[t];for(n=0;n<e.length;++n)if(Bm(t,e[n])&&Vm(Km(e[n],t),e))return[e[n],t];for(n=0;n<e.length-1;++n)for(r=n+1;r<e.length;++r)if(Bm(Km(e[n],e[r]),t)&&Bm(Km(e[n],t),e[r])&&Bm(Km(e[r],t),e[n])&&Vm(Xm(e[n],e[r],t),e))return[e[n],e[r],t];throw new Error}function Bm(e,t){var n=e.r-t.r,r=t.x-e.x,a=t.y-e.y;return n<0||n*n<r*r+a*a}function Gm(e,t){var n=e.r-t.r+1e-9*Math.max(e.r,t.r,1),r=t.x-e.x,a=t.y-e.y;return n>0&&n*n>r*r+a*a}function Vm(e,t){for(var n=0;n<t.length;++n)if(!Gm(e,t[n]))return!1;return!0}function Zm(e){switch(e.length){case 1:return function(e){return{x:e.x,y:e.y,r:e.r}}(e[0]);case 2:return Km(e[0],e[1]);case 3:return Xm(e[0],e[1],e[2])}}function Km(e,t){var n=e.x,r=e.y,a=e.r,i=t.x,s=t.y,o=t.r,u=i-n,d=s-r,l=o-a,c=Math.sqrt(u*u+d*d);return{x:(n+i+u/c*l)/2,y:(r+s+d/c*l)/2,r:(c+a+o)/2}}function Xm(e,t,n){var r=e.x,a=e.y,i=e.r,s=t.x,o=t.y,u=t.r,d=n.x,l=n.y,c=n.r,_=r-s,f=r-d,h=a-o,m=a-l,y=u-i,p=c-i,M=r*r+a*a-i*i,g=M-s*s-o*o+u*u,L=M-d*d-l*l+c*c,Y=f*h-_*m,v=(h*L-m*g)/(2*Y)-r,b=(m*y-h*p)/Y,w=(f*g-_*L)/(2*Y)-a,k=(_*p-f*y)/Y,D=b*b+k*k-1,T=2*(i+v*b+w*k),x=v*v+w*w-i*i,S=-(Math.abs(D)>1e-6?(T+Math.sqrt(T*T-4*D*x))/(2*D):x/T);return{x:r+v+b*S,y:a+w+k*S,r:S}}function Qm(e,t,n){var r,a,i,s,o=e.x-t.x,u=e.y-t.y,d=o*o+u*u;d?(a=t.r+n.r,a*=a,s=e.r+n.r,a>(s*=s)?(r=(d+s-a)/(2*d),i=Math.sqrt(Math.max(0,s/d-r*r)),n.x=e.x-r*o-i*u,n.y=e.y-r*u+i*o):(r=(d+a-s)/(2*d),i=Math.sqrt(Math.max(0,a/d-r*r)),n.x=t.x+r*o-i*u,n.y=t.y+r*u+i*o)):(n.x=t.x+n.r,n.y=t.y)}function ey(e,t){var n=e.r+t.r-1e-6,r=t.x-e.x,a=t.y-e.y;return n>0&&n*n>r*r+a*a}function ty(e){var t=e._,n=e.next._,r=t.r+n.r,a=(t.x*n.r+n.x*t.r)/r,i=(t.y*n.r+n.y*t.r)/r;return a*a+i*i}function ny(e){this._=e,this.next=null,this.previous=null}function ry(e,t){if(!(s=(n=e,e="object"==typeof n&&"length"in n?n:Array.from(n)).length))return 0;var n,r,a,i,s,o,u,d,l,c,_,f;if((r=e[0]).x=0,r.y=0,!(s>1))return r.r;if(a=e[1],r.x=-a.r,a.x=r.r,a.y=0,!(s>2))return r.r+a.r;Qm(a,r,i=e[2]),r=new ny(r),a=new ny(a),i=new ny(i),r.next=i.previous=a,a.next=r.previous=i,i.next=a.previous=r;e:for(d=3;d<s;++d){Qm(r._,a._,i=e[d]),i=new ny(i),l=a.next,c=r.previous,_=a._.r,f=r._.r;do{if(_<=f){if(ey(l._,i._)){a=l,r.next=a,a.previous=r,--d;continue e}_+=l._.r,l=l.next}else{if(ey(c._,i._)){(r=c).next=a,a.previous=r,--d;continue e}f+=c._.r,c=c.previous}}while(l!==c.next);for(i.previous=r,i.next=a,r.next=a.previous=a=i,o=ty(r);(i=i.next)!==a;)(u=ty(i))<o&&(r=i,o=u);a=r.next}for(r=[a._],i=a;(i=i.next)!==a;)r.push(i._);for(i=$m(r,t),d=0;d<s;++d)(r=e[d]).x-=i.x,r.y-=i.y;return i.r}function ay(e){return ry(e,Im()),e}function iy(e){return Math.sqrt(e.value)}function sy(){var e=null,t=1,n=1,r=Jm;function a(a){const i=Im();return a.x=t/2,a.y=n/2,e?a.eachBefore(oy(e)).eachAfter(uy(r,.5,i)).eachBefore(dy(1)):a.eachBefore(oy(iy)).eachAfter(uy(Jm,1,i)).eachAfter(uy(r,a.r/Math.min(t,n),i)).eachBefore(dy(Math.min(t,n)/(2*a.r))),a}return a.radius=function(t){return arguments.length?(e=Em(t),a):e},a.size=function(e){return arguments.length?(t=+e[0],n=+e[1],a):[t,n]},a.padding=function(e){return arguments.length?(r="function"==typeof e?e:Wm(+e),a):r},a}function oy(e){return function(t){t.children||(t.r=Math.max(0,+e(t)||0))}}function uy(e,t,n){return function(r){if(a=r.children){var a,i,s,o=a.length,u=e(r)*t||0;if(u)for(i=0;i<o;++i)a[i].r+=u;if(s=ry(a,n),u)for(i=0;i<o;++i)a[i].r-=u;r.r=s+u}}}function dy(e){return function(t){var n=t.parent;t.r*=e,n&&(t.x=n.x+e*t.x,t.y=n.y+e*t.y)}}function ly(e){e.x0=Math.round(e.x0),e.y0=Math.round(e.y0),e.x1=Math.round(e.x1),e.y1=Math.round(e.y1)}function cy(e,t,n,r,a){for(var i,s=e.children,o=-1,u=s.length,d=e.value&&(r-t)/e.value;++o<u;)(i=s[o]).y0=n,i.y1=a,i.x0=t,i.x1=t+=i.value*d}function _y(){var e=1,t=1,n=0,r=!1;function a(a){var i=a.height+1;return a.x0=a.y0=n,a.x1=e,a.y1=t/i,a.eachBefore(function(e,t){return function(r){r.children&&cy(r,r.x0,e*(r.depth+1)/t,r.x1,e*(r.depth+2)/t);var a=r.x0,i=r.y0,s=r.x1-n,o=r.y1-n;s<a&&(a=s=(a+s)/2),o<i&&(i=o=(i+o)/2),r.x0=a,r.y0=i,r.x1=s,r.y1=o}}(t,i)),r&&a.eachBefore(ly),a}return a.round=function(e){return arguments.length?(r=!!e,a):r},a.size=function(n){return arguments.length?(e=+n[0],t=+n[1],a):[e,t]},a.padding=function(e){return arguments.length?(n=+e,a):n},a}var fy={depth:-1},hy={},my={};function yy(e){return e.id}function py(e){return e.parentId}function My(){var e,t=yy,n=py;function r(r){var a,i,s,o,u,d,l,c,_=Array.from(r),f=t,h=n,m=new Map;if(null!=e){const t=_.map(((t,n)=>function(e){let t=(e=`${e}`).length;return Ly(e,t-1)&&!Ly(e,t-2)&&(e=e.slice(0,-1)),"/"===e[0]?e:`/${e}`}(e(t,n,r)))),n=t.map(gy),a=new Set(t).add("");for(const e of n)a.has(e)||(a.add(e),t.push(e),n.push(gy(e)),_.push(my));f=(e,n)=>t[n],h=(e,t)=>n[t]}for(s=0,a=_.length;s<a;++s)i=_[s],d=_[s]=new Pm(i),null!=(l=f(i,s,r))&&(l+="")&&(c=d.id=l,m.set(c,m.has(c)?hy:d)),null!=(l=h(i,s,r))&&(l+="")&&(d.parent=l);for(s=0;s<a;++s)if(l=(d=_[s]).parent){if(!(u=m.get(l)))throw new Error("missing: "+l);if(u===hy)throw new Error("ambiguous: "+l);u.children?u.children.push(d):u.children=[d],d.parent=u}else{if(o)throw new Error("multiple roots");o=d}if(!o)throw new Error("no root");if(null!=e){for(;o.data===my&&1===o.children.length;)o=o.children[0],--a;for(let e=_.length-1;e>=0&&(d=_[e]).data===my;--e)d.data=null}if(o.parent=fy,o.eachBefore((function(e){e.depth=e.parent.depth+1,--a})).eachBefore(Om),o.parent=null,a>0)throw new Error("cycle");return o}return r.id=function(e){return arguments.length?(t=Em(e),r):t},r.parentId=function(e){return arguments.length?(n=Em(e),r):n},r.path=function(t){return arguments.length?(e=Em(t),r):e},r}function gy(e){let t=e.length;if(t<2)return"";for(;--t>1&&!Ly(e,t););return e.slice(0,t)}function Ly(e,t){if("/"===e[t]){let n=0;for(;t>0&&"\\"===e[--t];)++n;if(!(1&n))return!0}return!1}function Yy(e,t){return e.parent===t.parent?1:2}function vy(e){var t=e.children;return t?t[0]:e.t}function by(e){var t=e.children;return t?t[t.length-1]:e.t}function wy(e,t,n){var r=n/(t.i-e.i);t.c-=r,t.s+=n,e.c+=r,t.z+=n,t.m+=n}function ky(e,t,n){return e.a.parent===t.parent?e.a:n}function Dy(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}function Ty(){var e=Yy,t=1,n=1,r=null;function a(a){var u=function(e){for(var t,n,r,a,i,s=new Dy(e,0),o=[s];t=o.pop();)if(r=t._.children)for(t.children=new Array(i=r.length),a=i-1;a>=0;--a)o.push(n=t.children[a]=new Dy(r[a],a)),n.parent=t;return(s.parent=new Dy(null,0)).children=[s],s}(a);if(u.eachAfter(i),u.parent.m=-u.z,u.eachBefore(s),r)a.eachBefore(o);else{var d=a,l=a,c=a;a.eachBefore((function(e){e.x<d.x&&(d=e),e.x>l.x&&(l=e),e.depth>c.depth&&(c=e)}));var _=d===l?1:e(d,l)/2,f=_-d.x,h=t/(l.x+_+f),m=n/(c.depth||1);a.eachBefore((function(e){e.x=(e.x+f)*h,e.y=e.depth*m}))}return a}function i(t){var n=t.children,r=t.parent.children,a=t.i?r[t.i-1]:null;if(n){!function(e){for(var t,n=0,r=0,a=e.children,i=a.length;--i>=0;)(t=a[i]).z+=n,t.m+=n,n+=t.s+(r+=t.c)}(t);var i=(n[0].z+n[n.length-1].z)/2;a?(t.z=a.z+e(t._,a._),t.m=t.z-i):t.z=i}else a&&(t.z=a.z+e(t._,a._));t.parent.A=function(t,n,r){if(n){for(var a,i=t,s=t,o=n,u=i.parent.children[0],d=i.m,l=s.m,c=o.m,_=u.m;o=by(o),i=vy(i),o&&i;)u=vy(u),(s=by(s)).a=t,(a=o.z+c-i.z-d+e(o._,i._))>0&&(wy(ky(o,t,r),t,a),d+=a,l+=a),c+=o.m,d+=i.m,_+=u.m,l+=s.m;o&&!by(s)&&(s.t=o,s.m+=c-l),i&&!vy(u)&&(u.t=i,u.m+=d-_,r=t)}return r}(t,a,t.parent.A||r[0])}function s(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function o(e){e.x*=t,e.y=e.depth*n}return a.separation=function(t){return arguments.length?(e=t,a):e},a.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],a):r?null:[t,n]},a.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],a):r?[t,n]:null},a}function xy(e,t,n,r,a){for(var i,s=e.children,o=-1,u=s.length,d=e.value&&(a-n)/e.value;++o<u;)(i=s[o]).x0=t,i.x1=r,i.y0=n,i.y1=n+=i.value*d}Dy.prototype=Object.create(Pm.prototype);var Sy=(1+Math.sqrt(5))/2;function Ay(e,t,n,r,a,i){for(var s,o,u,d,l,c,_,f,h,m,y,p=[],M=t.children,g=0,L=0,Y=M.length,v=t.value;g<Y;){u=a-n,d=i-r;do{l=M[L++].value}while(!l&&L<Y);for(c=_=l,y=l*l*(m=Math.max(d/u,u/d)/(v*e)),h=Math.max(_/y,y/c);L<Y;++L){if(l+=o=M[L].value,o<c&&(c=o),o>_&&(_=o),y=l*l*m,(f=Math.max(_/y,y/c))>h){l-=o;break}h=f}p.push(s={value:l,dice:u<d,children:M.slice(g,L)}),s.dice?cy(s,n,r,a,v?r+=d*l/v:i):xy(s,n,r,v?n+=u*l/v:a,i),v-=l,g=L}return p}const Hy=function e(t){function n(e,n,r,a,i){Ay(t,e,n,r,a,i)}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(Sy);function jy(){var e=Hy,t=!1,n=1,r=1,a=[0],i=Jm,s=Jm,o=Jm,u=Jm,d=Jm;function l(e){return e.x0=e.y0=0,e.x1=n,e.y1=r,e.eachBefore(c),a=[0],t&&e.eachBefore(ly),e}function c(t){var n=a[t.depth],r=t.x0+n,l=t.y0+n,c=t.x1-n,_=t.y1-n;c<r&&(r=c=(r+c)/2),_<l&&(l=_=(l+_)/2),t.x0=r,t.y0=l,t.x1=c,t.y1=_,t.children&&(n=a[t.depth+1]=i(t)/2,r+=d(t)-n,l+=s(t)-n,(c-=o(t)-n)<r&&(r=c=(r+c)/2),(_-=u(t)-n)<l&&(l=_=(l+_)/2),e(t,r,l,c,_))}return l.round=function(e){return arguments.length?(t=!!e,l):t},l.size=function(e){return arguments.length?(n=+e[0],r=+e[1],l):[n,r]},l.tile=function(t){return arguments.length?(e=Nm(t),l):e},l.padding=function(e){return arguments.length?l.paddingInner(e).paddingOuter(e):l.paddingInner()},l.paddingInner=function(e){return arguments.length?(i="function"==typeof e?e:Wm(+e),l):i},l.paddingOuter=function(e){return arguments.length?l.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):l.paddingTop()},l.paddingTop=function(e){return arguments.length?(s="function"==typeof e?e:Wm(+e),l):s},l.paddingRight=function(e){return arguments.length?(o="function"==typeof e?e:Wm(+e),l):o},l.paddingBottom=function(e){return arguments.length?(u="function"==typeof e?e:Wm(+e),l):u},l.paddingLeft=function(e){return arguments.length?(d="function"==typeof e?e:Wm(+e),l):d},l}function Fy(e,t,n,r,a){var i,s,o=e.children,u=o.length,d=new Array(u+1);for(d[0]=s=i=0;i<u;++i)d[i+1]=s+=o[i].value;!function e(t,n,r,a,i,s,u){if(t>=n-1){var l=o[t];return l.x0=a,l.y0=i,l.x1=s,void(l.y1=u)}for(var c=d[t],_=r/2+c,f=t+1,h=n-1;f<h;){var m=f+h>>>1;d[m]<_?f=m+1:h=m}_-d[f-1]<d[f]-_&&t+1<f&&--f;var y=d[f]-c,p=r-y;if(s-a>u-i){var M=r?(a*p+s*y)/r:s;e(t,f,y,a,i,M,u),e(f,n,p,M,i,s,u)}else{var g=r?(i*p+u*y)/r:u;e(t,f,y,a,i,s,g),e(f,n,p,a,g,s,u)}}(0,u,e.value,t,n,r,a)}function Oy(e,t,n,r,a){(1&e.depth?xy:cy)(e,t,n,r,a)}const Py=function e(t){function n(e,n,r,a,i){if((s=e._squarify)&&s.ratio===t)for(var s,o,u,d,l,c=-1,_=s.length,f=e.value;++c<_;){for(u=(o=s[c]).children,d=o.value=0,l=u.length;d<l;++d)o.value+=u[d].value;o.dice?cy(o,n,r,a,f?r+=(i-r)*o.value/f:i):xy(o,n,r,f?n+=(a-n)*o.value/f:a,i),f-=o.value}else e._squarify=s=Ay(t,e,n,r,a,i),s.ratio=t}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(Sy);function Ey(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}function Ny(e,t){var n=Pr(+e,+t);return function(e){var t=n(e);return t-360*Math.floor(t/360)}}function Jy(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}}function Wy(e){return((e=Math.exp(e))+1/e)/2}const zy=function e(t,n,r){function a(e,a){var i,s,o=e[0],u=e[1],d=e[2],l=a[0],c=a[1],_=a[2],f=l-o,h=c-u,m=f*f+h*h;if(m<1e-12)s=Math.log(_/d)/t,i=function(e){return[o+e*f,u+e*h,d*Math.exp(t*e*s)]};else{var y=Math.sqrt(m),p=(_*_-d*d+r*m)/(2*d*n*y),M=(_*_-d*d-r*m)/(2*_*n*y),g=Math.log(Math.sqrt(p*p+1)-p),L=Math.log(Math.sqrt(M*M+1)-M);s=(L-g)/t,i=function(e){var r,a=e*s,i=Wy(g),l=d/(n*y)*(i*(r=t*a+g,((r=Math.exp(2*r))-1)/(r+1))-function(e){return((e=Math.exp(e))-1/e)/2}(g));return[o+l*f,u+l*h,d*i/Wy(t*a+g)]}}return i.duration=1e3*s*t/Math.SQRT2,i}return a.rho=function(t){var n=Math.max(.001,+t),r=n*n;return e(n,r,r*r)},a}(Math.SQRT2,2,4);function Cy(e){return function(t,n){var r=e((t=kr(t)).h,(n=kr(n)).h),a=Er(t.s,n.s),i=Er(t.l,n.l),s=Er(t.opacity,n.opacity);return function(e){return t.h=r(e),t.s=a(e),t.l=i(e),t.opacity=s(e),t+""}}}const Ry=Cy(Pr);var Iy=Cy(Er);function Uy(e,t){var n=Er((e=Fs(e)).l,(t=Fs(t)).l),r=Er(e.a,t.a),a=Er(e.b,t.b),i=Er(e.opacity,t.opacity);return function(t){return e.l=n(t),e.a=r(t),e.b=a(t),e.opacity=i(t),e+""}}function $y(e){return function(t,n){var r=e((t=Cs(t)).h,(n=Cs(n)).h),a=Er(t.c,n.c),i=Er(t.l,n.l),s=Er(t.opacity,n.opacity);return function(e){return t.h=r(e),t.c=a(e),t.l=i(e),t.opacity=s(e),t+""}}}const qy=$y(Pr);var By=$y(Er);function Gy(e){return function t(n){function r(t,r){var a=e((t=Xs(t)).h,(r=Xs(r)).h),i=Er(t.s,r.s),s=Er(t.l,r.l),o=Er(t.opacity,r.opacity);return function(e){return t.h=a(e),t.s=i(e),t.l=s(Math.pow(e,n)),t.opacity=o(e),t+""}}return n=+n,r.gamma=t,r}(1)}const Vy=Gy(Pr);var Zy=Gy(Er);function Ky(e,t){void 0===t&&(t=e,e=Kr);for(var n=0,r=t.length-1,a=t[0],i=new Array(r<0?0:r);n<r;)i[n]=e(a,a=t[++n]);return function(e){var t=Math.max(0,Math.min(r-1,Math.floor(e*=r)));return i[t](e-t)}}function Xy(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n}function Qy(e){for(var t,n=-1,r=e.length,a=e[r-1],i=0;++n<r;)t=a,a=e[n],i+=t[1]*a[0]-t[0]*a[1];return i/2}function ep(e){for(var t,n,r=-1,a=e.length,i=0,s=0,o=e[a-1],u=0;++r<a;)t=o,o=e[r],u+=n=t[0]*o[1]-o[0]*t[1],i+=(t[0]+o[0])*n,s+=(t[1]+o[1])*n;return[i/(u*=3),s/u]}function tp(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(t[1]-e[1])*(n[0]-e[0])}function np(e,t){return e[0]-t[0]||e[1]-t[1]}function rp(e){const t=e.length,n=[0,1];let r,a=2;for(r=2;r<t;++r){for(;a>1&&tp(e[n[a-2]],e[n[a-1]],e[r])<=0;)--a;n[a++]=r}return n.slice(0,a)}function ap(e){if((n=e.length)<3)return null;var t,n,r=new Array(n),a=new Array(n);for(t=0;t<n;++t)r[t]=[+e[t][0],+e[t][1],t];for(r.sort(np),t=0;t<n;++t)a[t]=[r[t][0],-r[t][1]];var i=rp(r),s=rp(a),o=s[0]===i[0],u=s[s.length-1]===i[i.length-1],d=[];for(t=i.length-1;t>=0;--t)d.push(e[r[i[t]][2]]);for(t=+o;t<s.length-u;++t)d.push(e[r[s[t]][2]]);return d}function ip(e,t){for(var n,r,a=e.length,i=e[a-1],s=t[0],o=t[1],u=i[0],d=i[1],l=!1,c=0;c<a;++c)n=(i=e[c])[0],(r=i[1])>o!=d>o&&s<(u-n)*(o-r)/(d-r)+n&&(l=!l),u=n,d=r;return l}function sp(e){for(var t,n,r=-1,a=e.length,i=e[a-1],s=i[0],o=i[1],u=0;++r<a;)t=s,n=o,t-=s=(i=e[r])[0],n-=o=i[1],u+=Math.hypot(t,n);return u}const op=Math.random,up=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(op),dp=function e(t){function n(e,n){return arguments.length<2&&(n=e,e=0),e=Math.floor(e),n=Math.floor(n)-e,function(){return Math.floor(t()*n+e)}}return n.source=e,n}(op),lp=function e(t){function n(e,n){var r,a;return e=null==e?0:+e,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*t()-1,i=2*t()-1,a=r*r+i*i}while(!a||a>1);return e+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=e,n}(op),cp=function e(t){var n=lp.source(t);function r(){var e=n.apply(this,arguments);return function(){return Math.exp(e())}}return r.source=e,r}(op),_p=function e(t){function n(e){return(e=+e)<=0?()=>0:function(){for(var n=0,r=e;r>1;--r)n+=t();return n+r*t()}}return n.source=e,n}(op),fp=function e(t){var n=_p.source(t);function r(e){if(0==(e=+e))return t;var r=n(e);return function(){return r()/e}}return r.source=e,r}(op),hp=function e(t){function n(e){return function(){return-Math.log1p(-t())/e}}return n.source=e,n}(op),mp=function e(t){function n(e){if((e=+e)<0)throw new RangeError("invalid alpha");return e=1/-e,function(){return Math.pow(1-t(),e)}}return n.source=e,n}(op),yp=function e(t){function n(e){if((e=+e)<0||e>1)throw new RangeError("invalid p");return function(){return Math.floor(t()+e)}}return n.source=e,n}(op),pp=function e(t){function n(e){if((e=+e)<0||e>1)throw new RangeError("invalid p");return 0===e?()=>1/0:1===e?()=>1:(e=Math.log1p(-e),function(){return 1+Math.floor(Math.log1p(-t())/e)})}return n.source=e,n}(op),Mp=function e(t){var n=lp.source(t)();function r(e,r){if((e=+e)<0)throw new RangeError("invalid k");if(0===e)return()=>0;if(r=null==r?1:+r,1===e)return()=>-Math.log1p(-t())*r;var a=(e<1?e+1:e)-1/3,i=1/(3*Math.sqrt(a)),s=e<1?()=>Math.pow(t(),1/e):()=>1;return function(){do{do{var e=n(),o=1+i*e}while(o<=0);o*=o*o;var u=1-t()}while(u>=1-.0331*e*e*e*e&&Math.log(u)>=.5*e*e+a*(1-o+Math.log(o)));return a*o*s()*r}}return r.source=e,r}(op),gp=function e(t){var n=Mp.source(t);function r(e,t){var r=n(e),a=n(t);return function(){var e=r();return 0===e?0:e/(e+a())}}return r.source=e,r}(op),Lp=function e(t){var n=pp.source(t),r=gp.source(t);function a(e,t){return e=+e,(t=+t)>=1?()=>e:t<=0?()=>0:function(){for(var a=0,i=e,s=t;i*s>16&&i*(1-s)>16;){var o=Math.floor((i+1)*s),u=r(o,i-o+1)();u<=s?(a+=o,i-=o,s=(s-u)/(1-u)):(i=o-1,s/=u)}for(var d=s<.5,l=n(d?s:1-s),c=l(),_=0;c<=i;++_)c+=l();return a+(d?_:i-_)}}return a.source=e,a}(op),Yp=function e(t){function n(e,n,r){var a;return 0==(e=+e)?a=e=>-Math.log(e):(e=1/e,a=t=>Math.pow(t,e)),n=null==n?0:+n,r=null==r?1:+r,function(){return n+r*a(-Math.log1p(-t()))}}return n.source=e,n}(op),vp=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,function(){return e+n*Math.tan(Math.PI*t())}}return n.source=e,n}(op),bp=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,function(){var r=t();return e+n*Math.log(r/(1-r))}}return n.source=e,n}(op),wp=function e(t){var n=Mp.source(t),r=Lp.source(t);function a(e){return function(){for(var a=0,i=e;i>16;){var s=Math.floor(.875*i),o=n(s)();if(o>i)return a+r(s-1,i/o)();a+=s,i-=o}for(var u=-Math.log1p(-t()),d=0;u<=i;++d)u-=Math.log1p(-t());return a+d}}return a.source=e,a}(op),kp=1664525,Dp=1013904223,Tp=1/4294967296;function xp(e=Math.random()){let t=0|(0<=e&&e<1?e/Tp:Math.abs(e));return()=>(t=kp*t+Dp|0,Tp*(t>>>0))}function Sp(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function Ap(e,t){switch(arguments.length){case 0:break;case 1:"function"==typeof e?this.interpolator(e):this.range(e);break;default:this.domain(e),"function"==typeof t?this.interpolator(t):this.range(t)}return this}const Hp=Symbol("implicit");function jp(){var e=new j,t=[],n=[],r=Hp;function a(a){let i=e.get(a);if(void 0===i){if(r!==Hp)return r;e.set(a,i=t.push(a)-1)}return n[i%n.length]}return a.domain=function(n){if(!arguments.length)return t.slice();t=[],e=new j;for(const r of n)e.has(r)||e.set(r,t.push(r)-1);return a},a.range=function(e){return arguments.length?(n=Array.from(e),a):n.slice()},a.unknown=function(e){return arguments.length?(r=e,a):r},a.copy=function(){return jp(t,n).unknown(r)},Sp.apply(a,arguments),a}function Fp(){var e,t,n=jp().unknown(void 0),r=n.domain,a=n.range,i=0,s=1,o=!1,u=0,d=0,l=.5;function c(){var n=r().length,c=s<i,_=c?s:i,f=c?i:s;e=(f-_)/Math.max(1,n-u+2*d),o&&(e=Math.floor(e)),_+=(f-_-e*(n-u))*l,t=e*(1-u),o&&(_=Math.round(_),t=Math.round(t));var h=Fe(n).map((function(t){return _+e*t}));return a(c?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),c()):r()},n.range=function(e){return arguments.length?([i,s]=e,i=+i,s=+s,c()):[i,s]},n.rangeRound=function(e){return[i,s]=e,i=+i,s=+s,o=!0,c()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(o=!!e,c()):o},n.padding=function(e){return arguments.length?(u=Math.min(1,d=+e),c()):u},n.paddingInner=function(e){return arguments.length?(u=Math.min(1,e),c()):u},n.paddingOuter=function(e){return arguments.length?(d=+e,c()):d},n.align=function(e){return arguments.length?(l=Math.max(0,Math.min(1,e)),c()):l},n.copy=function(){return Fp(r(),[i,s]).round(o).paddingInner(u).paddingOuter(d).align(l)},Sp.apply(c(),arguments)}function Op(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return Op(t())},e}function Pp(){return Op(Fp.apply(null,arguments).paddingInner(1))}function Ep(e){return+e}var Np=[0,1];function Jp(e){return e}function Wp(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:(n=isNaN(t)?NaN:.5,function(){return n});var n}function zp(e,t,n){var r=e[0],a=e[1],i=t[0],s=t[1];return a<r?(r=Wp(a,r),i=n(s,i)):(r=Wp(r,a),i=n(i,s)),function(e){return i(r(e))}}function Cp(e,t,n){var r=Math.min(e.length,t.length)-1,a=new Array(r),i=new Array(r),s=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++s<r;)a[s]=Wp(e[s],e[s+1]),i[s]=n(t[s],t[s+1]);return function(t){var n=_(e,t,1,r)-1;return i[n](a[n](t))}}function Rp(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function Ip(){var e,t,n,r,a,i,s=Np,o=Np,u=Kr,d=Jp;function l(){var e=Math.min(s.length,o.length);return d!==Jp&&(d=function(e,t){var n;return e>t&&(n=e,e=t,t=n),function(n){return Math.max(e,Math.min(t,n))}}(s[0],s[e-1])),r=e>2?Cp:zp,a=i=null,c}function c(t){return null==t||isNaN(t=+t)?n:(a||(a=r(s.map(e),o,u)))(e(d(t)))}return c.invert=function(n){return d(t((i||(i=r(o,s.map(e),qr)))(n)))},c.domain=function(e){return arguments.length?(s=Array.from(e,Ep),l()):s.slice()},c.range=function(e){return arguments.length?(o=Array.from(e),l()):o.slice()},c.rangeRound=function(e){return o=Array.from(e),u=Jy,l()},c.clamp=function(e){return arguments.length?(d=!!e||Jp,l()):d!==Jp},c.interpolate=function(e){return arguments.length?(u=e,l()):u},c.unknown=function(e){return arguments.length?(n=e,c):n},function(n,r){return e=n,t=r,l()}}function Up(){return Ip()(Jp,Jp)}function $p(e,t,n,r){var a,i=le(e,t,n);switch((r=dl(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(a=vl(i,s))||(r.precision=a),yl(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=bl(i,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=Yl(i))||(r.precision=a-2*("%"===r.type))}return ml(r)}function qp(e){var t=e.domain;return e.ticks=function(e){var n=t();return ue(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return $p(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,a,i=t(),s=0,o=i.length-1,u=i[s],d=i[o],l=10;for(d<u&&(a=u,u=d,d=a,a=s,s=o,o=a);l-- >0;){if((a=de(u,d,n))===r)return i[s]=u,i[o]=d,t(i);if(a>0)u=Math.floor(u/a)*a,d=Math.ceil(d/a)*a;else{if(!(a<0))break;u=Math.ceil(u*a)/a,d=Math.floor(d*a)/a}r=a}return e},e}function Bp(){var e=Up();return e.copy=function(){return Rp(e,Bp())},Sp.apply(e,arguments),qp(e)}function Gp(e){var t;function n(e){return null==e||isNaN(e=+e)?t:e}return n.invert=n,n.domain=n.range=function(t){return arguments.length?(e=Array.from(t,Ep),n):e.slice()},n.unknown=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return Gp(e).unknown(t)},e=arguments.length?Array.from(e,Ep):[0,1],qp(n)}function Vp(e,t){var n,r=0,a=(e=e.slice()).length-1,i=e[r],s=e[a];return s<i&&(n=r,r=a,a=n,n=i,i=s,s=n),e[r]=t.floor(i),e[a]=t.ceil(s),e}function Zp(e){return Math.log(e)}function Kp(e){return Math.exp(e)}function Xp(e){return-Math.log(-e)}function Qp(e){return-Math.exp(-e)}function eM(e){return isFinite(e)?+("1e"+e):e<0?0:e}function tM(e){return(t,n)=>-e(-t,n)}function nM(e){const t=e(Zp,Kp),n=t.domain;let r,a,i=10;function s(){return r=function(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),t=>Math.log(t)/e)}(i),a=function(e){return 10===e?eM:e===Math.E?Math.exp:t=>Math.pow(e,t)}(i),n()[0]<0?(r=tM(r),a=tM(a),e(Xp,Qp)):e(Zp,Kp),t}return t.base=function(e){return arguments.length?(i=+e,s()):i},t.domain=function(e){return arguments.length?(n(e),s()):n()},t.ticks=e=>{const t=n();let s=t[0],o=t[t.length-1];const u=o<s;u&&([s,o]=[o,s]);let d,l,c=r(s),_=r(o);const f=null==e?10:+e;let h=[];if(!(i%1)&&_-c<f){if(c=Math.floor(c),_=Math.ceil(_),s>0){for(;c<=_;++c)for(d=1;d<i;++d)if(l=c<0?d/a(-c):d*a(c),!(l<s)){if(l>o)break;h.push(l)}}else for(;c<=_;++c)for(d=i-1;d>=1;--d)if(l=c>0?d/a(-c):d*a(c),!(l<s)){if(l>o)break;h.push(l)}2*h.length<f&&(h=ue(s,o,f))}else h=ue(c,_,Math.min(_-c,f)).map(a);return u?h.reverse():h},t.tickFormat=(e,n)=>{if(null==e&&(e=10),null==n&&(n=10===i?"s":","),"function"!=typeof n&&(i%1||null!=(n=dl(n)).precision||(n.trim=!0),n=ml(n)),e===1/0)return n;const s=Math.max(1,i*e/t.ticks().length);return e=>{let t=e/a(Math.round(r(e)));return t*i<i-.5&&(t*=i),t<=s?n(e):""}},t.nice=()=>n(Vp(n(),{floor:e=>a(Math.floor(r(e))),ceil:e=>a(Math.ceil(r(e)))})),t}function rM(){const e=nM(Ip()).domain([1,10]);return e.copy=()=>Rp(e,rM()).base(e.base()),Sp.apply(e,arguments),e}function aM(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function iM(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function sM(e){var t=1,n=e(aM(t),iM(t));return n.constant=function(n){return arguments.length?e(aM(t=+n),iM(t)):t},qp(n)}function oM(){var e=sM(Ip());return e.copy=function(){return Rp(e,oM()).constant(e.constant())},Sp.apply(e,arguments)}function uM(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function dM(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function lM(e){return e<0?-e*e:e*e}function cM(e){var t=e(Jp,Jp),n=1;return t.exponent=function(t){return arguments.length?1==(n=+t)?e(Jp,Jp):.5===n?e(dM,lM):e(uM(n),uM(1/n)):n},qp(t)}function _M(){var e=cM(Ip());return e.copy=function(){return Rp(e,_M()).exponent(e.exponent())},Sp.apply(e,arguments),e}function fM(){return _M.apply(null,arguments).exponent(.5)}function hM(e){return Math.sign(e)*e*e}function mM(){var e,t=Up(),n=[0,1],r=!1;function a(n){var a=function(e){return Math.sign(e)*Math.sqrt(Math.abs(e))}(t(n));return isNaN(a)?e:r?Math.round(a):a}return a.invert=function(e){return t.invert(hM(e))},a.domain=function(e){return arguments.length?(t.domain(e),a):t.domain()},a.range=function(e){return arguments.length?(t.range((n=Array.from(e,Ep)).map(hM)),a):n.slice()},a.rangeRound=function(e){return a.range(e).round(!0)},a.round=function(e){return arguments.length?(r=!!e,a):r},a.clamp=function(e){return arguments.length?(t.clamp(e),a):t.clamp()},a.unknown=function(t){return arguments.length?(e=t,a):e},a.copy=function(){return mM(t.domain(),n).round(r).clamp(t.clamp()).unknown(e)},Sp.apply(a,arguments),qp(a)}function yM(){var e,t=[],n=[],a=[];function i(){var e=0,r=Math.max(1,n.length);for(a=new Array(r-1);++e<r;)a[e-1]=ve(t,e/r);return s}function s(t){return null==t||isNaN(t=+t)?e:n[_(a,t)]}return s.invertExtent=function(e){var r=n.indexOf(e);return r<0?[NaN,NaN]:[r>0?a[r-1]:t[0],r<a.length?a[r]:t[t.length-1]]},s.domain=function(e){if(!arguments.length)return t.slice();t=[];for(let n of e)null==n||isNaN(n=+n)||t.push(n);return t.sort(r),i()},s.range=function(e){return arguments.length?(n=Array.from(e),i()):n.slice()},s.unknown=function(t){return arguments.length?(e=t,s):e},s.quantiles=function(){return a.slice()},s.copy=function(){return yM().domain(t).range(n).unknown(e)},Sp.apply(s,arguments)}function pM(){var e,t=0,n=1,r=1,a=[.5],i=[0,1];function s(t){return null!=t&&t<=t?i[_(a,t,0,r)]:e}function o(){var e=-1;for(a=new Array(r);++e<r;)a[e]=((e+1)*n-(e-r)*t)/(r+1);return s}return s.domain=function(e){return arguments.length?([t,n]=e,t=+t,n=+n,o()):[t,n]},s.range=function(e){return arguments.length?(r=(i=Array.from(e)).length-1,o()):i.slice()},s.invertExtent=function(e){var s=i.indexOf(e);return s<0?[NaN,NaN]:s<1?[t,a[0]]:s>=r?[a[r-1],n]:[a[s-1],a[s]]},s.unknown=function(t){return arguments.length?(e=t,s):s},s.thresholds=function(){return a.slice()},s.copy=function(){return pM().domain([t,n]).range(i).unknown(e)},Sp.apply(qp(s),arguments)}function MM(){var e,t=[.5],n=[0,1],r=1;function a(a){return null!=a&&a<=a?n[_(t,a,0,r)]:e}return a.domain=function(e){return arguments.length?(t=Array.from(e),r=Math.min(t.length,n.length-1),a):t.slice()},a.range=function(e){return arguments.length?(n=Array.from(e),r=Math.min(t.length,n.length-1),a):n.slice()},a.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},a.unknown=function(t){return arguments.length?(e=t,a):e},a.copy=function(){return MM().domain(t).range(n).unknown(e)},Sp.apply(a,arguments)}const gM=1e3,LM=6e4,YM=36e5,vM=864e5,bM=6048e5,wM=31536e6,kM=new Date,DM=new Date;function TM(e,t,n,r){function a(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return a.floor=t=>(e(t=new Date(+t)),t),a.ceil=n=>(e(n=new Date(n-1)),t(n,1),e(n),n),a.round=e=>{const t=a(e),n=a.ceil(e);return e-t<n-e?t:n},a.offset=(e,n)=>(t(e=new Date(+e),null==n?1:Math.floor(n)),e),a.range=(n,r,i)=>{const s=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return s;let o;do{s.push(o=new Date(+n)),t(n,i),e(n)}while(o<n&&n<r);return s},a.filter=n=>TM((t=>{if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),((e,r)=>{if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););})),n&&(a.count=(t,r)=>(kM.setTime(+t),DM.setTime(+r),e(kM),e(DM),Math.floor(n(kM,DM))),a.every=e=>(e=Math.floor(e),isFinite(e)&&e>0?e>1?a.filter(r?t=>r(t)%e==0:t=>a.count(0,t)%e==0):a:null)),a}const xM=TM((()=>{}),((e,t)=>{e.setTime(+e+t)}),((e,t)=>t-e));xM.every=e=>(e=Math.floor(e),isFinite(e)&&e>0?e>1?TM((t=>{t.setTime(Math.floor(t/e)*e)}),((t,n)=>{t.setTime(+t+n*e)}),((t,n)=>(n-t)/e)):xM:null);const SM=xM.range,AM=TM((e=>{e.setTime(e-e.getMilliseconds())}),((e,t)=>{e.setTime(+e+t*gM)}),((e,t)=>(t-e)/gM),(e=>e.getUTCSeconds())),HM=AM.range,jM=TM((e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*gM)}),((e,t)=>{e.setTime(+e+t*LM)}),((e,t)=>(t-e)/LM),(e=>e.getMinutes())),FM=jM.range,OM=TM((e=>{e.setUTCSeconds(0,0)}),((e,t)=>{e.setTime(+e+t*LM)}),((e,t)=>(t-e)/LM),(e=>e.getUTCMinutes())),PM=OM.range,EM=TM((e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*gM-e.getMinutes()*LM)}),((e,t)=>{e.setTime(+e+t*YM)}),((e,t)=>(t-e)/YM),(e=>e.getHours())),NM=EM.range,JM=TM((e=>{e.setUTCMinutes(0,0,0)}),((e,t)=>{e.setTime(+e+t*YM)}),((e,t)=>(t-e)/YM),(e=>e.getUTCHours())),WM=JM.range,zM=TM((e=>e.setHours(0,0,0,0)),((e,t)=>e.setDate(e.getDate()+t)),((e,t)=>(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*LM)/vM),(e=>e.getDate()-1)),CM=zM.range,RM=TM((e=>{e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCDate(e.getUTCDate()+t)}),((e,t)=>(t-e)/vM),(e=>e.getUTCDate()-1)),IM=RM.range,UM=TM((e=>{e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCDate(e.getUTCDate()+t)}),((e,t)=>(t-e)/vM),(e=>Math.floor(e/vM))),$M=UM.range;function qM(e){return TM((t=>{t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),((e,t)=>{e.setDate(e.getDate()+7*t)}),((e,t)=>(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*LM)/bM))}const BM=qM(0),GM=qM(1),VM=qM(2),ZM=qM(3),KM=qM(4),XM=qM(5),QM=qM(6),eg=BM.range,tg=GM.range,ng=VM.range,rg=ZM.range,ag=KM.range,ig=XM.range,sg=QM.range;function og(e){return TM((t=>{t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCDate(e.getUTCDate()+7*t)}),((e,t)=>(t-e)/bM))}const ug=og(0),dg=og(1),lg=og(2),cg=og(3),_g=og(4),fg=og(5),hg=og(6),mg=ug.range,yg=dg.range,pg=lg.range,Mg=cg.range,gg=_g.range,Lg=fg.range,Yg=hg.range,vg=TM((e=>{e.setDate(1),e.setHours(0,0,0,0)}),((e,t)=>{e.setMonth(e.getMonth()+t)}),((e,t)=>t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())),(e=>e.getMonth())),bg=vg.range,wg=TM((e=>{e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCMonth(e.getUTCMonth()+t)}),((e,t)=>t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())),(e=>e.getUTCMonth())),kg=wg.range,Dg=TM((e=>{e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,t)=>{e.setFullYear(e.getFullYear()+t)}),((e,t)=>t.getFullYear()-e.getFullYear()),(e=>e.getFullYear()));Dg.every=e=>isFinite(e=Math.floor(e))&&e>0?TM((t=>{t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,n)=>{t.setFullYear(t.getFullYear()+n*e)})):null;const Tg=Dg.range,xg=TM((e=>{e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCFullYear(e.getUTCFullYear()+t)}),((e,t)=>t.getUTCFullYear()-e.getUTCFullYear()),(e=>e.getUTCFullYear()));xg.every=e=>isFinite(e=Math.floor(e))&&e>0?TM((t=>{t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,n)=>{t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null;const Sg=xg.range;function Ag(e,t,n,r,a,s){const o=[[AM,1,gM],[AM,5,5e3],[AM,15,15e3],[AM,30,3e4],[s,1,LM],[s,5,3e5],[s,15,9e5],[s,30,18e5],[a,1,YM],[a,3,108e5],[a,6,216e5],[a,12,432e5],[r,1,vM],[r,2,1728e5],[n,1,bM],[t,1,2592e6],[t,3,7776e6],[e,1,wM]];function u(t,n,r){const a=Math.abs(n-t)/r,s=i((([,,e])=>e)).right(o,a);if(s===o.length)return e.every(le(t/wM,n/wM,r));if(0===s)return xM.every(Math.max(le(t,n,r),1));const[u,d]=o[a/o[s-1][2]<o[s][2]/a?s-1:s];return u.every(d)}return[function(e,t,n){const r=t<e;r&&([e,t]=[t,e]);const a=n&&"function"==typeof n.range?n:u(e,t,n),i=a?a.range(e,+t+1):[];return r?i.reverse():i},u]}const[Hg,jg]=Ag(xg,wg,ug,UM,JM,OM),[Fg,Og]=Ag(Dg,vg,BM,zM,EM,jM);function Pg(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function Eg(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function Ng(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}function Jg(e){var t=e.dateTime,n=e.date,r=e.time,a=e.periods,i=e.days,s=e.shortDays,o=e.months,u=e.shortMonths,d=Zg(a),l=Kg(a),c=Zg(i),_=Kg(i),f=Zg(s),h=Kg(s),m=Zg(o),y=Kg(o),p=Zg(u),M=Kg(u),g={a:function(e){return s[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return u[e.getMonth()]},B:function(e){return o[e.getMonth()]},c:null,d:ML,e:ML,f:bL,g:OL,G:EL,H:gL,I:LL,j:YL,L:vL,m:wL,M:kL,p:function(e){return a[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:iY,s:sY,S:DL,u:TL,U:xL,V:AL,w:HL,W:jL,x:null,X:null,y:FL,Y:PL,Z:NL,"%":aY},L={a:function(e){return s[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return u[e.getUTCMonth()]},B:function(e){return o[e.getUTCMonth()]},c:null,d:JL,e:JL,f:IL,g:eY,G:nY,H:WL,I:zL,j:CL,L:RL,m:UL,M:$L,p:function(e){return a[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:iY,s:sY,S:qL,u:BL,U:GL,V:ZL,w:KL,W:XL,x:null,X:null,y:QL,Y:tY,Z:rY,"%":aY},Y={a:function(e,t,n){var r=f.exec(t.slice(n));return r?(e.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(e,t,n){var r=c.exec(t.slice(n));return r?(e.w=_.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(e,t,n){var r=p.exec(t.slice(n));return r?(e.m=M.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(e,t,n){var r=m.exec(t.slice(n));return r?(e.m=y.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(e,n,r){return w(e,t,n,r)},d:uL,e:uL,f:hL,g:aL,G:rL,H:lL,I:lL,j:dL,L:fL,m:oL,M:cL,p:function(e,t,n){var r=d.exec(t.slice(n));return r?(e.p=l.get(r[0].toLowerCase()),n+r[0].length):-1},q:sL,Q:yL,s:pL,S:_L,u:Qg,U:eL,V:tL,w:Xg,W:nL,x:function(e,t,r){return w(e,n,t,r)},X:function(e,t,n){return w(e,r,t,n)},y:aL,Y:rL,Z:iL,"%":mL};function v(e,t){return function(n){var r,a,i,s=[],o=-1,u=0,d=e.length;for(n instanceof Date||(n=new Date(+n));++o<d;)37===e.charCodeAt(o)&&(s.push(e.slice(u,o)),null!=(a=Ug[r=e.charAt(++o)])?r=e.charAt(++o):a="e"===r?" ":"0",(i=t[r])&&(r=i(n,a)),s.push(r),u=o+1);return s.push(e.slice(u,o)),s.join("")}}function b(e,t){return function(n){var r,a,i=Ng(1900,void 0,1);if(w(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(t&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Eg(Ng(i.y,0,1))).getUTCDay(),r=a>4||0===a?dg.ceil(r):dg(r),r=RM.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=Pg(Ng(i.y,0,1))).getDay(),r=a>4||0===a?GM.ceil(r):GM(r),r=zM.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Eg(Ng(i.y,0,1)).getUTCDay():Pg(Ng(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Eg(i)):Pg(i)}}function w(e,t,n,r){for(var a,i,s=0,o=t.length,u=n.length;s<o;){if(r>=u)return-1;if(37===(a=t.charCodeAt(s++))){if(a=t.charAt(s++),!(i=Y[a in Ug?t.charAt(s++):a])||(r=i(e,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return g.x=v(n,g),g.X=v(r,g),g.c=v(t,g),L.x=v(n,L),L.X=v(r,L),L.c=v(t,L),{format:function(e){var t=v(e+="",g);return t.toString=function(){return e},t},parse:function(e){var t=b(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=v(e+="",L);return t.toString=function(){return e},t},utcParse:function(e){var t=b(e+="",!0);return t.toString=function(){return e},t}}}var Wg,zg,Cg,Rg,Ig,Ug={"-":"",_:" ",0:"0"},$g=/^\s*\d+/,qg=/^%/,Bg=/[\\^$*+?|[\]().{}]/g;function Gg(e,t,n){var r=e<0?"-":"",a=(r?-e:e)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(t)+a:a)}function Vg(e){return e.replace(Bg,"\\$&")}function Zg(e){return new RegExp("^(?:"+e.map(Vg).join("|")+")","i")}function Kg(e){return new Map(e.map(((e,t)=>[e.toLowerCase(),t])))}function Xg(e,t,n){var r=$g.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function Qg(e,t,n){var r=$g.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function eL(e,t,n){var r=$g.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function tL(e,t,n){var r=$g.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function nL(e,t,n){var r=$g.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function rL(e,t,n){var r=$g.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function aL(e,t,n){var r=$g.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function iL(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function sL(e,t,n){var r=$g.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function oL(e,t,n){var r=$g.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function uL(e,t,n){var r=$g.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function dL(e,t,n){var r=$g.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function lL(e,t,n){var r=$g.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function cL(e,t,n){var r=$g.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function _L(e,t,n){var r=$g.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function fL(e,t,n){var r=$g.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function hL(e,t,n){var r=$g.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function mL(e,t,n){var r=qg.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function yL(e,t,n){var r=$g.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function pL(e,t,n){var r=$g.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function ML(e,t){return Gg(e.getDate(),t,2)}function gL(e,t){return Gg(e.getHours(),t,2)}function LL(e,t){return Gg(e.getHours()%12||12,t,2)}function YL(e,t){return Gg(1+zM.count(Dg(e),e),t,3)}function vL(e,t){return Gg(e.getMilliseconds(),t,3)}function bL(e,t){return vL(e,t)+"000"}function wL(e,t){return Gg(e.getMonth()+1,t,2)}function kL(e,t){return Gg(e.getMinutes(),t,2)}function DL(e,t){return Gg(e.getSeconds(),t,2)}function TL(e){var t=e.getDay();return 0===t?7:t}function xL(e,t){return Gg(BM.count(Dg(e)-1,e),t,2)}function SL(e){var t=e.getDay();return t>=4||0===t?KM(e):KM.ceil(e)}function AL(e,t){return e=SL(e),Gg(KM.count(Dg(e),e)+(4===Dg(e).getDay()),t,2)}function HL(e){return e.getDay()}function jL(e,t){return Gg(GM.count(Dg(e)-1,e),t,2)}function FL(e,t){return Gg(e.getFullYear()%100,t,2)}function OL(e,t){return Gg((e=SL(e)).getFullYear()%100,t,2)}function PL(e,t){return Gg(e.getFullYear()%1e4,t,4)}function EL(e,t){var n=e.getDay();return Gg((e=n>=4||0===n?KM(e):KM.ceil(e)).getFullYear()%1e4,t,4)}function NL(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+Gg(t/60|0,"0",2)+Gg(t%60,"0",2)}function JL(e,t){return Gg(e.getUTCDate(),t,2)}function WL(e,t){return Gg(e.getUTCHours(),t,2)}function zL(e,t){return Gg(e.getUTCHours()%12||12,t,2)}function CL(e,t){return Gg(1+RM.count(xg(e),e),t,3)}function RL(e,t){return Gg(e.getUTCMilliseconds(),t,3)}function IL(e,t){return RL(e,t)+"000"}function UL(e,t){return Gg(e.getUTCMonth()+1,t,2)}function $L(e,t){return Gg(e.getUTCMinutes(),t,2)}function qL(e,t){return Gg(e.getUTCSeconds(),t,2)}function BL(e){var t=e.getUTCDay();return 0===t?7:t}function GL(e,t){return Gg(ug.count(xg(e)-1,e),t,2)}function VL(e){var t=e.getUTCDay();return t>=4||0===t?_g(e):_g.ceil(e)}function ZL(e,t){return e=VL(e),Gg(_g.count(xg(e),e)+(4===xg(e).getUTCDay()),t,2)}function KL(e){return e.getUTCDay()}function XL(e,t){return Gg(dg.count(xg(e)-1,e),t,2)}function QL(e,t){return Gg(e.getUTCFullYear()%100,t,2)}function eY(e,t){return Gg((e=VL(e)).getUTCFullYear()%100,t,2)}function tY(e,t){return Gg(e.getUTCFullYear()%1e4,t,4)}function nY(e,t){var n=e.getUTCDay();return Gg((e=n>=4||0===n?_g(e):_g.ceil(e)).getUTCFullYear()%1e4,t,4)}function rY(){return"+0000"}function aY(){return"%"}function iY(e){return+e}function sY(e){return Math.floor(+e/1e3)}function oY(e){return Wg=Jg(e),zg=Wg.format,Cg=Wg.parse,Rg=Wg.utcFormat,Ig=Wg.utcParse,Wg}function uY(e){return new Date(e)}function dY(e){return e instanceof Date?+e:+new Date(+e)}function lY(e,t,n,r,a,i,s,o,u,d){var l=Up(),c=l.invert,_=l.domain,f=d(".%L"),h=d(":%S"),m=d("%I:%M"),y=d("%I %p"),p=d("%a %d"),M=d("%b %d"),g=d("%B"),L=d("%Y");function Y(e){return(u(e)<e?f:o(e)<e?h:s(e)<e?m:i(e)<e?y:r(e)<e?a(e)<e?p:M:n(e)<e?g:L)(e)}return l.invert=function(e){return new Date(c(e))},l.domain=function(e){return arguments.length?_(Array.from(e,dY)):_().map(uY)},l.ticks=function(t){var n=_();return e(n[0],n[n.length-1],null==t?10:t)},l.tickFormat=function(e,t){return null==t?Y:d(t)},l.nice=function(e){var n=_();return e&&"function"==typeof e.range||(e=t(n[0],n[n.length-1],null==e?10:e)),e?_(Vp(n,e)):l},l.copy=function(){return Rp(l,lY(e,t,n,r,a,i,s,o,u,d))},l}function cY(){return Sp.apply(lY(Fg,Og,Dg,vg,BM,zM,EM,jM,AM,zg).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function _Y(){return Sp.apply(lY(Hg,jg,xg,wg,ug,RM,JM,OM,AM,Rg).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function fY(){var e,t,n,r,a,i=0,s=1,o=Jp,u=!1;function d(t){return null==t||isNaN(t=+t)?a:o(0===n?.5:(t=(r(t)-e)*n,u?Math.max(0,Math.min(1,t)):t))}function l(e){return function(t){var n,r;return arguments.length?([n,r]=t,o=e(n,r),d):[o(0),o(1)]}}return d.domain=function(a){return arguments.length?([i,s]=a,e=r(i=+i),t=r(s=+s),n=e===t?0:1/(t-e),d):[i,s]},d.clamp=function(e){return arguments.length?(u=!!e,d):u},d.interpolator=function(e){return arguments.length?(o=e,d):o},d.range=l(Kr),d.rangeRound=l(Jy),d.unknown=function(e){return arguments.length?(a=e,d):a},function(a){return r=a,e=a(i),t=a(s),n=e===t?0:1/(t-e),d}}function hY(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function mY(){var e=qp(fY()(Jp));return e.copy=function(){return hY(e,mY())},Ap.apply(e,arguments)}function yY(){var e=nM(fY()).domain([1,10]);return e.copy=function(){return hY(e,yY()).base(e.base())},Ap.apply(e,arguments)}function pY(){var e=sM(fY());return e.copy=function(){return hY(e,pY()).constant(e.constant())},Ap.apply(e,arguments)}function MY(){var e=cM(fY());return e.copy=function(){return hY(e,MY()).exponent(e.exponent())},Ap.apply(e,arguments)}function gY(){return MY.apply(null,arguments).exponent(.5)}function LY(){var e=[],t=Jp;function n(n){if(null!=n&&!isNaN(n=+n))return t((_(e,n,1)-1)/(e.length-1))}return n.domain=function(t){if(!arguments.length)return e.slice();e=[];for(let n of t)null==n||isNaN(n=+n)||e.push(n);return e.sort(r),n},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.range=function(){return e.map(((n,r)=>t(r/(e.length-1))))},n.quantiles=function(t){return Array.from({length:t+1},((n,r)=>Ye(e,r/t)))},n.copy=function(){return LY(t).domain(e)},Ap.apply(n,arguments)}function YY(){var e,t,n,r,a,i,s,o=0,u=.5,d=1,l=1,c=Jp,_=!1;function f(e){return isNaN(e=+e)?s:(e=.5+((e=+i(e))-t)*(l*e<l*t?r:a),c(_?Math.max(0,Math.min(1,e)):e))}function h(e){return function(t){var n,r,a;return arguments.length?([n,r,a]=t,c=Ky(e,[n,r,a]),f):[c(0),c(.5),c(1)]}}return f.domain=function(s){return arguments.length?([o,u,d]=s,e=i(o=+o),t=i(u=+u),n=i(d=+d),r=e===t?0:.5/(t-e),a=t===n?0:.5/(n-t),l=t<e?-1:1,f):[o,u,d]},f.clamp=function(e){return arguments.length?(_=!!e,f):_},f.interpolator=function(e){return arguments.length?(c=e,f):c},f.range=h(Kr),f.rangeRound=h(Jy),f.unknown=function(e){return arguments.length?(s=e,f):s},function(s){return i=s,e=s(o),t=s(u),n=s(d),r=e===t?0:.5/(t-e),a=t===n?0:.5/(n-t),l=t<e?-1:1,f}}function vY(){var e=qp(YY()(Jp));return e.copy=function(){return hY(e,vY())},Ap.apply(e,arguments)}function bY(){var e=nM(YY()).domain([.1,1,10]);return e.copy=function(){return hY(e,bY()).base(e.base())},Ap.apply(e,arguments)}function wY(){var e=sM(YY());return e.copy=function(){return hY(e,wY()).constant(e.constant())},Ap.apply(e,arguments)}function kY(){var e=cM(YY());return e.copy=function(){return hY(e,kY()).exponent(e.exponent())},Ap.apply(e,arguments)}function DY(){return kY.apply(null,arguments).exponent(.5)}function TY(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n}oY({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});const xY=TY("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),SY=TY("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),AY=TY("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),HY=TY("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0"),jY=TY("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),FY=TY("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),OY=TY("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),PY=TY("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),EY=TY("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),NY=TY("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),JY=TY("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),WY=e=>Wr(e[e.length-1]);var zY=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(TY);const CY=WY(zY);var RY=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(TY);const IY=WY(RY);var UY=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(TY);const $Y=WY(UY);var qY=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(TY);const BY=WY(qY);var GY=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(TY);const VY=WY(GY);var ZY=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(TY);const KY=WY(ZY);var XY=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(TY);const QY=WY(XY);var ev=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(TY);const tv=WY(ev);var nv=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(TY);const rv=WY(nv);var av=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(TY);const iv=WY(av);var sv=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(TY);const ov=WY(sv);var uv=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(TY);const dv=WY(uv);var lv=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(TY);const cv=WY(lv);var _v=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(TY);const fv=WY(_v);var hv=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(TY);const mv=WY(hv);var yv=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(TY);const pv=WY(yv);var Mv=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(TY);const gv=WY(Mv);var Lv=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(TY);const Yv=WY(Lv);var vv=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(TY);const bv=WY(vv);var wv=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(TY);const kv=WY(wv);var Dv=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(TY);const Tv=WY(Dv);var xv=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(TY);const Sv=WY(xv);var Av=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(TY);const Hv=WY(Av);var jv=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(TY);const Fv=WY(jv);var Ov=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(TY);const Pv=WY(Ov);var Ev=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(TY);const Nv=WY(Ev);var Jv=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(TY);const Wv=WY(Jv);function zv(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-e*(35.34-e*(2381.73-e*(6402.7-e*(7024.72-2710.57*e)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+e*(170.73+e*(52.82-e*(131.46-e*(176.58-67.37*e)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+e*(442.36-e*(2482.43-e*(6167.24-e*(6614.94-2475.67*e)))))))+")"}const Cv=Zy(Xs(300,.5,0),Xs(-240,.5,1));var Rv=Zy(Xs(-100,.75,.35),Xs(80,1.5,.8)),Iv=Zy(Xs(260,.75,.35),Xs(80,1.5,.8)),Uv=Xs();function $v(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return Uv.h=360*e-100,Uv.s=1.5-1.5*t,Uv.l=.8-.9*t,Uv+""}var qv=yr(),Bv=Math.PI/3,Gv=2*Math.PI/3;function Vv(e){var t;return e=(.5-e)*Math.PI,qv.r=255*(t=Math.sin(e))*t,qv.g=255*(t=Math.sin(e+Bv))*t,qv.b=255*(t=Math.sin(e+Gv))*t,qv+""}function Zv(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+e*(1172.33-e*(10793.56-e*(33300.12-e*(38394.49-14825.05*e)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+e*(557.33+e*(1225.33-e*(3574.96-e*(1073.77+707.56*e)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+e*(3211.1-e*(15327.97-e*(27814-e*(22569.18-6838.66*e)))))))+")"}function Kv(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}const Xv=Kv(TY("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var Qv=Kv(TY("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),eb=Kv(TY("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),tb=Kv(TY("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function nb(e){return Cn(Tn(e).call(document.documentElement))}var rb=0;function ab(){return new ib}function ib(){this._="@"+(++rb).toString(36)}function sb(e,t){return e.target&&(e=Xr(e),void 0===t&&(t=e.currentTarget),e=e.touches||[e]),Array.from(e,(e=>Qr(e,t)))}function ob(e){return"string"==typeof e?new Jn([document.querySelectorAll(e)],[document.documentElement]):new Jn([St(e)],Nn)}function ub(e){return function(){return e}}ib.prototype=ab.prototype={constructor:ib,get:function(e){for(var t=this._;!(t in e);)if(!(e=e.parentNode))return;return e[t]},set:function(e,t){return e[this._]=t},remove:function(e){return this._ in e&&delete e[this._]},toString:function(){return this._}};const db=Math.abs,lb=Math.atan2,cb=Math.cos,_b=Math.max,fb=Math.min,hb=Math.sin,mb=Math.sqrt,yb=1e-12,pb=Math.PI,Mb=pb/2,gb=2*pb;function Lb(e){return e>=1?Mb:e<=-1?-Mb:Math.asin(e)}function Yb(e){let t=3;return e.digits=function(n){if(!arguments.length)return t;if(null==n)t=null;else{const e=Math.floor(n);if(!(e>=0))throw new RangeError(`invalid digits: ${n}`);t=e}return e},()=>new os(t)}function vb(e){return e.innerRadius}function bb(e){return e.outerRadius}function wb(e){return e.startAngle}function kb(e){return e.endAngle}function Db(e){return e&&e.padAngle}function Tb(e,t,n,r,a,i,s){var o=e-n,u=t-r,d=(s?i:-i)/mb(o*o+u*u),l=d*u,c=-d*o,_=e+l,f=t+c,h=n+l,m=r+c,y=(_+h)/2,p=(f+m)/2,M=h-_,g=m-f,L=M*M+g*g,Y=a-i,v=_*m-h*f,b=(g<0?-1:1)*mb(_b(0,Y*Y*L-v*v)),w=(v*g-M*b)/L,k=(-v*M-g*b)/L,D=(v*g+M*b)/L,T=(-v*M+g*b)/L,x=w-y,S=k-p,A=D-y,H=T-p;return x*x+S*S>A*A+H*H&&(w=D,k=T),{cx:w,cy:k,x01:-l,y01:-c,x11:w*(a/Y-1),y11:k*(a/Y-1)}}function xb(){var e=vb,t=bb,n=ub(0),r=null,a=wb,i=kb,s=Db,o=null,u=Yb(d);function d(){var d,l,c,_=+e.apply(this,arguments),f=+t.apply(this,arguments),h=a.apply(this,arguments)-Mb,m=i.apply(this,arguments)-Mb,y=db(m-h),p=m>h;if(o||(o=d=u()),f<_&&(l=f,f=_,_=l),f>yb)if(y>gb-yb)o.moveTo(f*cb(h),f*hb(h)),o.arc(0,0,f,h,m,!p),_>yb&&(o.moveTo(_*cb(m),_*hb(m)),o.arc(0,0,_,m,h,p));else{var M,g,L=h,Y=m,v=h,b=m,w=y,k=y,D=s.apply(this,arguments)/2,T=D>yb&&(r?+r.apply(this,arguments):mb(_*_+f*f)),x=fb(db(f-_)/2,+n.apply(this,arguments)),S=x,A=x;if(T>yb){var H=Lb(T/_*hb(D)),j=Lb(T/f*hb(D));(w-=2*H)>yb?(v+=H*=p?1:-1,b-=H):(w=0,v=b=(h+m)/2),(k-=2*j)>yb?(L+=j*=p?1:-1,Y-=j):(k=0,L=Y=(h+m)/2)}var F=f*cb(L),O=f*hb(L),P=_*cb(b),E=_*hb(b);if(x>yb){var N,J=f*cb(Y),W=f*hb(Y),z=_*cb(v),C=_*hb(v);if(y<pb)if(N=function(e,t,n,r,a,i,s,o){var u=n-e,d=r-t,l=s-a,c=o-i,_=c*u-l*d;if(!(_*_<yb))return[e+(_=(l*(t-i)-c*(e-a))/_)*u,t+_*d]}(F,O,z,C,J,W,P,E)){var R=F-N[0],I=O-N[1],U=J-N[0],$=W-N[1],q=1/hb(((c=(R*U+I*$)/(mb(R*R+I*I)*mb(U*U+$*$)))>1?0:c<-1?pb:Math.acos(c))/2),B=mb(N[0]*N[0]+N[1]*N[1]);S=fb(x,(_-B)/(q-1)),A=fb(x,(f-B)/(q+1))}else S=A=0}k>yb?A>yb?(M=Tb(z,C,F,O,f,A,p),g=Tb(J,W,P,E,f,A,p),o.moveTo(M.cx+M.x01,M.cy+M.y01),A<x?o.arc(M.cx,M.cy,A,lb(M.y01,M.x01),lb(g.y01,g.x01),!p):(o.arc(M.cx,M.cy,A,lb(M.y01,M.x01),lb(M.y11,M.x11),!p),o.arc(0,0,f,lb(M.cy+M.y11,M.cx+M.x11),lb(g.cy+g.y11,g.cx+g.x11),!p),o.arc(g.cx,g.cy,A,lb(g.y11,g.x11),lb(g.y01,g.x01),!p))):(o.moveTo(F,O),o.arc(0,0,f,L,Y,!p)):o.moveTo(F,O),_>yb&&w>yb?S>yb?(M=Tb(P,E,J,W,_,-S,p),g=Tb(F,O,z,C,_,-S,p),o.lineTo(M.cx+M.x01,M.cy+M.y01),S<x?o.arc(M.cx,M.cy,S,lb(M.y01,M.x01),lb(g.y01,g.x01),!p):(o.arc(M.cx,M.cy,S,lb(M.y01,M.x01),lb(M.y11,M.x11),!p),o.arc(0,0,_,lb(M.cy+M.y11,M.cx+M.x11),lb(g.cy+g.y11,g.cx+g.x11),p),o.arc(g.cx,g.cy,S,lb(g.y11,g.x11),lb(g.y01,g.x01),!p))):o.arc(0,0,_,b,v,p):o.lineTo(P,E)}else o.moveTo(0,0);if(o.closePath(),d)return o=null,d+""||null}return d.centroid=function(){var n=(+e.apply(this,arguments)+ +t.apply(this,arguments))/2,r=(+a.apply(this,arguments)+ +i.apply(this,arguments))/2-pb/2;return[cb(r)*n,hb(r)*n]},d.innerRadius=function(t){return arguments.length?(e="function"==typeof t?t:ub(+t),d):e},d.outerRadius=function(e){return arguments.length?(t="function"==typeof e?e:ub(+e),d):t},d.cornerRadius=function(e){return arguments.length?(n="function"==typeof e?e:ub(+e),d):n},d.padRadius=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:ub(+e),d):r},d.startAngle=function(e){return arguments.length?(a="function"==typeof e?e:ub(+e),d):a},d.endAngle=function(e){return arguments.length?(i="function"==typeof e?e:ub(+e),d):i},d.padAngle=function(e){return arguments.length?(s="function"==typeof e?e:ub(+e),d):s},d.context=function(e){return arguments.length?(o=null==e?null:e,d):o},d}var Sb=Array.prototype.slice;function Ab(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function Hb(e){this._context=e}function jb(e){return new Hb(e)}function Fb(e){return e[0]}function Ob(e){return e[1]}function Pb(e,t){var n=ub(!0),r=null,a=jb,i=null,s=Yb(o);function o(o){var u,d,l,c=(o=Ab(o)).length,_=!1;for(null==r&&(i=a(l=s())),u=0;u<=c;++u)!(u<c&&n(d=o[u],u,o))===_&&((_=!_)?i.lineStart():i.lineEnd()),_&&i.point(+e(d,u,o),+t(d,u,o));if(l)return i=null,l+""||null}return e="function"==typeof e?e:void 0===e?Fb:ub(e),t="function"==typeof t?t:void 0===t?Ob:ub(t),o.x=function(t){return arguments.length?(e="function"==typeof t?t:ub(+t),o):e},o.y=function(e){return arguments.length?(t="function"==typeof e?e:ub(+e),o):t},o.defined=function(e){return arguments.length?(n="function"==typeof e?e:ub(!!e),o):n},o.curve=function(e){return arguments.length?(a=e,null!=r&&(i=a(r)),o):a},o.context=function(e){return arguments.length?(null==e?r=i=null:i=a(r=e),o):r},o}function Eb(e,t,n){var r=null,a=ub(!0),i=null,s=jb,o=null,u=Yb(d);function d(d){var l,c,_,f,h,m=(d=Ab(d)).length,y=!1,p=new Array(m),M=new Array(m);for(null==i&&(o=s(h=u())),l=0;l<=m;++l){if(!(l<m&&a(f=d[l],l,d))===y)if(y=!y)c=l,o.areaStart(),o.lineStart();else{for(o.lineEnd(),o.lineStart(),_=l-1;_>=c;--_)o.point(p[_],M[_]);o.lineEnd(),o.areaEnd()}y&&(p[l]=+e(f,l,d),M[l]=+t(f,l,d),o.point(r?+r(f,l,d):p[l],n?+n(f,l,d):M[l]))}if(h)return o=null,h+""||null}function l(){return Pb().defined(a).curve(s).context(i)}return e="function"==typeof e?e:void 0===e?Fb:ub(+e),t="function"==typeof t?t:ub(void 0===t?0:+t),n="function"==typeof n?n:void 0===n?Ob:ub(+n),d.x=function(t){return arguments.length?(e="function"==typeof t?t:ub(+t),r=null,d):e},d.x0=function(t){return arguments.length?(e="function"==typeof t?t:ub(+t),d):e},d.x1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:ub(+e),d):r},d.y=function(e){return arguments.length?(t="function"==typeof e?e:ub(+e),n=null,d):t},d.y0=function(e){return arguments.length?(t="function"==typeof e?e:ub(+e),d):t},d.y1=function(e){return arguments.length?(n=null==e?null:"function"==typeof e?e:ub(+e),d):n},d.lineX0=d.lineY0=function(){return l().x(e).y(t)},d.lineY1=function(){return l().x(e).y(n)},d.lineX1=function(){return l().x(r).y(t)},d.defined=function(e){return arguments.length?(a="function"==typeof e?e:ub(!!e),d):a},d.curve=function(e){return arguments.length?(s=e,null!=i&&(o=s(i)),d):s},d.context=function(e){return arguments.length?(null==e?i=o=null:o=s(i=e),d):i},d}function Nb(e,t){return t<e?-1:t>e?1:t>=e?0:NaN}function Jb(e){return e}function Wb(){var e=Jb,t=Nb,n=null,r=ub(0),a=ub(gb),i=ub(0);function s(s){var o,u,d,l,c,_=(s=Ab(s)).length,f=0,h=new Array(_),m=new Array(_),y=+r.apply(this,arguments),p=Math.min(gb,Math.max(-gb,a.apply(this,arguments)-y)),M=Math.min(Math.abs(p)/_,i.apply(this,arguments)),g=M*(p<0?-1:1);for(o=0;o<_;++o)(c=m[h[o]=o]=+e(s[o],o,s))>0&&(f+=c);for(null!=t?h.sort((function(e,n){return t(m[e],m[n])})):null!=n&&h.sort((function(e,t){return n(s[e],s[t])})),o=0,d=f?(p-_*g)/f:0;o<_;++o,y=l)u=h[o],l=y+((c=m[u])>0?c*d:0)+g,m[u]={data:s[u],index:o,value:c,startAngle:y,endAngle:l,padAngle:M};return m}return s.value=function(t){return arguments.length?(e="function"==typeof t?t:ub(+t),s):e},s.sortValues=function(e){return arguments.length?(t=e,n=null,s):t},s.sort=function(e){return arguments.length?(n=e,t=null,s):n},s.startAngle=function(e){return arguments.length?(r="function"==typeof e?e:ub(+e),s):r},s.endAngle=function(e){return arguments.length?(a="function"==typeof e?e:ub(+e),s):a},s.padAngle=function(e){return arguments.length?(i="function"==typeof e?e:ub(+e),s):i},s}Hb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};var zb=Rb(jb);function Cb(e){this._curve=e}function Rb(e){function t(t){return new Cb(e(t))}return t._curve=e,t}function Ib(e){var t=e.curve;return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e.curve=function(e){return arguments.length?t(Rb(e)):t()._curve},e}function Ub(){return Ib(Pb().curve(zb))}function $b(){var e=Eb().curve(zb),t=e.curve,n=e.lineX0,r=e.lineX1,a=e.lineY0,i=e.lineY1;return e.angle=e.x,delete e.x,e.startAngle=e.x0,delete e.x0,e.endAngle=e.x1,delete e.x1,e.radius=e.y,delete e.y,e.innerRadius=e.y0,delete e.y0,e.outerRadius=e.y1,delete e.y1,e.lineStartAngle=function(){return Ib(n())},delete e.lineX0,e.lineEndAngle=function(){return Ib(r())},delete e.lineX1,e.lineInnerRadius=function(){return Ib(a())},delete e.lineY0,e.lineOuterRadius=function(){return Ib(i())},delete e.lineY1,e.curve=function(e){return arguments.length?t(Rb(e)):t()._curve},e}function qb(e,t){return[(t=+t)*Math.cos(e-=Math.PI/2),t*Math.sin(e)]}Cb.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(e,t){this._curve.point(t*Math.sin(e),t*-Math.cos(e))}};class Bb{constructor(e,t){this._context=e,this._x=t}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}point(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._x?this._context.bezierCurveTo(this._x0=(this._x0+e)/2,this._y0,this._x0,t,e,t):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+t)/2,e,this._y0,e,t)}this._x0=e,this._y0=t}}class Gb{constructor(e){this._context=e}lineStart(){this._point=0}lineEnd(){}point(e,t){if(e=+e,t=+t,0===this._point)this._point=1;else{const n=qb(this._x0,this._y0),r=qb(this._x0,this._y0=(this._y0+t)/2),a=qb(e,this._y0),i=qb(e,t);this._context.moveTo(...n),this._context.bezierCurveTo(...r,...a,...i)}this._x0=e,this._y0=t}}function Vb(e){return new Bb(e,!0)}function Zb(e){return new Bb(e,!1)}function Kb(e){return new Gb(e)}function Xb(e){return e.source}function Qb(e){return e.target}function ew(e){let t=Xb,n=Qb,r=Fb,a=Ob,i=null,s=null,o=Yb(u);function u(){let u;const d=Sb.call(arguments),l=t.apply(this,d),c=n.apply(this,d);if(null==i&&(s=e(u=o())),s.lineStart(),d[0]=l,s.point(+r.apply(this,d),+a.apply(this,d)),d[0]=c,s.point(+r.apply(this,d),+a.apply(this,d)),s.lineEnd(),u)return s=null,u+""||null}return u.source=function(e){return arguments.length?(t=e,u):t},u.target=function(e){return arguments.length?(n=e,u):n},u.x=function(e){return arguments.length?(r="function"==typeof e?e:ub(+e),u):r},u.y=function(e){return arguments.length?(a="function"==typeof e?e:ub(+e),u):a},u.context=function(t){return arguments.length?(null==t?i=s=null:s=e(i=t),u):i},u}function tw(){return ew(Vb)}function nw(){return ew(Zb)}function rw(){const e=ew(Kb);return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e}const aw=mb(3),iw={draw(e,t){const n=.59436*mb(t+fb(t/28,.75)),r=n/2,a=r*aw;e.moveTo(0,n),e.lineTo(0,-n),e.moveTo(-a,-r),e.lineTo(a,r),e.moveTo(-a,r),e.lineTo(a,-r)}},sw={draw(e,t){const n=mb(t/pb);e.moveTo(n,0),e.arc(0,0,n,0,gb)}},ow={draw(e,t){const n=mb(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}},uw=mb(1/3),dw=2*uw,lw={draw(e,t){const n=mb(t/dw),r=n*uw;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}},cw={draw(e,t){const n=.62625*mb(t);e.moveTo(0,-n),e.lineTo(n,0),e.lineTo(0,n),e.lineTo(-n,0),e.closePath()}},_w={draw(e,t){const n=.87559*mb(t-fb(t/7,2));e.moveTo(-n,0),e.lineTo(n,0),e.moveTo(0,n),e.lineTo(0,-n)}},fw={draw(e,t){const n=mb(t),r=-n/2;e.rect(r,r,n,n)}},hw={draw(e,t){const n=.4431*mb(t);e.moveTo(n,n),e.lineTo(n,-n),e.lineTo(-n,-n),e.lineTo(-n,n),e.closePath()}},mw=hb(pb/10)/hb(7*pb/10),yw=hb(gb/10)*mw,pw=-cb(gb/10)*mw,Mw={draw(e,t){const n=mb(.8908130915292852*t),r=yw*n,a=pw*n;e.moveTo(0,-n),e.lineTo(r,a);for(let t=1;t<5;++t){const i=gb*t/5,s=cb(i),o=hb(i);e.lineTo(o*n,-s*n),e.lineTo(s*r-o*a,o*r+s*a)}e.closePath()}},gw=mb(3),Lw={draw(e,t){const n=-mb(t/(3*gw));e.moveTo(0,2*n),e.lineTo(-gw*n,-n),e.lineTo(gw*n,-n),e.closePath()}},Yw=mb(3),vw={draw(e,t){const n=.6824*mb(t),r=n/2,a=n*Yw/2;e.moveTo(0,-n),e.lineTo(a,r),e.lineTo(-a,r),e.closePath()}},bw=-.5,ww=mb(3)/2,kw=1/mb(12),Dw=3*(kw/2+1),Tw={draw(e,t){const n=mb(t/Dw),r=n/2,a=n*kw,i=r,s=n*kw+n,o=-i,u=s;e.moveTo(r,a),e.lineTo(i,s),e.lineTo(o,u),e.lineTo(bw*r-ww*a,ww*r+bw*a),e.lineTo(bw*i-ww*s,ww*i+bw*s),e.lineTo(bw*o-ww*u,ww*o+bw*u),e.lineTo(bw*r+ww*a,bw*a-ww*r),e.lineTo(bw*i+ww*s,bw*s-ww*i),e.lineTo(bw*o+ww*u,bw*u-ww*o),e.closePath()}},xw={draw(e,t){const n=.6189*mb(t-fb(t/6,1.7));e.moveTo(-n,-n),e.lineTo(n,n),e.moveTo(-n,n),e.lineTo(n,-n)}},Sw=[sw,ow,lw,fw,Mw,Lw,Tw],Aw=[sw,_w,xw,vw,iw,hw,cw];function Hw(e,t){let n=null,r=Yb(a);function a(){let a;if(n||(n=a=r()),e.apply(this,arguments).draw(n,+t.apply(this,arguments)),a)return n=null,a+""||null}return e="function"==typeof e?e:ub(e||sw),t="function"==typeof t?t:ub(void 0===t?64:+t),a.type=function(t){return arguments.length?(e="function"==typeof t?t:ub(t),a):e},a.size=function(e){return arguments.length?(t="function"==typeof e?e:ub(+e),a):t},a.context=function(e){return arguments.length?(n=null==e?null:e,a):n},a}function jw(){}function Fw(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function Ow(e){this._context=e}function Pw(e){return new Ow(e)}function Ew(e){this._context=e}function Nw(e){return new Ew(e)}function Jw(e){this._context=e}function Ww(e){return new Jw(e)}function zw(e,t){this._basis=new Ow(e),this._beta=t}Ow.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Fw(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Fw(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},Ew.prototype={areaStart:jw,areaEnd:jw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:Fw(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},Jw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Fw(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},zw.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r,a=e[0],i=t[0],s=e[n]-a,o=t[n]-i,u=-1;++u<=n;)r=u/n,this._basis.point(this._beta*e[u]+(1-this._beta)*(a+r*s),this._beta*t[u]+(1-this._beta)*(i+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}};const Cw=function e(t){function n(e){return 1===t?new Ow(e):new zw(e,t)}return n.beta=function(t){return e(+t)},n}(.85);function Rw(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function Iw(e,t){this._context=e,this._k=(1-t)/6}Iw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Rw(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:Rw(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const Uw=function e(t){function n(e){return new Iw(e,t)}return n.tension=function(t){return e(+t)},n}(0);function $w(e,t){this._context=e,this._k=(1-t)/6}$w.prototype={areaStart:jw,areaEnd:jw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Rw(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const qw=function e(t){function n(e){return new $w(e,t)}return n.tension=function(t){return e(+t)},n}(0);function Bw(e,t){this._context=e,this._k=(1-t)/6}Bw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Rw(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const Gw=function e(t){function n(e){return new Bw(e,t)}return n.tension=function(t){return e(+t)},n}(0);function Vw(e,t,n){var r=e._x1,a=e._y1,i=e._x2,s=e._y2;if(e._l01_a>yb){var o=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,u=3*e._l01_a*(e._l01_a+e._l12_a);r=(r*o-e._x0*e._l12_2a+e._x2*e._l01_2a)/u,a=(a*o-e._y0*e._l12_2a+e._y2*e._l01_2a)/u}if(e._l23_a>yb){var d=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,l=3*e._l23_a*(e._l23_a+e._l12_a);i=(i*d+e._x1*e._l23_2a-t*e._l12_2a)/l,s=(s*d+e._y1*e._l23_2a-n*e._l12_2a)/l}e._context.bezierCurveTo(r,a,i,s,e._x2,e._y2)}function Zw(e,t){this._context=e,this._alpha=t}Zw.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:Vw(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const Kw=function e(t){function n(e){return t?new Zw(e,t):new Iw(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function Xw(e,t){this._context=e,this._alpha=t}Xw.prototype={areaStart:jw,areaEnd:jw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Vw(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const Qw=function e(t){function n(e){return t?new Xw(e,t):new $w(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function ek(e,t){this._context=e,this._alpha=t}ek.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Vw(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const tk=function e(t){function n(e){return t?new ek(e,t):new Bw(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function nk(e){this._context=e}function rk(e){return new nk(e)}function ak(e){return e<0?-1:1}function ik(e,t,n){var r=e._x1-e._x0,a=t-e._x1,i=(e._y1-e._y0)/(r||a<0&&-0),s=(n-e._y1)/(a||r<0&&-0),o=(i*a+s*r)/(r+a);return(ak(i)+ak(s))*Math.min(Math.abs(i),Math.abs(s),.5*Math.abs(o))||0}function sk(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function ok(e,t,n){var r=e._x0,a=e._y0,i=e._x1,s=e._y1,o=(i-r)/3;e._context.bezierCurveTo(r+o,a+o*t,i-o,s-o*n,i,s)}function uk(e){this._context=e}function dk(e){this._context=new lk(e)}function lk(e){this._context=e}function ck(e){return new uk(e)}function _k(e){return new dk(e)}function fk(e){this._context=e}function hk(e){var t,n,r=e.length-1,a=new Array(r),i=new Array(r),s=new Array(r);for(a[0]=0,i[0]=2,s[0]=e[0]+2*e[1],t=1;t<r-1;++t)a[t]=1,i[t]=4,s[t]=4*e[t]+2*e[t+1];for(a[r-1]=2,i[r-1]=7,s[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=a[t]/i[t-1],i[t]-=n,s[t]-=n*s[t-1];for(a[r-1]=s[r-1]/i[r-1],t=r-2;t>=0;--t)a[t]=(s[t]-a[t+1])/i[t];for(i[r-1]=(e[r]+a[r-1])/2,t=0;t<r-1;++t)i[t]=2*e[t+1]-a[t+1];return[a,i]}function mk(e){return new fk(e)}function yk(e,t){this._context=e,this._t=t}function pk(e){return new yk(e,.5)}function Mk(e){return new yk(e,0)}function gk(e){return new yk(e,1)}function Lk(e,t){if((a=e.length)>1)for(var n,r,a,i=1,s=e[t[0]],o=s.length;i<a;++i)for(r=s,s=e[t[i]],n=0;n<o;++n)s[n][1]+=s[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]}function Yk(e){for(var t=e.length,n=new Array(t);--t>=0;)n[t]=t;return n}function vk(e,t){return e[t]}function bk(e){const t=[];return t.key=e,t}function wk(){var e=ub([]),t=Yk,n=Lk,r=vk;function a(a){var i,s,o=Array.from(e.apply(this,arguments),bk),u=o.length,d=-1;for(const e of a)for(i=0,++d;i<u;++i)(o[i][d]=[0,+r(e,o[i].key,d,a)]).data=e;for(i=0,s=Ab(t(o));i<u;++i)o[s[i]].index=i;return n(o,s),o}return a.keys=function(t){return arguments.length?(e="function"==typeof t?t:ub(Array.from(t)),a):e},a.value=function(e){return arguments.length?(r="function"==typeof e?e:ub(+e),a):r},a.order=function(e){return arguments.length?(t=null==e?Yk:"function"==typeof e?e:ub(Array.from(e)),a):t},a.offset=function(e){return arguments.length?(n=null==e?Lk:e,a):n},a}function kk(e,t){if((r=e.length)>0){for(var n,r,a,i=0,s=e[0].length;i<s;++i){for(a=n=0;n<r;++n)a+=e[n][i][1]||0;if(a)for(n=0;n<r;++n)e[n][i][1]/=a}Lk(e,t)}}function Dk(e,t){if((o=e.length)>0)for(var n,r,a,i,s,o,u=0,d=e[t[0]].length;u<d;++u)for(i=s=0,n=0;n<o;++n)(a=(r=e[t[n]][u])[1]-r[0])>0?(r[0]=i,r[1]=i+=a):a<0?(r[1]=s,r[0]=s+=a):(r[0]=0,r[1]=a)}function Tk(e,t){if((n=e.length)>0){for(var n,r=0,a=e[t[0]],i=a.length;r<i;++r){for(var s=0,o=0;s<n;++s)o+=e[s][r][1]||0;a[r][1]+=a[r][0]=-o/2}Lk(e,t)}}function xk(e,t){if((a=e.length)>0&&(r=(n=e[t[0]]).length)>0){for(var n,r,a,i=0,s=1;s<r;++s){for(var o=0,u=0,d=0;o<a;++o){for(var l=e[t[o]],c=l[s][1]||0,_=(c-(l[s-1][1]||0))/2,f=0;f<o;++f){var h=e[t[f]];_+=(h[s][1]||0)-(h[s-1][1]||0)}u+=c,d+=_*c}n[s-1][1]+=n[s-1][0]=i,u&&(i-=d/u)}n[s-1][1]+=n[s-1][0]=i,Lk(e,t)}}function Sk(e){var t=e.map(Ak);return Yk(e).sort((function(e,n){return t[e]-t[n]}))}function Ak(e){for(var t,n=-1,r=0,a=e.length,i=-1/0;++n<a;)(t=+e[n][1])>i&&(i=t,r=n);return r}function Hk(e){var t=e.map(jk);return Yk(e).sort((function(e,n){return t[e]-t[n]}))}function jk(e){for(var t,n=0,r=-1,a=e.length;++r<a;)(t=+e[r][1])&&(n+=t);return n}function Fk(e){return Hk(e).reverse()}function Ok(e){var t,n,r=e.length,a=e.map(jk),i=Sk(e),s=0,o=0,u=[],d=[];for(t=0;t<r;++t)n=i[t],s<o?(s+=a[n],u.push(n)):(o+=a[n],d.push(n));return d.reverse().concat(u)}function Pk(e){return Yk(e).reverse()}nk.prototype={areaStart:jw,areaEnd:jw,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}},uk.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:ok(this,this._t0,sk(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,ok(this,sk(this,n=ik(this,e,t)),n);break;default:ok(this,this._t0,n=ik(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(dk.prototype=Object.create(uk.prototype)).point=function(e,t){uk.prototype.point.call(this,t,e)},lk.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,a,i){this._context.bezierCurveTo(t,e,r,n,i,a)}},fk.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=hk(e),a=hk(t),i=0,s=1;s<n;++i,++s)this._context.bezierCurveTo(r[0][i],a[0][i],r[1][i],a[1][i],e[s],t[s]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}},yk.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}};var Ek="%Y-%m-%dT%H:%M:%S.%LZ",Nk=Date.prototype.toISOString?function(e){return e.toISOString()}:Rg(Ek);const Jk=Nk;var Wk=+new Date("2000-01-01T00:00:00.000Z")?function(e){var t=new Date(e);return isNaN(t)?null:t}:Ig(Ek);const zk=Wk;function Ck(e,t,n){var r=new _a,a=t;return null==t?(r.restart(e,t,n),r):(r._restart=r.restart,r.restart=function(e,t,n){t=+t,n=null==n?la():+n,r._restart((function i(s){s+=a,r._restart(i,a+=t,n),e(s)}),t,n)},r.restart(e,t,n),r)}const Rk=e=>()=>e;function Ik(e,{sourceEvent:t,target:n,transform:r,dispatch:a}){Object.defineProperties(this,{type:{value:e,enumerable:!0,configurable:!0},sourceEvent:{value:t,enumerable:!0,configurable:!0},target:{value:n,enumerable:!0,configurable:!0},transform:{value:r,enumerable:!0,configurable:!0},_:{value:a}})}function Uk(e,t,n){this.k=e,this.x=t,this.y=n}Uk.prototype={constructor:Uk,scale:function(e){return 1===e?this:new Uk(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new Uk(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var $k=new Uk(1,0,0);function qk(e){for(;!e.__zoom;)if(!(e=e.parentNode))return $k;return e.__zoom}function Bk(e){e.stopImmediatePropagation()}function Gk(e){e.preventDefault(),e.stopImmediatePropagation()}function Vk(e){return!(e.ctrlKey&&"wheel"!==e.type||e.button)}function Zk(){var e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e).hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]:[[0,0],[e.clientWidth,e.clientHeight]]}function Kk(){return this.__zoom||$k}function Xk(e){return-e.deltaY*(1===e.deltaMode?.05:e.deltaMode?1:.002)*(e.ctrlKey?10:1)}function Qk(){return navigator.maxTouchPoints||"ontouchstart"in this}function eD(e,t,n){var r=e.invertX(t[0][0])-n[0][0],a=e.invertX(t[1][0])-n[1][0],i=e.invertY(t[0][1])-n[0][1],s=e.invertY(t[1][1])-n[1][1];return e.translate(a>r?(r+a)/2:Math.min(0,r)||Math.max(0,a),s>i?(i+s)/2:Math.min(0,i)||Math.max(0,s))}function tD(){var e,t,n,r=Vk,a=Zk,i=eD,s=Xk,o=Qk,u=[0,1/0],d=[[-1/0,-1/0],[1/0,1/0]],l=250,c=zy,_=Dt("start","zoom","end"),f=0,h=10;function m(e){e.property("__zoom",Kk).on("wheel.zoom",v,{passive:!1}).on("mousedown.zoom",b).on("dblclick.zoom",w).filter(o).on("touchstart.zoom",k).on("touchmove.zoom",D).on("touchend.zoom touchcancel.zoom",T).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function y(e,t){return(t=Math.max(u[0],Math.min(u[1],t)))===e.k?e:new Uk(t,e.x,e.y)}function p(e,t,n){var r=t[0]-n[0]*e.k,a=t[1]-n[1]*e.k;return r===e.x&&a===e.y?e:new Uk(e.k,r,a)}function M(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function g(e,t,n,r){e.on("start.zoom",(function(){L(this,arguments).event(r).start()})).on("interrupt.zoom end.zoom",(function(){L(this,arguments).event(r).end()})).tween("zoom",(function(){var e=this,i=arguments,s=L(e,i).event(r),o=a.apply(e,i),u=null==n?M(o):"function"==typeof n?n.apply(e,i):n,d=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),l=e.__zoom,_="function"==typeof t?t.apply(e,i):t,f=c(l.invert(u).concat(d/l.k),_.invert(u).concat(d/_.k));return function(e){if(1===e)e=_;else{var t=f(e),n=d/t[2];e=new Uk(n,u[0]-t[0]*n,u[1]-t[1]*n)}s.zoom(null,e)}}))}function L(e,t,n){return!n&&e.__zooming||new Y(e,t)}function Y(e,t){this.that=e,this.args=t,this.active=0,this.sourceEvent=null,this.extent=a.apply(e,t),this.taps=0}function v(e,...t){if(r.apply(this,arguments)){var n=L(this,t).event(e),a=this.__zoom,o=Math.max(u[0],Math.min(u[1],a.k*Math.pow(2,s.apply(this,arguments)))),l=Qr(e);if(n.wheel)n.mouse[0][0]===l[0]&&n.mouse[0][1]===l[1]||(n.mouse[1]=a.invert(n.mouse[0]=l)),clearTimeout(n.wheel);else{if(a.k===o)return;n.mouse=[l,a.invert(l)],Sa(this),n.start()}Gk(e),n.wheel=setTimeout((function(){n.wheel=null,n.end()}),150),n.zoom("mouse",i(p(y(a,o),n.mouse[0],n.mouse[1]),n.extent,d))}}function b(e,...t){if(!n&&r.apply(this,arguments)){var a=e.currentTarget,s=L(this,t,!0).event(e),o=Cn(e.view).on("mousemove.zoom",(function(e){if(Gk(e),!s.moved){var t=e.clientX-l,n=e.clientY-c;s.moved=t*t+n*n>f}s.event(e).zoom("mouse",i(p(s.that.__zoom,s.mouse[0]=Qr(e,a),s.mouse[1]),s.extent,d))}),!0).on("mouseup.zoom",(function(e){o.on("mousemove.zoom mouseup.zoom",null),Bn(e.view,s.moved),Gk(e),s.event(e).end()}),!0),u=Qr(e,a),l=e.clientX,c=e.clientY;qn(e.view),Bk(e),s.mouse=[u,this.__zoom.invert(u)],Sa(this),s.start()}}function w(e,...t){if(r.apply(this,arguments)){var n=this.__zoom,s=Qr(e.changedTouches?e.changedTouches[0]:e,this),o=n.invert(s),u=n.k*(e.shiftKey?.5:2),c=i(p(y(n,u),s,o),a.apply(this,t),d);Gk(e),l>0?Cn(this).transition().duration(l).call(g,c,s,e):Cn(this).call(m.transform,c,s,e)}}function k(n,...a){if(r.apply(this,arguments)){var i,s,o,u,d=n.touches,l=d.length,c=L(this,a,n.changedTouches.length===l).event(n);for(Bk(n),s=0;s<l;++s)u=[u=Qr(o=d[s],this),this.__zoom.invert(u),o.identifier],c.touch0?c.touch1||c.touch0[2]===u[2]||(c.touch1=u,c.taps=0):(c.touch0=u,i=!0,c.taps=1+!!e);e&&(e=clearTimeout(e)),i&&(c.taps<2&&(t=u[0],e=setTimeout((function(){e=null}),500)),Sa(this),c.start())}}function D(e,...t){if(this.__zooming){var n,r,a,s,o=L(this,t).event(e),u=e.changedTouches,l=u.length;for(Gk(e),n=0;n<l;++n)a=Qr(r=u[n],this),o.touch0&&o.touch0[2]===r.identifier?o.touch0[0]=a:o.touch1&&o.touch1[2]===r.identifier&&(o.touch1[0]=a);if(r=o.that.__zoom,o.touch1){var c=o.touch0[0],_=o.touch0[1],f=o.touch1[0],h=o.touch1[1],m=(m=f[0]-c[0])*m+(m=f[1]-c[1])*m,M=(M=h[0]-_[0])*M+(M=h[1]-_[1])*M;r=y(r,Math.sqrt(m/M)),a=[(c[0]+f[0])/2,(c[1]+f[1])/2],s=[(_[0]+h[0])/2,(_[1]+h[1])/2]}else{if(!o.touch0)return;a=o.touch0[0],s=o.touch0[1]}o.zoom("touch",i(p(r,a,s),o.extent,d))}}function T(e,...r){if(this.__zooming){var a,i,s=L(this,r).event(e),o=e.changedTouches,u=o.length;for(Bk(e),n&&clearTimeout(n),n=setTimeout((function(){n=null}),500),a=0;a<u;++a)i=o[a],s.touch0&&s.touch0[2]===i.identifier?delete s.touch0:s.touch1&&s.touch1[2]===i.identifier&&delete s.touch1;if(s.touch1&&!s.touch0&&(s.touch0=s.touch1,delete s.touch1),s.touch0)s.touch0[1]=this.__zoom.invert(s.touch0[0]);else if(s.end(),2===s.taps&&(i=Qr(i,this),Math.hypot(t[0]-i[0],t[1]-i[1])<h)){var d=Cn(this).on("dblclick.zoom");d&&d.apply(this,arguments)}}}return m.transform=function(e,t,n,r){var a=e.selection?e.selection():e;a.property("__zoom",Kk),e!==a?g(e,t,n,r):a.interrupt().each((function(){L(this,arguments).event(r).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()}))},m.scaleBy=function(e,t,n,r){m.scaleTo(e,(function(){return this.__zoom.k*("function"==typeof t?t.apply(this,arguments):t)}),n,r)},m.scaleTo=function(e,t,n,r){m.transform(e,(function(){var e=a.apply(this,arguments),r=this.__zoom,s=null==n?M(e):"function"==typeof n?n.apply(this,arguments):n,o=r.invert(s),u="function"==typeof t?t.apply(this,arguments):t;return i(p(y(r,u),s,o),e,d)}),n,r)},m.translateBy=function(e,t,n,r){m.transform(e,(function(){return i(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),a.apply(this,arguments),d)}),null,r)},m.translateTo=function(e,t,n,r,s){m.transform(e,(function(){var e=a.apply(this,arguments),s=this.__zoom,o=null==r?M(e):"function"==typeof r?r.apply(this,arguments):r;return i($k.translate(o[0],o[1]).scale(s.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e,d)}),r,s)},Y.prototype={event:function(e){return e&&(this.sourceEvent=e),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(e){var t=Cn(this.that).datum();_.call(e,this.that,new Ik(e,{sourceEvent:this.sourceEvent,target:m,type:e,transform:this.that.__zoom,dispatch:_}),t)}},m.wheelDelta=function(e){return arguments.length?(s="function"==typeof e?e:Rk(+e),m):s},m.filter=function(e){return arguments.length?(r="function"==typeof e?e:Rk(!!e),m):r},m.touchable=function(e){return arguments.length?(o="function"==typeof e?e:Rk(!!e),m):o},m.extent=function(e){return arguments.length?(a="function"==typeof e?e:Rk([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),m):a},m.scaleExtent=function(e){return arguments.length?(u[0]=+e[0],u[1]=+e[1],m):[u[0],u[1]]},m.translateExtent=function(e){return arguments.length?(d[0][0]=+e[0][0],d[1][0]=+e[1][0],d[0][1]=+e[0][1],d[1][1]=+e[1][1],m):[[d[0][0],d[0][1]],[d[1][0],d[1][1]]]},m.constrain=function(e){return arguments.length?(i=e,m):i},m.duration=function(e){return arguments.length?(l=+e,m):l},m.interpolate=function(e){return arguments.length?(c=e,m):c},m.on=function(){var e=_.on.apply(_,arguments);return e===_?m:e},m.clickDistance=function(e){return arguments.length?(f=(e=+e)*e,m):Math.sqrt(f)},m.tapDistance=function(e){return arguments.length?(h=+e,m):h},m}qk.prototype=Uk.prototype},9374:function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},9402:function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},9527:function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(5093))},9532:function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},9680:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},9722:function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(5093))},9756:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(5093))},9788:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inflation=function(e,t){const n=e||{},a=t||{year:r};if(!n.year)throw new Error("from.year must be provided");if(!n.amount)throw new Error("from.amount must be provided");if("number"!=typeof n.year)throw new Error("from.year must be a number, like 1922");if(n.year<1913)throw new Error("from.year must be 1913 or later");if(n.year>r)return n.amount;const s=i(n.year,n.month);return+((i(a.year,a.month)-s)/s*n.amount+n.amount).toFixed(2)};const n=[{Year:1913,Jan:9.8,Feb:9.8,Mar:9.8,Apr:9.8,May:9.7,Jun:9.8,Jul:9.9,Aug:9.9,Sep:10,Oct:10,Nov:10.1,Dec:10,Annual:9.9,HALF1:"",HALF2:""},{Year:1914,Jan:10,Feb:9.9,Mar:9.9,Apr:9.8,May:9.9,Jun:9.9,Jul:10,Aug:10.2,Sep:10.2,Oct:10.1,Nov:10.2,Dec:10.1,Annual:10,HALF1:"",HALF2:""},{Year:1915,Jan:10.1,Feb:10,Mar:9.9,Apr:10,May:10.1,Jun:10.1,Jul:10.1,Aug:10.1,Sep:10.1,Oct:10.2,Nov:10.3,Dec:10.3,Annual:10.1,HALF1:"",HALF2:""},{Year:1916,Jan:10.4,Feb:10.4,Mar:10.5,Apr:10.6,May:10.7,Jun:10.8,Jul:10.8,Aug:10.9,Sep:11.1,Oct:11.3,Nov:11.5,Dec:11.6,Annual:10.9,HALF1:"",HALF2:""},{Year:1917,Jan:11.7,Feb:12,Mar:12,Apr:12.6,May:12.8,Jun:13,Jul:12.8,Aug:13,Sep:13.3,Oct:13.5,Nov:13.5,Dec:13.7,Annual:12.8,HALF1:"",HALF2:""},{Year:1918,Jan:14,Feb:14.1,Mar:14,Apr:14.2,May:14.5,Jun:14.7,Jul:15.1,Aug:15.4,Sep:15.7,Oct:16,Nov:16.3,Dec:16.5,Annual:15.1,HALF1:"",HALF2:""},{Year:1919,Jan:16.5,Feb:16.2,Mar:16.4,Apr:16.7,May:16.9,Jun:16.9,Jul:17.4,Aug:17.7,Sep:17.8,Oct:18.1,Nov:18.5,Dec:18.9,Annual:17.3,HALF1:"",HALF2:""},{Year:1920,Jan:19.3,Feb:19.5,Mar:19.7,Apr:20.3,May:20.6,Jun:20.9,Jul:20.8,Aug:20.3,Sep:20,Oct:19.9,Nov:19.8,Dec:19.4,Annual:20,HALF1:"",HALF2:""},{Year:1921,Jan:19,Feb:18.4,Mar:18.3,Apr:18.1,May:17.7,Jun:17.6,Jul:17.7,Aug:17.7,Sep:17.5,Oct:17.5,Nov:17.4,Dec:17.3,Annual:17.9,HALF1:"",HALF2:""},{Year:1922,Jan:16.9,Feb:16.9,Mar:16.7,Apr:16.7,May:16.7,Jun:16.7,Jul:16.8,Aug:16.6,Sep:16.6,Oct:16.7,Nov:16.8,Dec:16.9,Annual:16.8,HALF1:"",HALF2:""},{Year:1923,Jan:16.8,Feb:16.8,Mar:16.8,Apr:16.9,May:16.9,Jun:17,Jul:17.2,Aug:17.1,Sep:17.2,Oct:17.3,Nov:17.3,Dec:17.3,Annual:17.1,HALF1:"",HALF2:""},{Year:1924,Jan:17.3,Feb:17.2,Mar:17.1,Apr:17,May:17,Jun:17,Jul:17.1,Aug:17,Sep:17.1,Oct:17.2,Nov:17.2,Dec:17.3,Annual:17.1,HALF1:"",HALF2:""},{Year:1925,Jan:17.3,Feb:17.2,Mar:17.3,Apr:17.2,May:17.3,Jun:17.5,Jul:17.7,Aug:17.7,Sep:17.7,Oct:17.7,Nov:18,Dec:17.9,Annual:17.5,HALF1:"",HALF2:""},{Year:1926,Jan:17.9,Feb:17.9,Mar:17.8,Apr:17.9,May:17.8,Jun:17.7,Jul:17.5,Aug:17.4,Sep:17.5,Oct:17.6,Nov:17.7,Dec:17.7,Annual:17.7,HALF1:"",HALF2:""},{Year:1927,Jan:17.5,Feb:17.4,Mar:17.3,Apr:17.3,May:17.4,Jun:17.6,Jul:17.3,Aug:17.2,Sep:17.3,Oct:17.4,Nov:17.3,Dec:17.3,Annual:17.4,HALF1:"",HALF2:""},{Year:1928,Jan:17.3,Feb:17.1,Mar:17.1,Apr:17.1,May:17.2,Jun:17.1,Jul:17.1,Aug:17.1,Sep:17.3,Oct:17.2,Nov:17.2,Dec:17.1,Annual:17.1,HALF1:"",HALF2:""},{Year:1929,Jan:17.1,Feb:17.1,Mar:17,Apr:16.9,May:17,Jun:17.1,Jul:17.3,Aug:17.3,Sep:17.3,Oct:17.3,Nov:17.3,Dec:17.2,Annual:17.1,HALF1:"",HALF2:""},{Year:1930,Jan:17.1,Feb:17,Mar:16.9,Apr:17,May:16.9,Jun:16.8,Jul:16.6,Aug:16.5,Sep:16.6,Oct:16.5,Nov:16.4,Dec:16.1,Annual:16.7,HALF1:"",HALF2:""},{Year:1931,Jan:15.9,Feb:15.7,Mar:15.6,Apr:15.5,May:15.3,Jun:15.1,Jul:15.1,Aug:15.1,Sep:15,Oct:14.9,Nov:14.7,Dec:14.6,Annual:15.2,HALF1:"",HALF2:""},{Year:1932,Jan:14.3,Feb:14.1,Mar:14,Apr:13.9,May:13.7,Jun:13.6,Jul:13.6,Aug:13.5,Sep:13.4,Oct:13.3,Nov:13.2,Dec:13.1,Annual:13.7,HALF1:"",HALF2:""},{Year:1933,Jan:12.9,Feb:12.7,Mar:12.6,Apr:12.6,May:12.6,Jun:12.7,Jul:13.1,Aug:13.2,Sep:13.2,Oct:13.2,Nov:13.2,Dec:13.2,Annual:13,HALF1:"",HALF2:""},{Year:1934,Jan:13.2,Feb:13.3,Mar:13.3,Apr:13.3,May:13.3,Jun:13.4,Jul:13.4,Aug:13.4,Sep:13.6,Oct:13.5,Nov:13.5,Dec:13.4,Annual:13.4,HALF1:"",HALF2:""},{Year:1935,Jan:13.6,Feb:13.7,Mar:13.7,Apr:13.8,May:13.8,Jun:13.7,Jul:13.7,Aug:13.7,Sep:13.7,Oct:13.7,Nov:13.8,Dec:13.8,Annual:13.7,HALF1:"",HALF2:""},{Year:1936,Jan:13.8,Feb:13.8,Mar:13.7,Apr:13.7,May:13.7,Jun:13.8,Jul:13.9,Aug:14,Sep:14,Oct:14,Nov:14,Dec:14,Annual:13.9,HALF1:"",HALF2:""},{Year:1937,Jan:14.1,Feb:14.1,Mar:14.2,Apr:14.3,May:14.4,Jun:14.4,Jul:14.5,Aug:14.5,Sep:14.6,Oct:14.6,Nov:14.5,Dec:14.4,Annual:14.4,HALF1:"",HALF2:""},{Year:1938,Jan:14.2,Feb:14.1,Mar:14.1,Apr:14.2,May:14.1,Jun:14.1,Jul:14.1,Aug:14.1,Sep:14.1,Oct:14,Nov:14,Dec:14,Annual:14.1,HALF1:"",HALF2:""},{Year:1939,Jan:14,Feb:13.9,Mar:13.9,Apr:13.8,May:13.8,Jun:13.8,Jul:13.8,Aug:13.8,Sep:14.1,Oct:14,Nov:14,Dec:14,Annual:13.9,HALF1:"",HALF2:""},{Year:1940,Jan:13.9,Feb:14,Mar:14,Apr:14,May:14,Jun:14.1,Jul:14,Aug:14,Sep:14,Oct:14,Nov:14,Dec:14.1,Annual:14,HALF1:"",HALF2:""},{Year:1941,Jan:14.1,Feb:14.1,Mar:14.2,Apr:14.3,May:14.4,Jun:14.7,Jul:14.7,Aug:14.9,Sep:15.1,Oct:15.3,Nov:15.4,Dec:15.5,Annual:14.7,HALF1:"",HALF2:""},{Year:1942,Jan:15.7,Feb:15.8,Mar:16,Apr:16.1,May:16.3,Jun:16.3,Jul:16.4,Aug:16.5,Sep:16.5,Oct:16.7,Nov:16.8,Dec:16.9,Annual:16.3,HALF1:"",HALF2:""},{Year:1943,Jan:16.9,Feb:16.9,Mar:17.2,Apr:17.4,May:17.5,Jun:17.5,Jul:17.4,Aug:17.3,Sep:17.4,Oct:17.4,Nov:17.4,Dec:17.4,Annual:17.3,HALF1:"",HALF2:""},{Year:1944,Jan:17.4,Feb:17.4,Mar:17.4,Apr:17.5,May:17.5,Jun:17.6,Jul:17.7,Aug:17.7,Sep:17.7,Oct:17.7,Nov:17.7,Dec:17.8,Annual:17.6,HALF1:"",HALF2:""},{Year:1945,Jan:17.8,Feb:17.8,Mar:17.8,Apr:17.8,May:17.9,Jun:18.1,Jul:18.1,Aug:18.1,Sep:18.1,Oct:18.1,Nov:18.1,Dec:18.2,Annual:18,HALF1:"",HALF2:""},{Year:1946,Jan:18.2,Feb:18.1,Mar:18.3,Apr:18.4,May:18.5,Jun:18.7,Jul:19.8,Aug:20.2,Sep:20.4,Oct:20.8,Nov:21.3,Dec:21.5,Annual:19.5,HALF1:"",HALF2:""},{Year:1947,Jan:21.5,Feb:21.5,Mar:21.9,Apr:21.9,May:21.9,Jun:22,Jul:22.2,Aug:22.5,Sep:23,Oct:23,Nov:23.1,Dec:23.4,Annual:22.3,HALF1:"",HALF2:""},{Year:1948,Jan:23.7,Feb:23.5,Mar:23.4,Apr:23.8,May:23.9,Jun:24.1,Jul:24.4,Aug:24.5,Sep:24.5,Oct:24.4,Nov:24.2,Dec:24.1,Annual:24.1,HALF1:"",HALF2:""},{Year:1949,Jan:24,Feb:23.8,Mar:23.8,Apr:23.9,May:23.8,Jun:23.9,Jul:23.7,Aug:23.8,Sep:23.9,Oct:23.7,Nov:23.8,Dec:23.6,Annual:23.8,HALF1:"",HALF2:""},{Year:1950,Jan:23.5,Feb:23.5,Mar:23.6,Apr:23.6,May:23.7,Jun:23.8,Jul:24.1,Aug:24.3,Sep:24.4,Oct:24.6,Nov:24.7,Dec:25,Annual:24.1,HALF1:"",HALF2:""},{Year:1951,Jan:25.4,Feb:25.7,Mar:25.8,Apr:25.8,May:25.9,Jun:25.9,Jul:25.9,Aug:25.9,Sep:26.1,Oct:26.2,Nov:26.4,Dec:26.5,Annual:26,HALF1:"",HALF2:""},{Year:1952,Jan:26.5,Feb:26.3,Mar:26.3,Apr:26.4,May:26.4,Jun:26.5,Jul:26.7,Aug:26.7,Sep:26.7,Oct:26.7,Nov:26.7,Dec:26.7,Annual:26.5,HALF1:"",HALF2:""},{Year:1953,Jan:26.6,Feb:26.5,Mar:26.6,Apr:26.6,May:26.7,Jun:26.8,Jul:26.8,Aug:26.9,Sep:26.9,Oct:27,Nov:26.9,Dec:26.9,Annual:26.7,HALF1:"",HALF2:""},{Year:1954,Jan:26.9,Feb:26.9,Mar:26.9,Apr:26.8,May:26.9,Jun:26.9,Jul:26.9,Aug:26.9,Sep:26.8,Oct:26.8,Nov:26.8,Dec:26.7,Annual:26.9,HALF1:"",HALF2:""},{Year:1955,Jan:26.7,Feb:26.7,Mar:26.7,Apr:26.7,May:26.7,Jun:26.7,Jul:26.8,Aug:26.8,Sep:26.9,Oct:26.9,Nov:26.9,Dec:26.8,Annual:26.8,HALF1:"",HALF2:""},{Year:1956,Jan:26.8,Feb:26.8,Mar:26.8,Apr:26.9,May:27,Jun:27.2,Jul:27.4,Aug:27.3,Sep:27.4,Oct:27.5,Nov:27.5,Dec:27.6,Annual:27.2,HALF1:"",HALF2:""},{Year:1957,Jan:27.6,Feb:27.7,Mar:27.8,Apr:27.9,May:28,Jun:28.1,Jul:28.3,Aug:28.3,Sep:28.3,Oct:28.3,Nov:28.4,Dec:28.4,Annual:28.1,HALF1:"",HALF2:""},{Year:1958,Jan:28.6,Feb:28.6,Mar:28.8,Apr:28.9,May:28.9,Jun:28.9,Jul:29,Aug:28.9,Sep:28.9,Oct:28.9,Nov:29,Dec:28.9,Annual:28.9,HALF1:"",HALF2:""},{Year:1959,Jan:29,Feb:28.9,Mar:28.9,Apr:29,May:29,Jun:29.1,Jul:29.2,Aug:29.2,Sep:29.3,Oct:29.4,Nov:29.4,Dec:29.4,Annual:29.1,HALF1:"",HALF2:""},{Year:1960,Jan:29.3,Feb:29.4,Mar:29.4,Apr:29.5,May:29.5,Jun:29.6,Jul:29.6,Aug:29.6,Sep:29.6,Oct:29.8,Nov:29.8,Dec:29.8,Annual:29.6,HALF1:"",HALF2:""},{Year:1961,Jan:29.8,Feb:29.8,Mar:29.8,Apr:29.8,May:29.8,Jun:29.8,Jul:30,Aug:29.9,Sep:30,Oct:30,Nov:30,Dec:30,Annual:29.9,HALF1:"",HALF2:""},{Year:1962,Jan:30,Feb:30.1,Mar:30.1,Apr:30.2,May:30.2,Jun:30.2,Jul:30.3,Aug:30.3,Sep:30.4,Oct:30.4,Nov:30.4,Dec:30.4,Annual:30.2,HALF1:"",HALF2:""},{Year:1963,Jan:30.4,Feb:30.4,Mar:30.5,Apr:30.5,May:30.5,Jun:30.6,Jul:30.7,Aug:30.7,Sep:30.7,Oct:30.8,Nov:30.8,Dec:30.9,Annual:30.6,HALF1:"",HALF2:""},{Year:1964,Jan:30.9,Feb:30.9,Mar:30.9,Apr:30.9,May:30.9,Jun:31,Jul:31.1,Aug:31,Sep:31.1,Oct:31.1,Nov:31.2,Dec:31.2,Annual:31,HALF1:"",HALF2:""},{Year:1965,Jan:31.2,Feb:31.2,Mar:31.3,Apr:31.4,May:31.4,Jun:31.6,Jul:31.6,Aug:31.6,Sep:31.6,Oct:31.7,Nov:31.7,Dec:31.8,Annual:31.5,HALF1:"",HALF2:""},{Year:1966,Jan:31.8,Feb:32,Mar:32.1,Apr:32.3,May:32.3,Jun:32.4,Jul:32.5,Aug:32.7,Sep:32.7,Oct:32.9,Nov:32.9,Dec:32.9,Annual:32.4,HALF1:"",HALF2:""},{Year:1967,Jan:32.9,Feb:32.9,Mar:33,Apr:33.1,May:33.2,Jun:33.3,Jul:33.4,Aug:33.5,Sep:33.6,Oct:33.7,Nov:33.8,Dec:33.9,Annual:33.4,HALF1:"",HALF2:""},{Year:1968,Jan:34.1,Feb:34.2,Mar:34.3,Apr:34.4,May:34.5,Jun:34.7,Jul:34.9,Aug:35,Sep:35.1,Oct:35.3,Nov:35.4,Dec:35.5,Annual:34.8,HALF1:"",HALF2:""},{Year:1969,Jan:35.6,Feb:35.8,Mar:36.1,Apr:36.3,May:36.4,Jun:36.6,Jul:36.8,Aug:37,Sep:37.1,Oct:37.3,Nov:37.5,Dec:37.7,Annual:36.7,HALF1:"",HALF2:""},{Year:1970,Jan:37.8,Feb:38,Mar:38.2,Apr:38.5,May:38.6,Jun:38.8,Jul:39,Aug:39,Sep:39.2,Oct:39.4,Nov:39.6,Dec:39.8,Annual:38.8,HALF1:"",HALF2:""},{Year:1971,Jan:39.8,Feb:39.9,Mar:40,Apr:40.1,May:40.3,Jun:40.6,Jul:40.7,Aug:40.8,Sep:40.8,Oct:40.9,Nov:40.9,Dec:41.1,Annual:40.5,HALF1:"",HALF2:""},{Year:1972,Jan:41.1,Feb:41.3,Mar:41.4,Apr:41.5,May:41.6,Jun:41.7,Jul:41.9,Aug:42,Sep:42.1,Oct:42.3,Nov:42.4,Dec:42.5,Annual:41.8,HALF1:"",HALF2:""},{Year:1973,Jan:42.6,Feb:42.9,Mar:43.3,Apr:43.6,May:43.9,Jun:44.2,Jul:44.3,Aug:45.1,Sep:45.2,Oct:45.6,Nov:45.9,Dec:46.2,Annual:44.4,HALF1:"",HALF2:""},{Year:1974,Jan:46.6,Feb:47.2,Mar:47.8,Apr:48,May:48.6,Jun:49,Jul:49.4,Aug:50,Sep:50.6,Oct:51.1,Nov:51.5,Dec:51.9,Annual:49.3,HALF1:"",HALF2:""},{Year:1975,Jan:52.1,Feb:52.5,Mar:52.7,Apr:52.9,May:53.2,Jun:53.6,Jul:54.2,Aug:54.3,Sep:54.6,Oct:54.9,Nov:55.3,Dec:55.5,Annual:53.8,HALF1:"",HALF2:""},{Year:1976,Jan:55.6,Feb:55.8,Mar:55.9,Apr:56.1,May:56.5,Jun:56.8,Jul:57.1,Aug:57.4,Sep:57.6,Oct:57.9,Nov:58,Dec:58.2,Annual:56.9,HALF1:"",HALF2:""},{Year:1977,Jan:58.5,Feb:59.1,Mar:59.5,Apr:60,May:60.3,Jun:60.7,Jul:61,Aug:61.2,Sep:61.4,Oct:61.6,Nov:61.9,Dec:62.1,Annual:60.6,HALF1:"",HALF2:""},{Year:1978,Jan:62.5,Feb:62.9,Mar:63.4,Apr:63.9,May:64.5,Jun:65.2,Jul:65.7,Aug:66,Sep:66.5,Oct:67.1,Nov:67.4,Dec:67.7,Annual:65.2,HALF1:"",HALF2:""},{Year:1979,Jan:68.3,Feb:69.1,Mar:69.8,Apr:70.6,May:71.5,Jun:72.3,Jul:73.1,Aug:73.8,Sep:74.6,Oct:75.2,Nov:75.9,Dec:76.7,Annual:72.6,HALF1:"",HALF2:""},{Year:1980,Jan:77.8,Feb:78.9,Mar:80.1,Apr:81,May:81.8,Jun:82.7,Jul:82.7,Aug:83.3,Sep:84,Oct:84.8,Nov:85.5,Dec:86.3,Annual:82.4,HALF1:"",HALF2:""},{Year:1981,Jan:87,Feb:87.9,Mar:88.5,Apr:89.1,May:89.8,Jun:90.6,Jul:91.6,Aug:92.3,Sep:93.2,Oct:93.4,Nov:93.7,Dec:94,Annual:90.9,HALF1:"",HALF2:""},{Year:1982,Jan:94.3,Feb:94.6,Mar:94.5,Apr:94.9,May:95.8,Jun:97,Jul:97.5,Aug:97.7,Sep:97.9,Oct:98.2,Nov:98,Dec:97.6,Annual:96.5,HALF1:"",HALF2:""},{Year:1983,Jan:97.8,Feb:97.9,Mar:97.9,Apr:98.6,May:99.2,Jun:99.5,Jul:99.9,Aug:100.2,Sep:100.7,Oct:101,Nov:101.2,Dec:101.3,Annual:99.6,HALF1:"",HALF2:""},{Year:1984,Jan:101.9,Feb:102.4,Mar:102.6,Apr:103.1,May:103.4,Jun:103.7,Jul:104.1,Aug:104.5,Sep:105,Oct:105.3,Nov:105.3,Dec:105.3,Annual:103.9,HALF1:102.9,HALF2:104.9},{Year:1985,Jan:105.5,Feb:106,Mar:106.4,Apr:106.9,May:107.3,Jun:107.6,Jul:107.8,Aug:108,Sep:108.3,Oct:108.7,Nov:109,Dec:109.3,Annual:107.6,HALF1:106.6,HALF2:108.5},{Year:1986,Jan:109.6,Feb:109.3,Mar:108.8,Apr:108.6,May:108.9,Jun:109.5,Jul:109.5,Aug:109.7,Sep:110.2,Oct:110.3,Nov:110.4,Dec:110.5,Annual:109.6,HALF1:109.1,HALF2:110.1},{Year:1987,Jan:111.2,Feb:111.6,Mar:112.1,Apr:112.7,May:113.1,Jun:113.5,Jul:113.8,Aug:114.4,Sep:115,Oct:115.3,Nov:115.4,Dec:115.4,Annual:113.6,HALF1:112.4,HALF2:114.9},{Year:1988,Jan:115.7,Feb:116,Mar:116.5,Apr:117.1,May:117.5,Jun:118,Jul:118.5,Aug:119,Sep:119.8,Oct:120.2,Nov:120.3,Dec:120.5,Annual:118.3,HALF1:116.8,HALF2:119.7},{Year:1989,Jan:121.1,Feb:121.6,Mar:122.3,Apr:123.1,May:123.8,Jun:124.1,Jul:124.4,Aug:124.6,Sep:125,Oct:125.6,Nov:125.9,Dec:126.1,Annual:124,HALF1:122.7,HALF2:125.3},{Year:1990,Jan:127.4,Feb:128,Mar:128.7,Apr:128.9,May:129.2,Jun:129.9,Jul:130.4,Aug:131.6,Sep:132.7,Oct:133.5,Nov:133.8,Dec:133.8,Annual:130.7,HALF1:128.7,HALF2:132.6},{Year:1991,Jan:134.6,Feb:134.8,Mar:135,Apr:135.2,May:135.6,Jun:136,Jul:136.2,Aug:136.6,Sep:137.2,Oct:137.4,Nov:137.8,Dec:137.9,Annual:136.2,HALF1:135.2,HALF2:137.2},{Year:1992,Jan:138.1,Feb:138.6,Mar:139.3,Apr:139.5,May:139.7,Jun:140.2,Jul:140.5,Aug:140.9,Sep:141.3,Oct:141.8,Nov:142,Dec:141.9,Annual:140.3,HALF1:139.2,HALF2:141.4},{Year:1993,Jan:142.6,Feb:143.1,Mar:143.6,Apr:144,May:144.2,Jun:144.4,Jul:144.4,Aug:144.8,Sep:145.1,Oct:145.7,Nov:145.8,Dec:145.8,Annual:144.5,HALF1:143.7,HALF2:145.3},{Year:1994,Jan:146.2,Feb:146.7,Mar:147.2,Apr:147.4,May:147.5,Jun:148,Jul:148.4,Aug:149,Sep:149.4,Oct:149.5,Nov:149.7,Dec:149.7,Annual:148.2,HALF1:147.2,HALF2:149.3},{Year:1995,Jan:150.3,Feb:150.9,Mar:151.4,Apr:151.9,May:152.2,Jun:152.5,Jul:152.5,Aug:152.9,Sep:153.2,Oct:153.7,Nov:153.6,Dec:153.5,Annual:152.4,HALF1:151.5,HALF2:153.2},{Year:1996,Jan:154.4,Feb:154.9,Mar:155.7,Apr:156.3,May:156.6,Jun:156.7,Jul:157,Aug:157.3,Sep:157.8,Oct:158.3,Nov:158.6,Dec:158.6,Annual:156.9,HALF1:155.8,HALF2:157.9},{Year:1997,Jan:159.1,Feb:159.6,Mar:160,Apr:160.2,May:160.1,Jun:160.3,Jul:160.5,Aug:160.8,Sep:161.2,Oct:161.6,Nov:161.5,Dec:161.3,Annual:160.5,HALF1:159.9,HALF2:161.2},{Year:1998,Jan:161.6,Feb:161.9,Mar:162.2,Apr:162.5,May:162.8,Jun:163,Jul:163.2,Aug:163.4,Sep:163.6,Oct:164,Nov:164,Dec:163.9,Annual:163,HALF1:162.3,HALF2:163.7},{Year:1999,Jan:164.3,Feb:164.5,Mar:165,Apr:166.2,May:166.2,Jun:166.2,Jul:166.7,Aug:167.1,Sep:167.9,Oct:168.2,Nov:168.3,Dec:168.3,Annual:166.6,HALF1:165.4,HALF2:167.8},{Year:2e3,Jan:168.8,Feb:169.8,Mar:171.2,Apr:171.3,May:171.5,Jun:172.4,Jul:172.8,Aug:172.8,Sep:173.7,Oct:174,Nov:174.1,Dec:174,Annual:172.2,HALF1:170.8,HALF2:173.6},{Year:2001,Jan:175.1,Feb:175.8,Mar:176.2,Apr:176.9,May:177.7,Jun:178,Jul:177.5,Aug:177.5,Sep:178.3,Oct:177.7,Nov:177.4,Dec:176.7,Annual:177.1,HALF1:176.6,HALF2:177.5},{Year:2002,Jan:177.1,Feb:177.8,Mar:178.8,Apr:179.8,May:179.8,Jun:179.9,Jul:180.1,Aug:180.7,Sep:181,Oct:181.3,Nov:181.3,Dec:180.9,Annual:179.9,HALF1:178.9,HALF2:180.9},{Year:2003,Jan:181.7,Feb:183.1,Mar:184.2,Apr:183.8,May:183.5,Jun:183.7,Jul:183.9,Aug:184.6,Sep:185.2,Oct:185,Nov:184.5,Dec:184.3,Annual:184,HALF1:183.3,HALF2:184.6},{Year:2004,Jan:185.2,Feb:186.2,Mar:187.4,Apr:188,May:189.1,Jun:189.7,Jul:189.4,Aug:189.5,Sep:189.9,Oct:190.9,Nov:191,Dec:190.3,Annual:188.9,HALF1:187.6,HALF2:190.2},{Year:2005,Jan:190.7,Feb:191.8,Mar:193.3,Apr:194.6,May:194.4,Jun:194.5,Jul:195.4,Aug:196.4,Sep:198.8,Oct:199.2,Nov:197.6,Dec:196.8,Annual:195.3,HALF1:193.2,HALF2:197.4},{Year:2006,Jan:198.3,Feb:198.7,Mar:199.8,Apr:201.5,May:202.5,Jun:202.9,Jul:203.5,Aug:203.9,Sep:202.9,Oct:201.8,Nov:201.5,Dec:201.8,Annual:201.6,HALF1:200.6,HALF2:202.6},{Year:2007,Jan:202.416,Feb:203.499,Mar:205.352,Apr:206.686,May:207.949,Jun:208.352,Jul:208.299,Aug:207.917,Sep:208.49,Oct:208.936,Nov:210.177,Dec:210.036,Annual:207.342,HALF1:205.709,HALF2:208.976},{Year:2008,Jan:211.08,Feb:211.693,Mar:213.528,Apr:214.823,May:216.632,Jun:218.815,Jul:219.964,Aug:219.086,Sep:218.783,Oct:216.573,Nov:212.425,Dec:210.228,Annual:215.303,HALF1:214.429,HALF2:216.177},{Year:2009,Jan:211.143,Feb:212.193,Mar:212.709,Apr:213.24,May:213.856,Jun:215.693,Jul:215.351,Aug:215.834,Sep:215.969,Oct:216.177,Nov:216.33,Dec:215.949,Annual:214.537,HALF1:213.139,HALF2:215.935},{Year:2010,Jan:216.687,Feb:216.741,Mar:217.631,Apr:218.009,May:218.178,Jun:217.965,Jul:218.011,Aug:218.312,Sep:218.439,Oct:218.711,Nov:218.803,Dec:219.179,Annual:218.056,HALF1:217.535,HALF2:218.576},{Year:2011,Jan:220.223,Feb:221.309,Mar:223.467,Apr:224.906,May:225.964,Jun:225.722,Jul:225.922,Aug:226.545,Sep:226.889,Oct:226.421,Nov:226.23,Dec:225.672,Annual:224.939,HALF1:223.598,HALF2:226.28},{Year:2012,Jan:226.665,Feb:227.663,Mar:229.392,Apr:230.085,May:229.815,Jun:229.478,Jul:229.104,Aug:230.379,Sep:231.407,Oct:231.317,Nov:230.221,Dec:229.601,Annual:229.594,HALF1:228.85,HALF2:230.338},{Year:2013,Jan:230.28,Feb:232.166,Mar:232.773,Apr:232.531,May:232.945,Jun:233.504,Jul:233.596,Aug:233.877,Sep:234.149,Oct:233.546,Nov:233.069,Dec:233.049,Annual:232.957,HALF1:232.366,HALF2:233.548},{Year:2014,Jan:233.916,Feb:234.781,Mar:236.293,Apr:237.072,May:237.9,Jun:238.343,Jul:238.25,Aug:237.852,Sep:238.031,Oct:237.433,Nov:236.151,Dec:234.812,Annual:236.736,HALF1:236.384,HALF2:237.088},{Year:2015,Jan:233.707,Feb:234.722,Mar:236.119,Apr:236.599,May:237.805,Jun:238.638,Jul:238.654,Aug:238.316,Sep:237.945,Oct:237.838,Nov:237.336,Dec:236.525,Annual:237.017,HALF1:236.265,HALF2:237.769},{Year:2016,Jan:236.916,Feb:237.111,Mar:238.132,Apr:239.261,May:240.229,Jun:241.018,Jul:240.628,Aug:240.849,Sep:241.428,Oct:241.729,Nov:241.353,Dec:241.432,Annual:240.007,HALF1:238.778,HALF2:241.237},{Year:2017,Jan:242.839,Feb:243.603,Mar:243.801,Apr:244.524,May:244.733,Jun:244.955,Jul:244.786,Aug:245.519,Sep:246.819,Oct:246.663,Nov:246.669,Dec:246.524,Annual:245.12,HALF1:244.076,HALF2:246.163},{Year:2018,Jan:247.867,Feb:248.991,Mar:249.554,Apr:250.546,May:251.588,Jun:251.989,Jul:252.006,Aug:252.146,Sep:252.439,Oct:252.885,Nov:252.038,Dec:251.233,Annual:251.107,HALF1:"",HALF2:""},{Year:2019,Jan:251.712,Feb:252.776,Mar:254.202,Apr:255.548,May:256.092,Jun:256.143,Jul:256.571,Aug:256.558,Sep:256.759,Oct:257.346,Nov:257.208,Dec:256.974,Annual:255.657,HALF1:"",HALF2:""},{Year:2020,Jan:257.971,Feb:258.678,Mar:258.115,Apr:256.389,May:256.394,Jun:257.797,Jul:259.101,Aug:259.918,Sep:260.28,Oct:260.388,Nov:260.229,Dec:260.474,Annual:258.811,HALF1:"",HALF2:""},{Year:2021,Jan:261.582,Feb:263.014,Mar:264.877,Apr:267.054,May:269.195,Jun:271.696,Jul:273.003,Aug:273.567,Sep:274.31,Oct:276.589,Nov:277.948,Dec:277.948,Annual:277.948,HALF1:"",HALF2:""},{Year:2022,Jan:281.148,Feb:283.716,Mar:287.504,Apr:289.109,May:292.296,Jun:296.311,Jul:296.276,Aug:296.171,Sep:296.808,Oct:298.012,Nov:297.711,Dec:296.797,Annual:296.797,HALF1:"",HALF2:""},{Year:2023,Jan:299.17,Feb:300.84,Mar:301.836,Apr:303.363,May:304.127,Jun:305.109,Jul:305.691,Aug:307.026,Sep:307.789,Oct:307.671,Nov:307.051,Dec:306.746,Annual:306.746,HALF1:"",HALF2:""},{Year:2024,Jan:308.417,Feb:310.326,Mar:312.332,Apr:313.548,May:314.069,Jun:314.175,Jul:314.54,Aug:314.796,Sep:315.301,Annual:315.301,HALF1:"",HALF2:""}],r=2023,a=[{abbr:"Jan",name:"January",order:1},{abbr:"Feb",name:"February",order:2},{abbr:"Mar",name:"March",order:3},{abbr:"Apr",name:"April",order:4},{abbr:"May",name:"May",order:5},{abbr:"Jun",name:"June",order:6},{abbr:"Jul",name:"July",order:7},{abbr:"Aug",name:"August",order:8},{abbr:"Sep",name:"September",order:9},{abbr:"Oct",name:"October",order:10},{abbr:"Nov",name:"November",order:11},{abbr:"Dec",name:"December",order:12}];function i(e,t){const r=t?a.find((e=>e.order===t)).abbr:"Annual";return n.find((t=>t.Year===e))[r]}},9834:function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},9846:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},9849:function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(5093))}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n(5702)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,